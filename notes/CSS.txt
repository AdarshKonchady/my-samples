New features and properties in CSS3
    - Box model
    - New Web fonts
    - Rounded corners
    - Border Images
    - Box Shadows, Text Shadows
    - New Color schemes (RGBA)
    - Transform property
    - New Pseudo-classes
    - Multi-column layout
    - New Gradients


Difference between visibility:hidden and display:none
    - display:none will not be available in the page and does not occupy any space. 
    - visibility:hidden hides an element, but it will still take up the same space as before. The element will be hidden, but still affect the layout.
    - visibility: hidden simply hides the element, while it will still take up space and affect the layout of the document.
    - display: none also hides the element, but will not take up space and the page will appear as if the element is not present.
    - display:none removes the element from the normal flow of the page, allowing other elements to fill in.
    - visibility:hidden leaves the element in the normal flow of the page such that is still occupies space.


CSS display: inline vs inline-block vs block
    - Inline elements:
        - respect left & right margins and padding, but not top & bottom
        - cannot have a width and height set
        - allow other elements to sit to their left and right.
    - Block elements:
        - respect all of those
        - force a line break after the block element
    - Inline-block elements:
        - allow other elements to sit to their left and right
        - respect top & bottom margins and padding
        - respect height and width


CSS Layout - The position Property
    The position property specifies the type of positioning method used for an element (static, relative, fixed or absolute).

    position: static
        - HTML elements are positioned static by default.
        - Static positioned elements are not affected by the top, bottom, left, and right properties.
        - An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page:

    position: relative
        - An element with position: relative; is positioned relative to its normal position.
        - Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.

    position: fixed
        - An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.
        - A fixed element does not leave a gap in the page where it would normally have been located.

    position: absolute
        - An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).
        - However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
        - Note: A "positioned" element is one whose position is anything except static.


CSS Box Model
    - All HTML elements can be considered as boxes. In CSS, the term "box model" is used when talking about design and layout.
    - The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content.

    Explanation of the different parts:
        - Content: The content of the box, where text and images appear
        - Padding:  Clears an area around the content. The padding is transparent
        - Border:  A border that goes around the padding and content
        - Margin:  Clears an area outside the border. The margin is transparent


CSS Pseudo-classes
    - A pseudo-class is used to define a special state of an element.
    - For example, it can be used to:
        - Style an element when a user mouses over it
        - Style visited and unvisited links differently
        - Style an element when it gets focus
    - Syntax
        selector:pseudo-class {
            property:value;
        }

    All CSS Pseudo Classes
        :active	a:active	Selects the active link
        :checked	input:checked	Selects every checked <input> element
        :disabled	input:disabled	Selects every disabled <input> element
        :empty	p:empty	Selects every <p> element that has no children
        :enabled	input:enabled	Selects every enabled <input> element
        :first-child	p:first-child	Selects every <p> elements that is the first child of its parent
        :first-of-type	p:first-of-type	Selects every <p> element that is the first <p> element of its parent
        :focus	input:focus	Selects the <input> element that has focus
        :hover	a:hover	Selects links on mouse over
        :in-range	input:in-range	Selects <input> elements with a value within a specified range
        :invalid	input:invalid	Selects all <input> elements with an invalid value
        :lang(language)	p:lang(it)	Selects every <p> element with a lang attribute value starting with "it"
        :last-child	p:last-child	Selects every <p> elements that is the last child of its parent
        :last-of-type	p:last-of-type	Selects every <p> element that is the last <p> element of its parent
        :link	a:link	Selects all unvisited links
        :not(selector)	:not(p)	Selects every element that is not a <p> element
        :nth-child(n)	p:nth-child(2)	Selects every <p> element that is the second child of its parent
        :nth-last-child(n)	p:nth-last-child(2)	Selects every <p> element that is the second child of its parent, counting from the last child
        :nth-last-of-type(n)	p:nth-last-of-type(2)	Selects every <p> element that is the second <p> element of its parent, counting from the last child
        :nth-of-type(n)	p:nth-of-type(2)	Selects every <p> element that is the second <p> element of its parent
        :only-of-type	p:only-of-type	Selects every <p> element that is the only <p> element of its parent
        :only-child	p:only-child	Selects every <p> element that is the only child of its parent
        :optional	input:optional	Selects <input> elements with no "required" attribute
        :out-of-range	input:out-of-range	Selects <input> elements with a value outside a specified range
        :read-only	input:read-only	Selects <input> elements with a "readonly" attribute specified
        :read-write	input:read-write	Selects <input> elements with no "readonly" attribute
        :required	input:required	Selects <input> elements with a "required" attribute specified
        :root	root	Selects the document's root element
        :target	#news:target	Selects the current active #news element (clicked on a URL containing that anchor name)
        :valid	input:valid	Selects all <input> elements with a valid value
        :visited	a:visited	Selects all visited links


CSS Pseudo-Elements?
    - A CSS pseudo-element is used to style specified parts of an element.
    - For example, it can be used to:
        - Style the first letter, or line, of an element
        - Insert content before, or after, the content of an element
    - Syntax
        selector::pseudo-element {
            property:value;
        }
   
    All CSS Pseudo Elements
        ::after	p::after	Insert content after every <p> element
        ::before	p::before	Insert content before every <p> element
        ::first-letter	p::first-letter	Selects the first letter of every <p> element
        ::first-line	p::first-line	Selects the first line of every <p> element
        ::selection	p::selection	Selects the portion of an element that is selected by a user


Pseudo-classes Vs Pseudo-elements
    - A pseudo-class filters existing elements.
        a:link means all <a>s that are :link.
    - A pseudo-element is a new fake element.
        div::after means non-existing elements after <div>s.
    - ::selection is another example of a pseudo-element.
        It doesn't mean all elements that are selected; it means the range of content that is selected, which may span portions of multiple elements.


CSS float Property
    - The float property specifies whether or not a box (an element) should float.
    - Note: Absolutely positioned elements ignores the float property!

    CSS Syntax
        float: none|left|right|initial|inherit;

    Property Values
        - none	The element is not floated, and will be displayed just where it occurs in the text. This is default	Play it »
        - left	The element floats to the left	Play it »
        - right	The element floats the right


CSS clear Property
    - The clear property specifies on which sides of an element floating elements are not allowed to float.

    CSS Syntax
        clear: none|left|right|both|initial|inherit;

    Property Values
        - none	Default. Allows floating elements on both sides
        - left	No floating elements allowed on the left side
        - right	No floating elements allowed on the right side
        - both	No floating elements allowed on either the left or the right side


Match CSS selectors
    * div, p - Selects all <div> elements and all <p> elements
    * div p - Selects all <p> elements that are anywhere inside a <div> element
    * div > p - Selects all <p> elements where the immediate parent is a <div> element
    * div + p - Selects all <p> elements that are placed immediately after a <div> element
    * div ~ p - Selects all <p> elements that are anywhere preceded by a <div> element


CSS units for expressing length
    * cm - centimeters
    * em - elements (i.e., relative to the font-size of the element; e.g., 2 em means 2 times the current font size)
    * in - inches
    * mm - millimeters
    * pc - picas (1 pc = 12 pt = 1/6th of an inch)
    * pt - points (1 pt = 1/72nd of an inch)
    * px - pixels (1 px = 1/96th of an inch)


CSS z-index Property
    - The z-index property specifies the stack order of an element.
    - An element with greater stack order is always in front of an element with a lower stack order.
    - Note: z-index only works on positioned elements (position:absolute, position:relative, or position:fixed).

    CSS Syntax
        - z-index: auto|number|initial|inherit;

    Property Values
        - auto	Sets the stack order equal to its parents. This is default	Play it »
        - number	Sets the stack order of the element. Negative numbers are allowed


Cascading in CSS
    - "Cascading" in this context means that because more than one stylesheet rule could apply to a particular piece of HTML, there has to be a known way of determining which specific stylesheet rule applies to which piece of HTML.
    - The rule used is chosen by cascading down from the more general rules to the specific rule required. The most specific rule is chosen.


CSS3 Media Queries
    - Media queries in CSS3 extend the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device.
    - Media queries can be used to check many things, such as:
        - width and height of the viewport
        - width and height of the device
        - orientation (is the tablet/phone in landscape or portrait mode?)
        - resolution
    - Using media queries are a popular technique for delivering a tailored style sheet to tablets, iPhone, and Androids.

    Media Query Syntax
        - A media query consists of a media type and can contain one or more expressions, which resolve to either true or false.
            @media not|only mediatype and (expressions) {
                CSS-Code;
            }
        - The result of the query is true if the specified media type matches the type of device the document is being displayed on and all expressions in the media query are true. When a media query is true, the corresponding style sheet or style rules are applied, following the normal cascading rules.
        - Unless you use the not or only operators, the media type is optional and the all type will be implied.
        - You can also have different stylesheets for different media:
            <link rel="stylesheet" media="mediatype and|not|only (expressions)" href="print.css">

    CSS3 Media Types
        - all	Used for all media type devices
        - print	Used for printers
        - screen	Used for computer screens, tablets, smart-phones etc.
        - speech	Used for screenreaders that "reads" the page out loud

    Media Features
        * aspect-ratio	The ratio between the width and the height of the viewport
        * color	The number of bits per color component for the output device
        * color-index	The number of colors the device can display
        * device-aspect-ratio	The ratio between the width and the height of the device
        * device-height	The height of the device, such as a computer screen
        * device-width	The width of the device, such as a computer screen
        * grid	Whether the device is a grid or bitmap
        * height	The viewport height
        * max-aspect-ratio	The maximum ratio between the width and the height of the display area
        * max-color	The maximum number of bits per color component for the output device
        * max-color-index	The maximum number of colors the device can display
        * max-device-aspect-ratio	The maximum ratio between the width and the height of the device
        * max-device-height	The maximum height of the device, such as a computer screen
        * max-device-width	The maximum width of the device, such as a computer screen
        * max-height	The maximum height of the display area, such as a browser window
        * max-monochrome	The maximum number of bits per "color" on a monochrome (greyscale) device
        * max-resolution	The maximum resolution of the device, using dpi or dpcm
        * max-width	The maximum width of the display area, such as a browser window
        * min-aspect-ratio	The minimum ratio between the width and the height of the display area
        * min-color	The minimum number of bits per color component for the output device
        * min-color-index	The minimum number of colors the device can display
        * min-device-aspect-ratio	The minimum ratio between the width and the height of the device
        * min-device-width	The minimum width of the device, such as a computer screen
        * min-device-height	The minimum height of the device, such as a computer screen
        * min-height	The minimum height of the display area, such as a browser window
        * min-monochrome	The minimum number of bits per "color" on a monochrome (greyscale) device
        * min-resolution	The minimum resolution of the device, using dpi or dpcm
        * min-width	The minimum width of the display area, such as a browser window
        * monochrome	The number of bits per "color" on a monochrome (greyscale) device
        * orientation	The orientation of the viewport (landscape or portrait mode)
        * overflow-block	How does the output device handle content that overflows the viewport along the block axis (added in Media Queries Level 4)
        * overflow-inline	Can content that overflows the viewport along the inline axis be scrolled (added in Media Queries Level 4)
        * resolution	The resolution of the output device, using dpi or dpcm
        * scan	The scanning process of the output device
        * update-frequency	How quickly can the output device modify the appearance of the content (added in Media Queries Level 4)
        * width	The viewport width


CSS3 Animations
    - CSS3 animations allows animation of most HTML elements without using JavaScript or Flash!
    - An animation lets an element gradually change from one style to another.
    - You can change as many CSS properties you want, as many times you want.
    - To use CSS3 animation, you must first specify some keyframes for the animation.
    - Keyframes hold what styles the element will have at certain times.

    The @keyframes Rule
        - When you specify CSS styles inside the @keyframes rule, the animation will gradually change from the current style to the new style at certain times.
        - To get an animation to work, you must bind the animation to an element.

    Specify the Speed Curve of the Animation
        - The animation-timing-function property specifies the speed curve of the animation.
        - The animation-timing-function property can have the following values:
            * ease - specifies an animation with a slow start, then fast, then end slowly (this is default)
            * linear - specifies an animation with the same speed from start to end
            * ease-in - specifies an animation with a slow start
            * ease-out - specifies an animation with a slow end
            * ease-in-out - specifies an animation with a slow start and end
            * cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function

    Animation Shorthand Property
        - The example below uses six of the animation properties:
        - Example
            div {
                animation-name: example;
                animation-duration: 5s;
                animation-timing-function: linear;
                animation-delay: 2s;
                animation-iteration-count: infinite;
                animation-direction: alternate;
            }
        - The same animation effect as above can be achieved by using the shorthand animation property:
            div {
                animation: example 5s linear 2s infinite alternate;
            }

    CSS3 Animation Properties
        * @keyframes	Specifies the animation code
        * animation	A shorthand property for setting all the animation properties
        * animation-delay	Specifies a delay for the start of an animation
        * animation-direction	Specifies whether an animation should play in reverse direction or alternate cycles
        * animation-duration	Specifies how many seconds or milliseconds an animation takes to complete one cycle
        * animation-fill-mode	Specifies a style for the element when the animation is not playing (when it is finished, or when it has a delay)
        * animation-iteration-count	Specifies the number of times an animation should be played
        * animation-name	Specifies the name of the @keyframes animation
        * animation-play-state	Specifies whether the animation is running or paused
        * animation-timing-function	Specifies the speed curve of the animation


CSS3 Transitions
    - CSS3 transitions allows you to change property values smoothly (from one value to another), over a given duration.

    How to Use CSS3 Transitions?
        - To create a transition effect, you must specify two things:
            - the CSS property you want to add an effect to
            - the duration of the effect
        - Note: If the duration part is not specified, the transition will have no effect, because the default value is 0.

    CSS3 Transition Properties
        * transition	A shorthand property for setting the four transition properties into a single property
        * transition-delay	Specifies a delay (in seconds) for the transition effect
        * transition-duration	Specifies how many seconds or milliseconds a transition effect takes to complete
        * transition-property	Specifies the name of the CSS property the transition effect is for
        * transition-timing-function	Specifies the speed curve of the transition effect


CSS3 transform Property
    - The transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, skew, etc., elements.

    Syntax
        transform: none|transform-functions|initial|inherit;

    Property Values
        * none	Defines that there should be no transformation
        * matrix(n,n,n,n,n,n)	Defines a 2D transformation, using a matrix of six values
        * matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)	Defines a 3D transformation, using a 4x4 matrix of 16 values
        * translate(x,y)	Defines a 2D translation
        * translate3d(x,y,z)	Defines a 3D translation
        * translateX(x)	Defines a translation, using only the value for the X-axis
        * translateZ(z)	Defines a 3D translation, using only the value for the Z-axis
        * translateY(y)	Defines a translation, using only the value for the Y-axis
        * scale(x,y)	Defines a 2D scale transformation
        * scale3d(x,y,z)	Defines a 3D scale transformation
        * scaleX(x)	Defines a scale transformation by giving a value for the X-axis
        * scaleY(y)	Defines a scale transformation by giving a value for the Y-axis
        * scaleZ(z)	Defines a 3D scale transformation by giving a value for the Z-axis
        * rotate(angle)	Defines a 2D rotation, the angle is specified in the parameter
        * rotate3d(x,y,z,angle)	Defines a 3D rotation
        * rotateX(angle)	Defines a 3D rotation along the X-axis
        * rotateY(angle)	Defines a 3D rotation along the Y-axis
        * rotateZ(angle)	Defines a 3D rotation along the Z-axis
        * skew(x-angle,y-angle)	Defines a 2D skew transformation along the X- and the Y-axis
        * skewX(angle)	Defines a 2D skew transformation along the X-axis
        * skewY(angle)	Defines a 2D skew transformation along the Y-axis
        * perspective(n)	Defines a perspective view for a 3D transformed element


CSS3 opacity Property
    - The opacity property sets the opacity level for an element.
    - The opacity-level describes the transparency-level, where 1 is not transparent at all, 0.5 is 50% see-through, and 0 is completely transparent.

    CSS Syntax
        opacity: number|initial|inherit;

    Property Values
        number	Specifies the opacity. From 0.0 (fully transparent) to 1.0 (fully opaque)


Different types of web design and layouts:
    - Fixed websites have a set width and resizing the browser or viewing it on different devices won’t affect on the way the website looks.
    - Fluid websites are built using percentages for widths. As a result, columns are relative to one another and the browser allowing it to scale up and down fluidly.
    - Adaptive websites introduce media queries to target specific device sizes, like smaller monitors, tablets, and mobile.
    - Responsive websites are built on a fluid grid and use media queries to control the design and its content as it scales down or up with the browser or device.
