Tags : 
----------------------------------------------------------------------------------------

1. Design patterns - pubsub - with examples
	https://carldanley.com/js-module-pattern/

	http://www.dofactory.com/javascript/design-patterns
	- http://www.dofactory.com/javascript/observer-design-pattern - Observer / PubSub
	- http://www.dofactory.com/javascript/iterator-design-pattern - Iterator

2. algorithms(sort, search)
3. data structure(queue, hashmap) 
4. open source experience
5. improve performance  - CSS Spriting, JS minification, few event listeners, lazy loading
	AMD - Client (RequireJS implements AMD)
	CommonJS - Server
6. analyzing performance - Done
7. memory leakage.
8. requestAnimationFrame - Done
9. basic js concepts - Done
10. positioning
11. Sorting table - passing function when sorting number
12. Search on multiple fields(filtering) in table... 
13. Objects overwriting prototype object - 
14. What happens when you load a page on the browser?

scripting engine chrome, ie, mozilla -> fastest ----> v6
16. throttle, Debounce - Done with doubts
17. JSONP - http://javascript.webcodehelpers.com/2014/05/jsonp-cross-domain-ajax-call-using.html - Done

fn.prototype = {}.... => overwrites the prototype. need to rewrite constructor.
fn.prototype.constructor = fn;


Adarsh questions: 
1. __proto v/s prototype in object, functions, etc.
2. Debounce, throttle
3. Promises in JS
4. Jquery - interview qns... and important concepts
5. Using 'map', filter function in js
6. Encapsulation, Polymorphism, etc. with defn and example in JS.
7. Basics of NodeJS
8. Linked list in JS - http://www.thatjsdude.com/interview/linkedList.html#stackAndQuue
9. Currying arguments - http://tech.pro/tutorial/2011/functional-javascript-part-4-function-currying
10. Features in ES6
11. CommonJS, Amd - http://stackoverflow.com/a/16522990/802651 - Done
12. About Flipkart, new feature(UI)
13. Event loop, Web worker - http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/
14. CSS interview questions
15. Cache control - http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/
16. Deep clone an object - http://heyjavascript.com/4-creative-ways-to-clone-objects/
function cloneObject(obj) {
    if (obj === null || typeof obj !== 'object') {
        return obj;
    }

    var temp = obj.constructor(); // give temp the original obj's constructor
    for (var key in obj) {
        temp[key] = cloneObject(obj[key]);
    }

    return temp;
}

Doubts: 
1. How is debouncing different from throttle.. with code example
	https://remysharp.com/2010/07/21/throttling-function-calls
2.

Questions that fucked me up:
FLIPKART:
---------------------------
1. Implement angular two way binding in vanilla js.
	http://johndyer.name/native-browser-get-set-properties-in-javascript/

2. Caching in browsers for resources

CSS:
Popup in center of page

WALMART:
---------------------------
JS:
1.
function Dog() {
  this.a = 10;
}

function Cat() {
}

Inheritance:
Object.create will not inherit public properties of function mapped to 'this' keyword.
Cat.prototype = new A();

Refer following link for the solution:
https://adarshkonchady.wordpress.com/2016/03/18/problem-with-using-new-for-inheritance/

2. Will function as object properties create a closure? Try an example. - Yes

3. https://developer.mozilla.org/en/docs/Web/JavaScript/Inheritance_and_the_prototype_chain

4.  new v/s Object.create
   new - Will set __proto__ of newly created object to function.prototype before executing the function

   So, when you call

   var o = new Foo();
   JavaScript actually just does

   var o = new Object();
   o.[[Prototype]] = Foo.prototype;
   Foo.call(o);

   Object.create(o) - Just creates a new object and points __proto__ to the passed in object.

5. You have utility fn abc

   function abc() {
     this.a = 10;
   }

   abc() // window.a = 10;

   Now ensure that if abc is called without creating a new object, set it in a new object...

   function abc() {
     if(!this instanceof abc) {
        // Write something here
     }
   }

6. What is clearfix?
	http://stackoverflow.com/questions/8554043/what-is-clearfix

	.clearfix:after {
       content: " "; /* Older browser do not support empty content */
       visibility: hidden;
       display: block;
       height: 0;
       clear: both;
    }
    Or, if you don't require IE<8 support, the following is fine too:

    .clearfix:after {
      content: "";
      display: table;
      clear: both;
    }

Jquery:
1. delegate,on,live difference.... what performance issues?

CSS / CSS3:
1. Div in center of page.
margin:0 doesn't work for top,bottom
use: top:50%, then translate -50%....
Show with example...
2. Is 'left' only for relative and absolute. What about 'margin-left'? Does margin-left work for relative/absolute elements?
3. Media query syntax
4. Popup in center of page
5. ::before, ::after where does it put it exactly? - Before and after content of the target
  Learn pseudo classes, pseudo elements

HTML/HTML5:
1. geolocation,
2. localStorage persists on window close?
3. Does label for work for input text field? Does click on label bring focus on textbox?


AngularJS:
1. Show count in filtered list
Eg: u have a list of 30 elements using ng-repeat.
Filter using a search textbox so only 2 items displaying now..
Problem: Display 2 as count....

2.
Factory,service,provider - internal working ? what's the difference. and when to use what ?

3 Use of 'track by' in Angular -
  Link: https://docs.angularjs.org/api/ng/directive/ngRepeat#tracking-and-duplicates

Interview questions links : 
1. http://thatjsdude.com/interview/index.html
2. https://github.com/h5bp/Front-end-Developer-Interview-Questions - 
3.

TARGET:
---------------------------
1. How watchers work?
	http://johndyer.name/native-browser-get-set-properties-in-javascript/
	http://dailyjs.com/2012/11/12/code-review-watch-js/

2. How does Event object work in Angular?

EVENTSHIGH: - https://www.eventshigh.com/
-------------------------------
1. How facebook auto logs you in every time once you have logged in?
2. Libraries for decreasing image quality?
3. https://grabhouse.com/ - How that animation is done?
	- Find about svg animation using path
4. Find kth smallest element in the array.

INTEL
-------------------------------
1. Search an element in a sorted and rotated array.
   Link: http://www.geeksforgeeks.org/search-an-element-in-a-sorted-and-pivoted-array/

2. Given a 2D array arr and an input arr aI, find all the combinations of rows mentioned in array aI in arr.
       arr
       A B C
       D E F
       G H I
       J K L

    Input (Row numbers):
       aI
       0 3

       Output: AJ, AK, AL, BJ, BK, BL, CJ, CK, CL

    Input:
       aI: 0 3 0
       Output: AJA, AJB, AJC, AKA, AKB, AKC, ALA, ALB, ALC
               BJA, BJB, BJC, BKA, BKB, BKC, BLA, BLB, BLC
               CJA, CJB, CJC, CKA, CKB, CKC, CLA, CLB, CLC

       Formula for number of rows in output: 3 ^ (number of elements in aI)

PWC
------------------------------------------------------
1. Regex to remove all vowels in a given string
function removeVowels(str) {
    return str.replace(/[aeiou]/gim, '');
}

2.
function del(a) {
  delete a;
  return a;
}

delete('d'); // prints 'd'

delete has effect only on object properties

MAKEMYTRIP
----------------------------------------
1.
var foo = {
  bar: function() {
    return this.baz;
  },
  baz: 1
};


(function() {
    return typeof arguments[0]();
})(foo.bar);

// Prints 'undefined'. (Reason: foo.bar executed in global context. Hence this refers to 'window' object)

2. Creating and triggering events
    https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events

3.

Notes :
1. Performance improvements
	a. Avoid too many event listeners
	b. CSS spriting
	c. JS minification
	d. Lazy loading of images
        e. Caching (read about HTTP headers for caching)

2. Built-in objects:
	a. Data wrapper objects: Number, String, Boolean, Array, Function, Object
	b. Utility objects: Math, Date, RegExp
	c. Error objects: Error

3. Lexicographic sort:
    var a = [3,5,1,11,7, "test"];
	a.sort(function(a, b) {
        return a > b; //Ascending order of numbers
    });
    OUTPUT: [1,3,5,7,11,"test"]

4. Properties of RegExp objects :
	a. global
	b. ignoreCase
	c. multiline
	d. lastIndex - Position at which to start the search. Defaults to 0.
	e. source - Contains the regexp pattern.

5. Functions modifying the array itself:
	a. reverse()
	b. splice()

6. Reverse string function:
	String.prototype.reverse = function () {
     return Array.prototype.reverse.
     apply(this.split('')).join('');
    };

7. Inheritance
		function P() {
		  this.value1 = 10;
		}
		function C() {
		  this.value2 = 20;
		}
		C.prototype = new P();
		C.prototype.constructor; //Will be pointing to function P() { ... }
		C.prototype.constructor = C;
		var c = new C();
		c.value1; //10
		c.value2; //20;

    //Better approach. Put only shared properties in prototype.
    	function P() {
          this.value1 = 10;

        }
        function C() {
          this.value2 = 20;
        }
        P.prototype.sharedValue1 = 10;

        C.prototype = P.prototype;

        C.prototype.constructor; //Will be pointing to function P() { ... }
        C.prototype.constructor = C;
        var c = new C();
        c.value1; //undefined
        c.sharedValue1; //10
        c.value2; //20;

        //But problem here is Parent will get Child properties as well.

        C.prototype.name = 'Testing name';
        var p = new P();
        p.name; // Parent modified !!! Gives out 'Testing name'

	//To avoid this, create temp function F()
		function P() {
		  this.value1 = 10;

		}
		function C() {
		  this.value2 = 20;
		}
		P.prototype.sharedValue1 = 10;

		//MODIFIED LINES - START
		function F() {}
		F.prototype = P.prototype;
		C.prototype = new F();
		//MODIFIED LINES - END

		C.prototype.constructor; //Will be pointing to function P() { ... }
		C.prototype.constructor = C;
		var c = new C();
		c.value1; //undefined
		c.sharedValue1; //10
		c.value2; //20;

		//But problem here is Parent will get Child properties as well.

		C.prototype.name = 'Testing name';
		var p = new P();
		p.name; // Parent modified !!! Gives out 'Testing name'

8. Javascript data types:
	Number, String, Boolean, Function, Object, Null, Undefined

9. Falsy values :
	false, null, undefined, '', 0, NaN

10. Awesome interview : 
	http://blog.sourcing.io/interview-questions
	.overlay {
               position: fixed;
               top: 0;
               bottom: 0;
               left: 0;
               right: 0;
               background: rgba(0,0,0,0.8);
               color: #fff;
               text-align: center;
               vertical-align: middle;
               display: table-cell;
               width: 500px;
               height: 200px;
               margin: auto;
             }
	 https://css-tricks.com/quick-css-trick-how-to-center-an-object-exactly-in-the-center/ - if width,height is known
	 https://css-tricks.com/centering-percentage-widthheight-elements/ - without width,height


11. HTML5 APIs
	http://www.sitepoint.com/10-html5-apis-worth-looking/
	a. User Timing API - Test performance of our code 
		performance.mark("startFoo");
		// A time consuming function
		foo();
		performance.mark("endFoo");
		 
		performance.measure("durationFoo", "startFoo", "endFoo");

	b. Vibration API
	c. Battery status API

12. Permutation of given string:
	function permutations(str){
		var arr = str.split(''),
			len = arr.length,
			perms = [],
			rest,
			picked,
			restPerms,
			next;

		if (len == 0)
			return [str];

		for (var i=0; i<len; i++)
		{
			rest = Object.create(arr);
			picked = rest.splice(i, 1);

			restPerms = permutations(rest.join(''));

		   for (var j=0, jLen = restPerms.length; j< jLen; j++)
		   {
			   next = picked.concat(restPerms[j]);
			   perms.push(next.join(''));
		   }
		}
	   return perms;
	}

	Explanation:

    Idea: Idea is very simple. We will convert the string to an array. from the array we will pick one character and then permute rest of it. After getting the permutation of the rest of the characters, we will concatenate each of them with the character we have picked.
    step-1 First copy original array to avoid changing it while picking elements
    step-2 Use splice to removed element from the copied array. We copied the array because splice will remove the item from the array. We will need the picked item in the next iteration.
    step-3 [1,2,3,4].splice(2,1) will return [3] and remaining array = [1,2,4]
    step-4 Use recursive method to get the permutation of the rest of the elements by passing array as string
    step-5 Finally, concat like a+permute(bc) for each

13.
Angular ng-options :
http://www.undefinednull.com/2014/08/11/a-brief-walk-through-of-the-ng-options-in-angularjs/

a. label for value in array

label - <options>label</options>
value - To be assigned to ng-model

By default, unless specified, the model bound to the parent select box will be the 'value'  of the expression.

b. select as label for value in array

select - To be assigned to ng-model
label - <options>label</options>

Note: Always use 'track by' for ng-options

14.
http://www.toptal.com/angular-js/top-18-most-common-angularjs-developer-mistakes
