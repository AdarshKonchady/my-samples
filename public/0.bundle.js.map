{"version":3,"sources":["webpack:///./node_modules/@firebase/util/dist/cjs/index.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/util.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/Path.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/indexes/PriorityIndex.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/ChildrenNode.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/Node.js","webpack:///./node_modules/tslib/tslib.es6.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/operation/Operation.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/validation.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/Change.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/nodeFromJSON.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/indexes/KeyIndex.js","webpack:///./node_modules/@firebase/app/dist/esm/src/firebaseApp.js","webpack:///./node_modules/@firebase/app/dist/esm/index.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/CacheNode.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/Repo.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/SortedMap.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/LeafNode.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/indexes/Index.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/realtime/Constants.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/storage/storage.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/RepoManager.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/stats/StatsManager.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/filter/IndexedFilter.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/api/DataSnapshot.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/api/Reference.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/constants.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/filter/RangedFilter.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/ServerActions.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/realtime/WebSocketConnection.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/realtime/BrowserPollConnection.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/realtime/Connection.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/EventEmitter.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/PersistentConnection.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/stats/StatsListener.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/ViewCache.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/SyncPoint.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/operation/Overwrite.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/CountedSet.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/SparseSnapshotTree.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/ServerValues.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/indexes/PathIndex.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/comparators.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/childSet.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/IndexMap.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/indexes/ValueIndex.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/snap/snap.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/api/Query.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/api/onDisconnect.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/RepoInfo.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/libs/parser.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/api/Database.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/obj.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/json.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/crypt.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/assert.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/api/test_access.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/api/internal.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/filter/LimitedFilter.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/QueryParams.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/ReadonlyRestClient.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/realtime/polling/PacketReceiver.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/realtime/TransportManager.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/OnlineMonitor.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/VisibilityMonitor.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/EventQueue.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/stats/StatsReporter.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/stats/StatsCollection.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/AuthTokenProvider.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/SnapshotHolder.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/CompoundWrite.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/EventGenerator.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/CompleteChildSource.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/ChildChangeAccumulator.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/ViewProcessor.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/View.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/operation/Merge.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/operation/ListenComplete.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/operation/AckUserWrite.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/Event.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/view/EventRegistration.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/util/NextPushId.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/api/TransactionResult.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/storage/MemoryStorage.js","webpack:///./node_modules/@firebase/database/dist/cjs/src/core/storage/DOMStorageWrapper.js","webpack:///./node_modules/@firebase/database/dist/cjs/index.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/utf8.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/validation.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/subscribe.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/hash.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/sha1.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/query.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/jwt.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/errors.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/environment.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/deferred.js","webpack:///./node_modules/@firebase/util/dist/cjs/src/deepCopy.js"],"names":["Object","defineProperty","exports","value","assert_1","__webpack_require__","assert","assertionError","crypt_1","base64","base64Decode","base64Encode","constants_1","CONSTANTS","deepCopy_1","deepCopy","deepExtend","patchProperty","deferred_1","Deferred","environment_1","getUA","isMobileCordova","isNodeSdk","isReactNative","errors_1","ErrorFactory","FirebaseError","patchCapture","json_1","jsonEval","stringify","jwt_1","decode","isAdmin","issuedAtTime","isValidFormat","isValidTimestamp","obj_1","clone","contains","every","extend","findKey","findValue","forEach","getAnyKey","getCount","getValues","isEmpty","isNonNullObject","map","safeGet","query_1","querystring","querystringDecode","sha1_1","Sha1","subscribe_1","async","createSubscribe","validation_1","errorPrefix","validateArgCount","validateCallback","validateContextObject","validateNamespace","utf8_1","stringLength","stringToByteArray","id","util_1","util_2","util_3","util_4","util_5","util_6","storage_1","util_7","LUIDGenerator","sha1","str","utf8Bytes","update","sha1Bytes","digest","encodeByteArray","buildLogMessage_","var_args","_i","arguments","length","message","i","Array","isArray","apply","logger","firstLog_","enableLogging","logger_","persistent","console","log","bind","SessionStorage","set","remove","get","logWrapper","prefix","concat","error","fatal","Error","warn","warnIfPageIsSecure","window","location","protocol","indexOf","warnAboutUnsupportedMethod","methodName","isInvalidJSONNumber","data","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","executeWhenDOMReady","fn","document","readyState","called_1","wrappedFn_1","body","setTimeout","Math","floor","addEventListener","attachEvent","MIN_NAME","MAX_NAME","nameCompare","a","b","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","key","obj","ObjectToUniqueKey","keys","k","push","sort","splitStringBySize","segsize","len","dataSegs","c","substring","each","val","bindCallback","callback","context","doubleToIEEE754String","v","s","e","f","ln","bits","abs","pow","min","LN2","round","reverse","join","hexByteString","hexByte","parseInt","substr","toString","toLowerCase","isChromeExtensionContentScript","chrome","extension","test","href","isWindowsStoreApp","Windows","UI","errorForServerCode","code","query","reason","path","toUpperCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","stack","callUserCallback","beingCrawled","navigator","userAgent","search","exportPropGetter","object","name","fnGet","setTimeoutNonBlocking","time","timeout","unref","Path","pathOrString","pieceNum","this","pieces_","split","copyTo","pieceNum_","enumerable","configurable","prototype","getFront","getLength","popFront","getBack","pathString","toUrlEncodedString","encodeURIComponent","String","slice","begin","parent","pieces","child","childPathObj","childPieces","relativePath","outerPath","innerPath","outer","inner","comparePaths","left","right","leftKeys","rightKeys","cmp","equals","other","j","ValidationPath","errorPrefix_","parts_","byteLength_","max","checkValid_","pop","last","MAX_PATH_LENGTH_BYTES","MAX_PATH_DEPTH","toErrorString","nodeFromJSON","MAX_NODE","tslib_1","Index_1","Node_1","LeafNode_1","setNodeFromJSON","setMaxNode","PriorityIndex","_super","__extends","compare","aPriority","node","getPriority","bPriority","indexCmp","compareTo","isDefinedOn","indexedValueChanged","oldNode","newNode","minPost","NamedNode","MIN","maxPost","LeafNode","makePost","indexValue","priorityNode","Index","PRIORITY_INDEX","EMPTY_NODE","SortedMap_1","snap_1","PriorityIndex_1","KeyIndex_1","IndexMap_1","comparators_1","ChildrenNode","children_","priorityNode_","indexMap_","lazyHash_","validatePriorityNode","SortedMap","NAME_COMPARATOR","IndexMap","Default","isLeafNode","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","front","hasChild","updateImmediateChild","newChildNode","namedNode","newChildren","newIndexMap","removeFromIndexes","insert","addToIndexes","updateChild","newImmediateChild","numChildren","count","exportFormat","numKeys","maxKey","allIntegerKeys","forEachChild","childNode","array","hash","toHash_1","priorityHashText","childHash","getPredecessorChildName","index","idx","resolveIndex_","predecessor","getPredecessorKey","getFirstChildName","indexDefinition","minKey","getFirstChild","getLastChildName","getLastChild","action","inorderTraversal","wrappedNode","getIterator","getIteratorFrom","startPost","iterator","Wrap","next","peek","getNext","getReverseIterator","getReverseIteratorFrom","endPost","withIndex","KEY_INDEX","hasIndex","addIndex","isIndexed","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","MaxNode","call","defineProperties","MAX","KeyIndex","__EMPTY_NODE","__childrenNodeConstructor","d","__webpack_exports__","__importDefault","extendStatics","setPrototypeOf","__proto__","p","hasOwnProperty","__","constructor","create","__assign","assign","t","n","__rest","getOwnPropertySymbols","__decorate","decorators","target","desc","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","rejected","throw","result","done","then","__generator","y","g","_","label","sent","trys","ops","verb","return","Symbol","op","TypeError","__exportStar","m","__values","o","__read","ar","__spread","__await","__asyncGenerator","asyncIterator","q","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","__esModule","default","OperationType","OVERWRITE","MERGE","ACK_USER_WRITE","LISTEN_COMPLETE","OperationSource","fromUser","fromServer","queryId","tagged","User","Server","forServerTaggedQuery","Path_1","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidRootPathString","replace","isValidPriority","priority","validateFirebaseDataArg","fnName","argumentNumber","optional","validateFirebaseData","path_","hasDotValue_1","hasActualChild_1","validateFirebaseMergePaths","mergePaths","curPath","prevPath","validateFirebaseMergeDataArg","validatePriority","validateEventType","eventType","validateKey","validatePathString","validateRootPathString","validateWritablePath","validateUrl","parsedUrl","repoInfo","host","namespace","validateCredential","cred","validateBoolean","bool","validateString","string","validateObject","validateObjectContainsKey","opt_type","Change","type","snapshotNode","oldSnap","prevName","valueChange","snapshot","VALUE","childAddedChange","childKey","CHILD_ADDED","childRemovedChange","CHILD_REMOVED","childChangedChange","newSnapshot","oldSnapshot","CHILD_CHANGED","childMovedChange","CHILD_MOVED","ChildrenNode_1","childSet_1","USE_HINZE","json","jsonLeaf","node_1","jsonObj_1","childData","children_1","childrenHavePriority_1","hinzeJsonObj_1","childSet","buildChildSet","NAME_ONLY_COMPARATOR","sortedChildSet","getCompare",".priority","DEFAULT_ENTRY_NAME","tokenListeners","firebaseApp_FirebaseAppImpl","FirebaseAppImpl","options","firebase_","isDeleted_","services_","name_","options_","cjs","INTERNAL","getUid","getToken","addAuthTokenListener","removeAuthTokenListener","filter","listener","checkDestroyed_","delete","_this","removeApp","services","serviceKey","instanceKey","all","service","_getService","instanceIdentifier","instanceSpecifier","factories","extendApp","props","args","appErrors","no-app","bad-app-name","duplicate-app","app-deleted","duplicate-service","sa-not-supported","invalid-app-argument","firebase","createFirebaseNamespace","apps_","appHooks","initializeApp","app","callAppHooks","apps","SDK_VERSION","registerService","createService","serviceProperties","appHook","allowMultipleInstances","getApps","serviceNamespace","appArg","extendNamespace","useAsService","eventName","serviceName","factoryName","useService","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","getNode","ServerValues_1","nodeFromJSON_1","SparseSnapshotTree_1","SyncTree_1","SnapshotHolder_1","AuthTokenProvider_1","StatsManager_1","StatsReporter_1","StatsListener_1","EventQueue_1","PersistentConnection_1","ReadonlyRestClient_1","Database_1","Repo","repoInfo_","forceRestClient","dataUpdateCount","statsListener_","eventQueue_","EventQueue","nextWriteId_","interceptServerDataCallback_","onDisconnect_","SparseSnapshotTree","persistentConnection_","authTokenProvider","AuthTokenProvider","stats_","StatsManager","getCollection","server_","ReadonlyRestClient","onDataUpdate_","onConnectStatus_","authOverride","databaseAuthVariableOverride","PersistentConnection","onServerInfoUpdate_","addTokenChangeListener","token","refreshAuthToken","statsReporter_","getOrCreateReporter","StatsReporter","transactions_init_","infoData_","SnapshotHolder","infoSyncTree_","SyncTree","startListening","tag","currentHashFn","onComplete","infoEvents","applyServerOverwrite","stopListening","updateInfo_","serverSyncTree_","listen","status","events","raiseEventsForChangedPath","unlisten","secure","serverTime","offset","Date","getTime","generateServerValues","generateWithValues","timestamp","isMerge","taggedChildren","applyTaggedQueryMerge","taggedSnap","applyTaggedQueryOverwrite","changedChildren","applyServerMerge","snap","affectedPath","rerunTransactions_","interceptServerData_","connectStatus","runOnDisconnectEvents_","updates","updateSnapshot","getNextWriteId_","setWithPriority","newVal","newPriority","log_","serverValues","newNodeUnresolved","resolveDeferredValueSnapshot","writeId","applyUserOverwrite","queueEvents","put","errorReason","success","clearEvents","ackUserWrite","callOnCompleteCallback","abortTransactions_","childrenToMerge","empty","changedKey","changedValue","writeId_1","applyUserMerge","merge","changedPath","resolveDeferredValueTree","forEachTree","Empty","onDisconnectCancel","forget","onDisconnectSet","onDisconnectPut","remember","onDisconnectSetWithPriority","onDisconnectUpdate","onDisconnectMerge","addEventCallbackForQuery","eventRegistration","addEventRegistration","raiseEventsAtPath","removeEventCallbackForQuery","removeEventRegistration","interrupt","stats","showDelta","StatsListener","longestName","reduce","previousValue","currentValue","stat","statsIncrementCounter","metric","incrementCounter","includeStat","__database","Database","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","hasNext","LLRBNode","color","RED","copy","reverseTraversal","min_","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","LLRBEmptyNode","comparator_","root_","rightParent","resultGenerator","value_",".value","getValue","toHash","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","oldWrapped","newWrapped","PROTOCOL_VERSION","VERSION_PARAM","TRANSPORT_SESSION_PARAM","REFERER_PARAM","FORGE_REF","FORGE_DOMAIN","LAST_SESSION_PARAM","WEBSOCKET","LONG_POLLING","DOMStorageWrapper_1","MemoryStorage_1","createStoragefor","domStorageName","domStorage","setItem","removeItem","DOMStorageWrapper","MemoryStorage","PersistentStorage","Repo_1","parser_1","_staticInstance","RepoManager","repos_","useRestClient_","getInstance","appName","dbUrl","databaseFromApp","url","databaseURL","parseRepoInfo","createRepo","database","deleteRepo","repo","appRepos","toURLString","StatsCollection_1","hashString","collections_","StatsCollection","creatorFunction","reporters_","Change_1","IndexedFilter","index_","newChild","source","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","getIndex","emptyChildrenSingleton","EmptyChildren","ImmutableTree","children","fromObject","tree","childPath","childSnap","findRootMostMatchingPathAndValue","predicate","childExistingPathAndValue","findRootMostValueAndPath","subtree","childTree","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","nextChild","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","DataSnapshot","ref_","exportVal","toJSON","exists","childPathString","childRef","hasChildren","getKey","getRef","onDisconnect_1","TransactionResult_1","NextPushId_1","Query_1","QueryParams_1","SyncPoint_1","Reference","QueryParams","DEFAULT","getParent","parentPath","getRoot","ref","databaseProp","deferred","wrapCallback","promise","objectToMerge","newObjectToMerge","transaction","transactionUpdate","applyLocally","catch","startTransaction","committed","TransactionResult","setPriority","now","nextPushId","thennablePushRef","pushRef","onDisconnect","OnDisconnect","Query","__referenceConstructor","SyncPoint","NODE_CLIENT","NODE_ADMIN","IndexedFilter_1","RangedFilter","params","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","self","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","ServerActions","reportStats","app_1","Constants_1","WebSocketImpl","MozWebSocket","WebSocket","setWebSocketImpl","impl","WebSocketConnection","connId","transportSessionId","lastSessionId","keepaliveTimer","frames","totalFrames","bytesSent","bytesReceived","connURL","connectionURL_","urlParams","connectionURL","open","onMessage","everConnected_","device","headers","User-Agent","process","platform","env","proxy","HTTPS_PROXY","https_proxy","HTTP_PROXY","http_proxy","origin","mySock","onClosed_","onopen","onclose","onmessage","handleIncomingFrame","onerror","start","forceDisallow","forceDisallow_","isAvailable","isOldAndroid","oldAndroidMatch","match","parseFloat","previouslyFailed","isInMemoryStorage","markConnectionHealthy","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","send","dataStr","sendString_","shutdown_","isClosed_","clearInterval","close","setInterval","responsesRequiredToBeHealthy","healthyTimeout","CountedSet_1","PacketReceiver_1","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","FIREBASE_LONGPOLL_COMMAND_CB_NAME","FIREBASE_LONGPOLL_DATA_CB_NAME","FIREBASE_LONGPOLL_ID_PARAM","FIREBASE_LONGPOLL_PW_PARAM","FIREBASE_LONGPOLL_SERIAL_PARAM","FIREBASE_LONGPOLL_CALLBACK_ID_PARAM","FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM","FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET","FIREBASE_LONGPOLL_DATA_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM","FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM","BrowserPollConnection","urlFn","curSegmentNum","myPacketOrderer","PacketReceiver","connectTimeoutTimer_","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","closeAfter","pN","handleResponse","random","uniqueCallbackIdentifier","connectURL","addTag","startLongPoll","addDisconnectPingFrame","forceAllow","forceAllow_","createElement","myDisconnFrame","removeChild","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","CountedSet","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","theURL","nodeRestRequest","newRequest_","curDataString","theSeg","seg","ts","addLongPollTag_","segnum","totalsegs","serial","add","doNewRequest","keepaliveTimeout","loadCB","doNodeLongPoll","newScript_1","onload","onreadystatechange","rstate","parentNode","TransportManager_1","Connection","onMessage_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","TransportManager","start_","conn","initialTransport","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeout_ms","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","version","h","sessionId","updateHost","onConnectionEstablished_","tryStartUpgrade_","upgradeTransport","startUpgrade_","closeConnections_","isCacheableHost","internalHost","EventEmitter","allowedEvents_","listeners_","trigger","listeners","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","VisibilityMonitor_1","OnlineMonitor_1","Connection_1","RECONNECT_MIN_DELAY","RECONNECT_MAX_DELAY_DEFAULT","authTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens_","outstandingPuts_","outstandingPutCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","visible_","requestCBHash_","requestNumber_","realtime_","authToken_","forceTokenRefresh_","invalidAuthTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","scheduleConnect_","VisibilityMonitor","onVisible_","OnlineMonitor","onOnline_","onResponse","curReqNum","queryIdentifier","getQueryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","queryObject","warnOnListenWarnings_","removeListen_","warnings","indexSpec","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","token_1","authMethod","requestData","noauth","authvar","res","onAuthRevoked_","sendUnlisten_","queryObj","sendOnDisconnect_","request","response","putInternal","sendPut_","queued","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","establishConnection_","visible","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage_1","onReady_1","connId_1","nextConnectionId_","self_1","lastSessionId_1","canceled_1","connection_1","closeFn_1","forceRefresh","accessToken","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","notifyForInvalidToken","queries","clientName","currentlyOnline","collection_","last_","newStats","CacheNode_1","ViewCache","eventCache_","serverCache_","updateEventSnap","eventSnap","complete","updateServerSnap","serverSnap","getEventCache","getCompleteEventSnap","getServerCache","getCompleteServerSnap","ViewCache_1","View_1","views_","applyOperation","operation","writesCache","optCompleteServerCache","view","events_1","serverCache","serverCacheComplete","eventCache","calcCompleteEventCache","eventCacheComplete","calcCompleteEventChildren","viewCache","View","getInitialEvents","cancelError","removed","cancelEvents","hadCompleteView","hasCompleteView","viewQueryId","getQuery","getQueryViews","getCompleteServerCache","viewForQuery","getCompleteView","viewExistsForQuery","Operation_1","Overwrite","operationForChild","item","clear","prefixPath","func","values","resolveDeferredValue","resolvedTree","rawPri","leafNode","childrenNode","PathIndex","indexPath_","extractChild","aChild","bChild","valueNode","SortedMap_2","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","childList","keyFn","mapSortFn","buildBalancedTree","low","high","middle","root","base12","buildPennant","chunkSize","attachPennant","pennant","isOne","_defaultIndexMap","fallbackObject","indexes_","indexSet_","indexKey","sortedMap","existingChildren","newIndex","sawIndexedValue","iter","indexName","newIndexSet","newIndexes","indexedChildren","existingSnap","ValueIndex","VALUE_INDEX","ValueIndex_1","PathIndex_1","EventRegistration_1","queryParams_","orderByCalled_","validateQueryEndpoints_","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit_","hasLimit","hasAnchoredLimit","validateNoPreviousOrderByCall_","cancelCallbackOrContext","ret","getCancelAndContextArgs_","onValueEvent","cancel","callbacks","onChildEvent","cancelCallback","container","ValueEventRegistration","ChildEventRegistration","valueCallback","once","userCallback","cancelOrContext","firstCall","onceCallback","err","limitToFirst","limit","limitToLast","orderByChild","parsedPath","newParams","orderBy","orderByKey","orderByPriority","orderByValue","startAt","endAt","equalTo","getQueryObject","isEqual","sameRepo","samePath","sameQueryIdentifier","repo_","RepoInfo","webSocketOnly","persistenceKey","needsQueryParam","isCustomHost","isDemoHost","newHost","ns","pairs","RepoInfo_1","dataURL","parseURL","subdomain","scheme","port","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","queryParams","queryString","results","startsWith","_a","segment","kv","parts","Reference_1","RepoManager_1","DatabaseInternals","checkDeleted_","refFromURL","apiName","parsedURL","goOffline","goOnline","ServerValue","TIMESTAMP",".sv","objTo","objFrom","rv","opt_obj","opt_this","JSON","parse","out","charCodeAt","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","input","opt_webSafe","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","encodeString","btoa","decodeString","bytes","pos","c1","fromCharCode","c2","u","c3","decodeStringToByteArray","charToByteMap","charAt","byte4","assertion","DataConnection","simpleListen","echo","onEcho","RealTimeConnection","hijackHash","newHash","oldPut","opt_onComplete","opt_hash","ConnectionTarget","listens","firebaseRef","WebSocketConnection_1","BrowserPollConnection_1","forceLongPolling","forceWebSockets","isWebSocketsAvailable","setSecurityDebugCallback","interceptServerData","TreeNode","childCount","Tree","parent_","subTree","pathObj","setValue","updateParents_","forEachDescendant","includeSelf","childrenFirst","forEachAncestor","forEachImmediateDescendantWithValue","updateChild_","childEmpty","childExists","TransactionStatus","DataSnapshot_1","Tree_1","RUN","SENT","COMPLETED","SENT_NEEDS_ABORT","NEEDS_ABORT","MAX_TRANSACTION_RETRIES_","transactionQueueTree_","watchRef","order","retryCount","unwatcher","abortReason","currentWriteId","currentInputSnapshot","currentOutputSnapshotRaw","currentOutputSnapshotResolved","currentState","getLatestState_","queueNode","nodeQueue","priorityForNode","sendReadyTransactions_","excludeSets","pruneCompletedTransactionsBelowNode_","queue","buildTransactionQueue_","sendTransactionQueue_","setsToIgnore","txn","latestState","snapToSend","latestHash","dataToSend","pathToSend","rootMostTransactionNode","getAncestorTransactionNode_","rerunTransactionQueue_","abortTransaction","currentNode","newData","newDataNode","oldWriteId","newNodeResolved","lastInput","transactionNode","transactionQueue","aggregateTransactionQueuesForNode_","to","from","abortTransactionsOnNode_","lastSent","RangedFilter_1","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","indexCompare_1","foundStartPost","changeAccumulator","indexCmp_1","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","getChildAfterChild","compareNext","newEventCache","LimitedFilter_1","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","WIRE_PROTOCOL_CONSTANTS_","VIEW_FROM_LEFT","copy_","newLimit","VIEW_FROM_RIGHT","WIRE_PROTOCOL_CONSTANTS","INDEX_START_VALUE","INDEX_START_NAME","INDEX_END_VALUE","INDEX_END_NAME","LIMIT","viewFrom","VIEW_FROM","INDEX","getNodeFilter","toRestQueryStringParameters","REST_CONSTANTS","REST_QUERY_CONSTANTS_","qs","ORDER_BY","START_AT","END_AT","LIMIT_TO_FIRST","LIMIT_TO_LAST","getListenId_","listenId","thisListen","queryStringParamaters","restRequest_","queryStringParameters","format","authTokenData","authToken","auth","xhr","XMLHttpRequest","responseText","cachedSetTimeout","cachedClearTimeout","module","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","Item","noop","nextTick","title","browser","argv","versions","addListener","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","pendingResponses","currentResponseNum","closeAfterResponse","onClose","responseNum","requestNum","_loop_1","toProcess","this_1","_loop_2","initTransports_","isSkipPollConnection","transports_","transports_1","ALL_TRANSPORTS","transport","EventEmitter_1","online_","hidden","visibilityChange","mozHidden","msHidden","webkitHidden","eventLists_","recursionDepth_","eventDataList","currList","eventPath","getPath","EventList","raiseQueuedEventsMatchingPredicate_","sentAll","eventList","raise","events_","eventFn","getEventRunner","FIRST_STATS_MIN_TIME","FIRST_STATS_MAX_TIME","collection","statsToReport_","reportStats_","reportedStats","haveStatsToReport","counters_","amount","app_","removeTokenChangeListener","errorMessage","rootNode_","newSnapshotNode","ImmutableTree_1","CompoundWrite","writeTree_","addWrite","rootmost","rootMostPath","addWrites","newWrite","removeWrite","hasCompleteWrite","getCompleteNode","getCompleteChildren","childCompoundWrite","shadowingNode","applySubtreeWrite_","writeTree","priorityWrite_1","CompoundWrite_1","WriteTree","visibleWrites_","allWrites_","lastWriteId_","childWrites","WriteTreeRef","addOverwrite","addMerge","getWrite","record","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","recordContainsPath_","resetTree_","getCompleteWriteData","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","mergeAtPath","layerTree_","layeredCache","subMerge","completeServerChildren","completeChildren","topLevelSet","merge_1","calcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","calcCompleteChild","shadowingWrite","calcIndexedSlice","completeServerData","toIterate","nodes","writeRecord","DefaultFilter_","writes","treeRoot","compoundWrite","writePath","deepNode","treePath_","existingServerCache","EventGenerator","query_","generateEventsForChanges","changes","eventRegistrations","moves","change","generateEventsForType_","registrations","filteredChanges","compareChanges_","materializedChange","materializeSingleChange_","registration","respondsTo","createEvent","aWrapped","bWrapped","NoCompleteChildSource_","getCompleteChild","NO_COMPLETE_CHILD_SOURCE","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","ChildChangeAccumulator","changeMap_","oldChange","oldType","getChanges","ChildChangeAccumulator_1","CompleteChildSource_1","ProcessorResult","ViewProcessor","filter_","assertIndexed","oldViewCache","completeCache","newViewCache","filterServerNode","accumulator","overwrite","applyUserOverwrite_","applyServerOverwrite_","applyUserMerge_","applyServerMerge_","revert","revertUserWrite_","ackUserWrite_","affectedTree","listenComplete_","maybeAddValueEvent_","isLeafOrEmpty","oldCompleteSnap","generateEventCacheAfterServerEvent_","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","newServerCache","oldServerSnap","serverFilter","newServerNode","newEventSnap","cacheHasChild_","curViewCache","applyMerge_","viewMergeTree","serverChild","childMergeTree","isUnknownDeepMerge","ackPath","changedChildren_1","changedChildren_2","mergePath","serverCachePath","oldServerNode","serverChildren","ViewProcessor_1","EventGenerator_1","initialViewCache","eventRegistrations_","indexFilter","processor_","initialServerCache","initialEventCache","eventGenerator_","cache","path_1","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","generateEventsForChanges_","initialChanges","Overwrite_1","Merge","ListenComplete","AckUserWrite","AckUserWrite_1","ListenComplete_1","Merge_1","WriteTree_1","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap_","queryToTagMap_","applyOperationToSyncPoints_","changeTree","affectedTree_1","applyListenComplete","queryKey","queryKeyForTag_","parseQueryKey_","queryPath","applyTaggedOperation_","applyTaggedListenComplete","foundAncestorDefaultView","pathToSyncPoint","sp","syncPoint","childSyncPoint","viewAlreadyExists","makeQueryKey_","getNextQueryTag_","setupListener_","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","collectDistinctViewsForSubTree_","newQuery","createListenerForView_","queryForListening_","tagForQuery_","queryToRemove","tagToRemove","removeTags_","maybeChildSyncPoint","childMap","views_1","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","queries_1","childQueries","queryToStop","splitIndex","nextQueryTag_","applyOperationHelper_","syncPointTree","applyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","DataEvent","getEventType","CancelEvent","Event_1","callback_","cancelCallback_","context_","ctx","cancelCB_1","cb_1","callbacks_","eventToCheck","cancelCB_2","cb_2","otherCount","otherKey","thisKey","cb","PUSH_CHARS","lastPushTime","lastRandChars","duplicateTime","timeStampChars","cache_","domStorage_","prefix_","prefixedName_","storedVal","getItem","TEST_ACCESS","registerDatabase","instance","unused","argName","minCount","maxCount","argCount","argError","executor","onNoObservers","ObserverProxy","subscribe","observers","unsubscribes","observerCount","task","finalized","forEachObserver","observer","nextOrObserver","methods","methods_1","method","unsub","unsubscribeOne","finalError","sendOne","onError","Hash","blockSize","chain_","buf_","W_","pad_","inbuf_","total_","reset","compress_","buf","opt_offset","W","opt_length","lengthMinusBlock","inbuf","totalBits","querystringParams","arrayVal","header","claims","signature","validSince","validUntil","nbf","iat","exp","decoded","admin","ERROR_NAME","captureStackTrace","captureFake","err_1","errors","pattern","template","fullCode","prop","cordova","phonegap","PhoneGap","product"],"mappings":"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","file":"0.bundle.js","sourcesContent":["\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = require(\"./src/assert\");\nexports.assert = assert_1.assert;\nexports.assertionError = assert_1.assertionError;\nvar crypt_1 = require(\"./src/crypt\");\nexports.base64 = crypt_1.base64;\nexports.base64Decode = crypt_1.base64Decode;\nexports.base64Encode = crypt_1.base64Encode;\nvar constants_1 = require(\"./src/constants\");\nexports.CONSTANTS = constants_1.CONSTANTS;\nvar deepCopy_1 = require(\"./src/deepCopy\");\nexports.deepCopy = deepCopy_1.deepCopy;\nexports.deepExtend = deepCopy_1.deepExtend;\nexports.patchProperty = deepCopy_1.patchProperty;\nvar deferred_1 = require(\"./src/deferred\");\nexports.Deferred = deferred_1.Deferred;\nvar environment_1 = require(\"./src/environment\");\nexports.getUA = environment_1.getUA;\nexports.isMobileCordova = environment_1.isMobileCordova;\nexports.isNodeSdk = environment_1.isNodeSdk;\nexports.isReactNative = environment_1.isReactNative;\nvar errors_1 = require(\"./src/errors\");\nexports.ErrorFactory = errors_1.ErrorFactory;\nexports.FirebaseError = errors_1.FirebaseError;\nexports.patchCapture = errors_1.patchCapture;\nvar json_1 = require(\"./src/json\");\nexports.jsonEval = json_1.jsonEval;\nexports.stringify = json_1.stringify;\nvar jwt_1 = require(\"./src/jwt\");\nexports.decode = jwt_1.decode;\nexports.isAdmin = jwt_1.isAdmin;\nexports.issuedAtTime = jwt_1.issuedAtTime;\nexports.isValidFormat = jwt_1.isValidFormat;\nexports.isValidTimestamp = jwt_1.isValidTimestamp;\nvar obj_1 = require(\"./src/obj\");\nexports.clone = obj_1.clone;\nexports.contains = obj_1.contains;\nexports.every = obj_1.every;\nexports.extend = obj_1.extend;\nexports.findKey = obj_1.findKey;\nexports.findValue = obj_1.findValue;\nexports.forEach = obj_1.forEach;\nexports.getAnyKey = obj_1.getAnyKey;\nexports.getCount = obj_1.getCount;\nexports.getValues = obj_1.getValues;\nexports.isEmpty = obj_1.isEmpty;\nexports.isNonNullObject = obj_1.isNonNullObject;\nexports.map = obj_1.map;\nexports.safeGet = obj_1.safeGet;\nvar query_1 = require(\"./src/query\");\nexports.querystring = query_1.querystring;\nexports.querystringDecode = query_1.querystringDecode;\nvar sha1_1 = require(\"./src/sha1\");\nexports.Sha1 = sha1_1.Sha1;\nvar subscribe_1 = require(\"./src/subscribe\");\nexports.async = subscribe_1.async;\nexports.createSubscribe = subscribe_1.createSubscribe;\nvar validation_1 = require(\"./src/validation\");\nexports.errorPrefix = validation_1.errorPrefix;\nexports.validateArgCount = validation_1.validateArgCount;\nexports.validateCallback = validation_1.validateCallback;\nexports.validateContextObject = validation_1.validateContextObject;\nexports.validateNamespace = validation_1.validateNamespace;\nvar utf8_1 = require(\"./src/utf8\");\nexports.stringLength = utf8_1.stringLength;\nexports.stringToByteArray = utf8_1.stringToByteArray;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar util_3 = require(\"@firebase/util\");\nvar util_4 = require(\"@firebase/util\");\nvar util_5 = require(\"@firebase/util\");\nvar util_6 = require(\"@firebase/util\");\nvar storage_1 = require(\"../storage/storage\");\nvar util_7 = require(\"@firebase/util\");\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n * @type {function(): number} Generated ID.\n */\nexports.LUIDGenerator = (function () {\n    var id = 1;\n    return function () {\n        return id++;\n    };\n})();\n/**\n * Sha1 hash of the input string\n * @param {!string} str The string to hash\n * @return {!string} The resulting hash\n */\nexports.sha1 = function (str) {\n    var utf8Bytes = util_5.stringToByteArray(str);\n    var sha1 = new util_4.Sha1();\n    sha1.update(utf8Bytes);\n    var sha1Bytes = sha1.digest();\n    return util_3.base64.encodeByteArray(sha1Bytes);\n};\n/**\n * @param {...*} var_args\n * @return {string}\n * @private\n */\nvar buildLogMessage_ = function () {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    var message = '';\n    for (var i = 0; i < var_args.length; i++) {\n        if (Array.isArray(var_args[i]) ||\n            (var_args[i] &&\n                typeof var_args[i] === 'object' &&\n                typeof var_args[i].length === 'number')) {\n            message += buildLogMessage_.apply(null, var_args[i]);\n        }\n        else if (typeof var_args[i] === 'object') {\n            message += util_6.stringify(var_args[i]);\n        }\n        else {\n            message += var_args[i];\n        }\n        message += ' ';\n    }\n    return message;\n};\n/**\n * Use this for all debug messages in Firebase.\n * @type {?function(string)}\n */\nexports.logger = null;\n/**\n * Flag to check for log availability on first log message\n * @type {boolean}\n * @private\n */\nvar firstLog_ = true;\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param {boolean|?function(string)} logger_ A flag to turn on logging, or a custom logger\n * @param {boolean=} persistent Whether or not to persist logging settings across refreshes\n */\nexports.enableLogging = function (logger_, persistent) {\n    util_1.assert(!persistent || (logger_ === true || logger_ === false), \"Can't turn on custom loggers persistently.\");\n    if (logger_ === true) {\n        if (typeof console !== 'undefined') {\n            if (typeof console.log === 'function') {\n                exports.logger = console.log.bind(console);\n            }\n            else if (typeof console.log === 'object') {\n                // IE does this.\n                exports.logger = function (message) {\n                    console.log(message);\n                };\n            }\n        }\n        if (persistent)\n            storage_1.SessionStorage.set('logging_enabled', true);\n    }\n    else if (typeof logger_ === 'function') {\n        exports.logger = logger_;\n    }\n    else {\n        exports.logger = null;\n        storage_1.SessionStorage.remove('logging_enabled');\n    }\n};\n/**\n *\n * @param {...(string|Arguments)} var_args\n */\nexports.log = function () {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    if (firstLog_ === true) {\n        firstLog_ = false;\n        if (exports.logger === null && storage_1.SessionStorage.get('logging_enabled') === true)\n            exports.enableLogging(true);\n    }\n    if (exports.logger) {\n        var message = buildLogMessage_.apply(null, var_args);\n        exports.logger(message);\n    }\n};\n/**\n * @param {!string} prefix\n * @return {function(...[*])}\n */\nexports.logWrapper = function (prefix) {\n    return function () {\n        var var_args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            var_args[_i] = arguments[_i];\n        }\n        exports.log.apply(void 0, [prefix].concat(var_args));\n    };\n};\n/**\n * @param {...string} var_args\n */\nexports.error = function () {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    if (typeof console !== 'undefined') {\n        var message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_.apply(void 0, var_args);\n        if (typeof console.error !== 'undefined') {\n            console.error(message);\n        }\n        else {\n            console.log(message);\n        }\n    }\n};\n/**\n * @param {...string} var_args\n */\nexports.fatal = function () {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    var message = buildLogMessage_.apply(void 0, var_args);\n    throw new Error('FIREBASE FATAL ERROR: ' + message);\n};\n/**\n * @param {...*} var_args\n */\nexports.warn = function () {\n    var var_args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        var_args[_i] = arguments[_i];\n    }\n    if (typeof console !== 'undefined') {\n        var message = 'FIREBASE WARNING: ' + buildLogMessage_.apply(void 0, var_args);\n        if (typeof console.warn !== 'undefined') {\n            console.warn(message);\n        }\n        else {\n            console.log(message);\n        }\n    }\n};\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexports.warnIfPageIsSecure = function () {\n    // Be very careful accessing browser globals. Who knows what may or may not exist.\n    if (typeof window !== 'undefined' &&\n        window.location &&\n        window.location.protocol &&\n        window.location.protocol.indexOf('https:') !== -1) {\n        exports.warn('Insecure Firebase access from a secure page. ' +\n            'Please use https in calls to new Firebase().');\n    }\n};\n/**\n * @param {!String} methodName\n */\nexports.warnAboutUnsupportedMethod = function (methodName) {\n    exports.warn(methodName +\n        ' is unsupported and will likely change soon.  ' +\n        'Please do not use.');\n};\n/**\n * Returns true if data is NaN, or +/- Infinity.\n * @param {*} data\n * @return {boolean}\n */\nexports.isInvalidJSONNumber = function (data) {\n    return (typeof data === 'number' &&\n        (data != data || // NaN\n            data == Number.POSITIVE_INFINITY ||\n            data == Number.NEGATIVE_INFINITY));\n};\n/**\n * @param {function()} fn\n */\nexports.executeWhenDOMReady = function (fn) {\n    if (util_7.isNodeSdk() || document.readyState === 'complete') {\n        fn();\n    }\n    else {\n        // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n        // fire before onload), but fall back to onload.\n        var called_1 = false;\n        var wrappedFn_1 = function () {\n            if (!document.body) {\n                setTimeout(wrappedFn_1, Math.floor(10));\n                return;\n            }\n            if (!called_1) {\n                called_1 = true;\n                fn();\n            }\n        };\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', wrappedFn_1, false);\n            // fallback to onload.\n            window.addEventListener('load', wrappedFn_1, false);\n        }\n        else if (document.attachEvent) {\n            // IE.\n            document.attachEvent('onreadystatechange', function () {\n                if (document.readyState === 'complete')\n                    wrappedFn_1();\n            });\n            // fallback to onload.\n            window.attachEvent('onload', wrappedFn_1);\n            // jQuery has an extra hack for IE that we could employ (based on\n            // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n            // I'm hoping we don't need it.\n        }\n    }\n};\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n * @type {!string}\n */\nexports.MIN_NAME = '[MIN_NAME]';\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n * @type {!string}\n */\nexports.MAX_NAME = '[MAX_NAME]';\n/**\n * Compares valid Firebase key names, plus min and max name\n * @param {!string} a\n * @param {!string} b\n * @return {!number}\n */\nexports.nameCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a === exports.MIN_NAME || b === exports.MAX_NAME) {\n        return -1;\n    }\n    else if (b === exports.MIN_NAME || a === exports.MAX_NAME) {\n        return 1;\n    }\n    else {\n        var aAsInt = exports.tryParseInt(a), bAsInt = exports.tryParseInt(b);\n        if (aAsInt !== null) {\n            if (bAsInt !== null) {\n                return aAsInt - bAsInt == 0 ? a.length - b.length : aAsInt - bAsInt;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (bAsInt !== null) {\n            return 1;\n        }\n        else {\n            return a < b ? -1 : 1;\n        }\n    }\n};\n/**\n * @param {!string} a\n * @param {!string} b\n * @return {!number} comparison result.\n */\nexports.stringCompare = function (a, b) {\n    if (a === b) {\n        return 0;\n    }\n    else if (a < b) {\n        return -1;\n    }\n    else {\n        return 1;\n    }\n};\n/**\n * @param {string} key\n * @param {Object} obj\n * @return {*}\n */\nexports.requireKey = function (key, obj) {\n    if (obj && key in obj) {\n        return obj[key];\n    }\n    else {\n        throw new Error('Missing required key (' + key + ') in object: ' + util_6.stringify(obj));\n    }\n};\n/**\n * @param {*} obj\n * @return {string}\n */\nexports.ObjectToUniqueKey = function (obj) {\n    if (typeof obj !== 'object' || obj === null)\n        return util_6.stringify(obj);\n    var keys = [];\n    for (var k in obj) {\n        keys.push(k);\n    }\n    // Export as json, but with the keys sorted.\n    keys.sort();\n    var key = '{';\n    for (var i = 0; i < keys.length; i++) {\n        if (i !== 0)\n            key += ',';\n        key += util_6.stringify(keys[i]);\n        key += ':';\n        key += exports.ObjectToUniqueKey(obj[keys[i]]);\n    }\n    key += '}';\n    return key;\n};\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param {!string} str The string\n * @param {!number} segsize The maximum number of chars in the string.\n * @return {Array.<string>} The string, split into appropriately-sized chunks\n */\nexports.splitStringBySize = function (str, segsize) {\n    var len = str.length;\n    if (len <= segsize) {\n        return [str];\n    }\n    var dataSegs = [];\n    for (var c = 0; c < len; c += segsize) {\n        if (c + segsize > len) {\n            dataSegs.push(str.substring(c, len));\n        }\n        else {\n            dataSegs.push(str.substring(c, c + segsize));\n        }\n    }\n    return dataSegs;\n};\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param {!(Object|Array)} obj The object or array to iterate over\n * @param {function(?, ?)} fn The function to apply\n */\nexports.each = function (obj, fn) {\n    if (Array.isArray(obj)) {\n        for (var i = 0; i < obj.length; ++i) {\n            fn(i, obj[i]);\n        }\n    }\n    else {\n        /**\n         * in the conversion of code we removed the goog.object.forEach\n         * function which did a value,key callback. We standardized on\n         * a single impl that does a key, value callback. So we invert\n         * to not have to touch the `each` code points\n         */\n        util_2.forEach(obj, function (key, val) { return fn(val, key); });\n    }\n};\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param {function(*)} callback Callback function.\n * @param {?Object=} context Optional context to bind to.\n * @return {function(*)}\n */\nexports.bindCallback = function (callback, context) {\n    return context ? callback.bind(context) : callback;\n};\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param {!number} v A double\n * @return {string}\n */\nexports.doubleToIEEE754String = function (v) {\n    util_1.assert(!exports.isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n    var ebits = 11, fbits = 52;\n    var bias = (1 << (ebits - 1)) - 1, s, e, f, ln, i, bits, str;\n    // Compute sign, exponent, fraction\n    // Skip NaN / Infinity handling --MJL.\n    if (v === 0) {\n        e = 0;\n        f = 0;\n        s = 1 / v === -Infinity ? 1 : 0;\n    }\n    else {\n        s = v < 0;\n        v = Math.abs(v);\n        if (v >= Math.pow(2, 1 - bias)) {\n            // Normalized\n            ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n            e = ln + bias;\n            f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n        }\n        else {\n            // Denormalized\n            e = 0;\n            f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n        }\n    }\n    // Pack sign, exponent, fraction\n    bits = [];\n    for (i = fbits; i; i -= 1) {\n        bits.push(f % 2 ? 1 : 0);\n        f = Math.floor(f / 2);\n    }\n    for (i = ebits; i; i -= 1) {\n        bits.push(e % 2 ? 1 : 0);\n        e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    str = bits.join('');\n    // Return the data as a hex string. --MJL\n    var hexByteString = '';\n    for (i = 0; i < 64; i += 8) {\n        var hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n        if (hexByte.length === 1)\n            hexByte = '0' + hexByte;\n        hexByteString = hexByteString + hexByte;\n    }\n    return hexByteString.toLowerCase();\n};\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n * @return {boolean}\n */\nexports.isChromeExtensionContentScript = function () {\n    return !!(typeof window === 'object' &&\n        window['chrome'] &&\n        window['chrome']['extension'] &&\n        !/^chrome/.test(window.location.href));\n};\n/**\n * Used to detect if we're in a Windows 8 Store app.\n * @return {boolean}\n */\nexports.isWindowsStoreApp = function () {\n    // Check for the presence of a couple WinRT globals\n    return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n/**\n * Converts a server error code to a Javascript Error\n * @param {!string} code\n * @param {!Query} query\n * @return {Error}\n */\nexports.errorForServerCode = function (code, query) {\n    var reason = 'Unknown Error';\n    if (code === 'too_big') {\n        reason =\n            'The data requested exceeds the maximum size ' +\n                'that can be accessed with a single request.';\n    }\n    else if (code == 'permission_denied') {\n        reason = \"Client doesn't have permission to access the desired data.\";\n    }\n    else if (code == 'unavailable') {\n        reason = 'The service is unavailable';\n    }\n    var error = new Error(code + ' at ' + query.path.toString() + ': ' + reason);\n    error.code = code.toUpperCase();\n    return error;\n};\n/**\n * Used to test for integer-looking strings\n * @type {RegExp}\n * @private\n */\nexports.INTEGER_REGEXP_ = new RegExp('^-?\\\\d{1,10}$');\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n * @param {!string} str\n * @return {?number}\n */\nexports.tryParseInt = function (str) {\n    if (exports.INTEGER_REGEXP_.test(str)) {\n        var intVal = Number(str);\n        if (intVal >= -2147483648 && intVal <= 2147483647) {\n            return intVal;\n        }\n    }\n    return null;\n};\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param {!function()} fn The code to guard.\n */\nexports.exceptionGuard = function (fn) {\n    try {\n        fn();\n    }\n    catch (e) {\n        // Re-throw exception when it's safe.\n        setTimeout(function () {\n            // It used to be that \"throw e\" would result in a good console error with\n            // relevant context, but as of Chrome 39, you just get the firebase.js\n            // file/line number where we re-throw it, which is useless. So we log\n            // e.stack explicitly.\n            var stack = e.stack || '';\n            exports.warn('Exception was thrown by user callback.', stack);\n            throw e;\n        }, Math.floor(0));\n    }\n};\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param {?Function=} callback Optional onComplete callback.\n * @param {...*} var_args Arbitrary args to be passed to opt_onComplete\n */\nexports.callUserCallback = function (callback) {\n    var var_args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        var_args[_i - 1] = arguments[_i];\n    }\n    if (typeof callback === 'function') {\n        exports.exceptionGuard(function () {\n            callback.apply(void 0, var_args);\n        });\n    }\n};\n/**\n * @return {boolean} true if we think we're currently being crawled.\n */\nexports.beingCrawled = function () {\n    var userAgent = (typeof window === 'object' &&\n        window['navigator'] &&\n        window['navigator']['userAgent']) ||\n        '';\n    // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n    // believe to support JavaScript/AJAX rendering.\n    // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n    // would have seen the page\" is flaky if we don't treat it as a crawler.\n    return (userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0);\n};\n/**\n * Export a property of an object using a getter function.\n *\n * @param {!Object} object\n * @param {string} name\n * @param {!function(): *} fnGet\n */\nexports.exportPropGetter = function (object, name, fnGet) {\n    Object.defineProperty(object, name, { get: fnGet });\n};\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param {Function} fn Function to run.\n * @param {number} time Milliseconds to wait before running.\n * @return {number|Object} The setTimeout() return value.\n */\nexports.setTimeoutNonBlocking = function (fn, time) {\n    var timeout = setTimeout(fn, time);\n    if (typeof timeout === 'object' && timeout['unref']) {\n        timeout['unref']();\n    }\n    return timeout;\n};\n\n//# sourceMappingURL=util.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"./util\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\nvar Path = /** @class */ (function () {\n    /**\n     * @param {string|Array.<string>} pathOrString Path string to parse,\n     *      or another path, or the raw tokens array\n     * @param {number=} pieceNum\n     */\n    function Path(pathOrString, pieceNum) {\n        if (pieceNum === void 0) {\n            this.pieces_ = pathOrString.split('/');\n            // Remove empty pieces.\n            var copyTo = 0;\n            for (var i = 0; i < this.pieces_.length; i++) {\n                if (this.pieces_[i].length > 0) {\n                    this.pieces_[copyTo] = this.pieces_[i];\n                    copyTo++;\n                }\n            }\n            this.pieces_.length = copyTo;\n            this.pieceNum_ = 0;\n        }\n        else {\n            this.pieces_ = pathOrString;\n            this.pieceNum_ = pieceNum;\n        }\n    }\n    Object.defineProperty(Path, \"Empty\", {\n        /**\n         * Singleton to represent an empty path\n         *\n         * @const\n         */\n        get: function () {\n            return new Path('');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Path.prototype.getFront = function () {\n        if (this.pieceNum_ >= this.pieces_.length)\n            return null;\n        return this.pieces_[this.pieceNum_];\n    };\n    /**\n     * @return {number} The number of segments in this path\n     */\n    Path.prototype.getLength = function () {\n        return this.pieces_.length - this.pieceNum_;\n    };\n    /**\n     * @return {!Path}\n     */\n    Path.prototype.popFront = function () {\n        var pieceNum = this.pieceNum_;\n        if (pieceNum < this.pieces_.length) {\n            pieceNum++;\n        }\n        return new Path(this.pieces_, pieceNum);\n    };\n    /**\n     * @return {?string}\n     */\n    Path.prototype.getBack = function () {\n        if (this.pieceNum_ < this.pieces_.length)\n            return this.pieces_[this.pieces_.length - 1];\n        return null;\n    };\n    Path.prototype.toString = function () {\n        var pathString = '';\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '')\n                pathString += '/' + this.pieces_[i];\n        }\n        return pathString || '/';\n    };\n    Path.prototype.toUrlEncodedString = function () {\n        var pathString = '';\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++) {\n            if (this.pieces_[i] !== '')\n                pathString += '/' + encodeURIComponent(String(this.pieces_[i]));\n        }\n        return pathString || '/';\n    };\n    /**\n     * Shallow copy of the parts of the path.\n     *\n     * @param {number=} begin\n     * @return {!Array<string>}\n     */\n    Path.prototype.slice = function (begin) {\n        if (begin === void 0) { begin = 0; }\n        return this.pieces_.slice(this.pieceNum_ + begin);\n    };\n    /**\n     * @return {?Path}\n     */\n    Path.prototype.parent = function () {\n        if (this.pieceNum_ >= this.pieces_.length)\n            return null;\n        var pieces = [];\n        for (var i = this.pieceNum_; i < this.pieces_.length - 1; i++)\n            pieces.push(this.pieces_[i]);\n        return new Path(pieces, 0);\n    };\n    /**\n     * @param {string|!Path} childPathObj\n     * @return {!Path}\n     */\n    Path.prototype.child = function (childPathObj) {\n        var pieces = [];\n        for (var i = this.pieceNum_; i < this.pieces_.length; i++)\n            pieces.push(this.pieces_[i]);\n        if (childPathObj instanceof Path) {\n            for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n                pieces.push(childPathObj.pieces_[i]);\n            }\n        }\n        else {\n            var childPieces = childPathObj.split('/');\n            for (var i = 0; i < childPieces.length; i++) {\n                if (childPieces[i].length > 0)\n                    pieces.push(childPieces[i]);\n            }\n        }\n        return new Path(pieces, 0);\n    };\n    /**\n     * @return {boolean} True if there are no segments in this path\n     */\n    Path.prototype.isEmpty = function () {\n        return this.pieceNum_ >= this.pieces_.length;\n    };\n    /**\n     * @param {!Path} outerPath\n     * @param {!Path} innerPath\n     * @return {!Path} The path from outerPath to innerPath\n     */\n    Path.relativePath = function (outerPath, innerPath) {\n        var outer = outerPath.getFront(), inner = innerPath.getFront();\n        if (outer === null) {\n            return innerPath;\n        }\n        else if (outer === inner) {\n            return Path.relativePath(outerPath.popFront(), innerPath.popFront());\n        }\n        else {\n            throw new Error('INTERNAL ERROR: innerPath (' +\n                innerPath +\n                ') is not within ' +\n                'outerPath (' +\n                outerPath +\n                ')');\n        }\n    };\n    /**\n     * @param {!Path} left\n     * @param {!Path} right\n     * @return {number} -1, 0, 1 if left is less, equal, or greater than the right.\n     */\n    Path.comparePaths = function (left, right) {\n        var leftKeys = left.slice();\n        var rightKeys = right.slice();\n        for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n            var cmp = util_1.nameCompare(leftKeys[i], rightKeys[i]);\n            if (cmp !== 0)\n                return cmp;\n        }\n        if (leftKeys.length === rightKeys.length)\n            return 0;\n        return leftKeys.length < rightKeys.length ? -1 : 1;\n    };\n    /**\n     *\n     * @param {Path} other\n     * @return {boolean} true if paths are the same.\n     */\n    Path.prototype.equals = function (other) {\n        if (this.getLength() !== other.getLength()) {\n            return false;\n        }\n        for (var i = this.pieceNum_, j = other.pieceNum_; i <= this.pieces_.length; i++, j++) {\n            if (this.pieces_[i] !== other.pieces_[j]) {\n                return false;\n            }\n        }\n        return true;\n    };\n    /**\n     *\n     * @param {!Path} other\n     * @return {boolean} True if this path is a parent (or the same as) other\n     */\n    Path.prototype.contains = function (other) {\n        var i = this.pieceNum_;\n        var j = other.pieceNum_;\n        if (this.getLength() > other.getLength()) {\n            return false;\n        }\n        while (i < this.pieces_.length) {\n            if (this.pieces_[i] !== other.pieces_[j]) {\n                return false;\n            }\n            ++i;\n            ++j;\n        }\n        return true;\n    };\n    return Path;\n}()); // end Path\nexports.Path = Path;\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nvar ValidationPath = /** @class */ (function () {\n    /**\n     * @param {!Path} path Initial Path.\n     * @param {string} errorPrefix_ Prefix for any error messages.\n     */\n    function ValidationPath(path, errorPrefix_) {\n        this.errorPrefix_ = errorPrefix_;\n        /** @type {!Array<string>} */\n        this.parts_ = path.slice();\n        /** @type {number} Initialize to number of '/' chars needed in path. */\n        this.byteLength_ = Math.max(1, this.parts_.length);\n        for (var i = 0; i < this.parts_.length; i++) {\n            this.byteLength_ += util_2.stringLength(this.parts_[i]);\n        }\n        this.checkValid_();\n    }\n    Object.defineProperty(ValidationPath, \"MAX_PATH_DEPTH\", {\n        /** @const {number} Maximum key depth. */\n        get: function () {\n            return 32;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ValidationPath, \"MAX_PATH_LENGTH_BYTES\", {\n        /** @const {number} Maximum number of (UTF8) bytes in a Firebase path. */\n        get: function () {\n            return 768;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @param {string} child */\n    ValidationPath.prototype.push = function (child) {\n        // Count the needed '/'\n        if (this.parts_.length > 0) {\n            this.byteLength_ += 1;\n        }\n        this.parts_.push(child);\n        this.byteLength_ += util_2.stringLength(child);\n        this.checkValid_();\n    };\n    ValidationPath.prototype.pop = function () {\n        var last = this.parts_.pop();\n        this.byteLength_ -= util_2.stringLength(last);\n        // Un-count the previous '/'\n        if (this.parts_.length > 0) {\n            this.byteLength_ -= 1;\n        }\n    };\n    ValidationPath.prototype.checkValid_ = function () {\n        if (this.byteLength_ > ValidationPath.MAX_PATH_LENGTH_BYTES) {\n            throw new Error(this.errorPrefix_ +\n                'has a key path longer than ' +\n                ValidationPath.MAX_PATH_LENGTH_BYTES +\n                ' bytes (' +\n                this.byteLength_ +\n                ').');\n        }\n        if (this.parts_.length > ValidationPath.MAX_PATH_DEPTH) {\n            throw new Error(this.errorPrefix_ +\n                'path specified exceeds the maximum depth that can be written (' +\n                ValidationPath.MAX_PATH_DEPTH +\n                ') or object contains a cycle ' +\n                this.toErrorString());\n        }\n    };\n    /**\n     * String for use in error messages - uses '.' notation for path.\n     *\n     * @return {string}\n     */\n    ValidationPath.prototype.toErrorString = function () {\n        if (this.parts_.length == 0) {\n            return '';\n        }\n        return \"in property '\" + this.parts_.join('.') + \"'\";\n    };\n    return ValidationPath;\n}());\nexports.ValidationPath = ValidationPath;\n\n//# sourceMappingURL=Path.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Index_1 = require(\"./Index\");\nvar util_1 = require(\"../../util/util\");\nvar Node_1 = require(\"../Node\");\nvar LeafNode_1 = require(\"../LeafNode\");\nvar nodeFromJSON;\nvar MAX_NODE;\nfunction setNodeFromJSON(val) {\n    nodeFromJSON = val;\n}\nexports.setNodeFromJSON = setNodeFromJSON;\nfunction setMaxNode(val) {\n    MAX_NODE = val;\n}\nexports.setMaxNode = setMaxNode;\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nvar PriorityIndex = /** @class */ (function (_super) {\n    tslib_1.__extends(PriorityIndex, _super);\n    function PriorityIndex() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @inheritDoc\n     */\n    PriorityIndex.prototype.compare = function (a, b) {\n        var aPriority = a.node.getPriority();\n        var bPriority = b.node.getPriority();\n        var indexCmp = aPriority.compareTo(bPriority);\n        if (indexCmp === 0) {\n            return util_1.nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    PriorityIndex.prototype.isDefinedOn = function (node) {\n        return !node.getPriority().isEmpty();\n    };\n    /**\n     * @inheritDoc\n     */\n    PriorityIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n        return !oldNode.getPriority().equals(newNode.getPriority());\n    };\n    /**\n     * @inheritDoc\n     */\n    PriorityIndex.prototype.minPost = function () {\n        return Node_1.NamedNode.MIN;\n    };\n    /**\n     * @inheritDoc\n     */\n    PriorityIndex.prototype.maxPost = function () {\n        return new Node_1.NamedNode(util_1.MAX_NAME, new LeafNode_1.LeafNode('[PRIORITY-POST]', MAX_NODE));\n    };\n    /**\n     * @param {*} indexValue\n     * @param {string} name\n     * @return {!NamedNode}\n     */\n    PriorityIndex.prototype.makePost = function (indexValue, name) {\n        var priorityNode = nodeFromJSON(indexValue);\n        return new Node_1.NamedNode(name, new LeafNode_1.LeafNode('[PRIORITY-POST]', priorityNode));\n    };\n    /**\n     * @return {!string} String representation for inclusion in a query spec\n     */\n    PriorityIndex.prototype.toString = function () {\n        return '.priority';\n    };\n    return PriorityIndex;\n}(Index_1.Index));\nexports.PriorityIndex = PriorityIndex;\nexports.PRIORITY_INDEX = new PriorityIndex();\n\n//# sourceMappingURL=PriorityIndex.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar SortedMap_1 = require(\"../util/SortedMap\");\nvar Node_1 = require(\"./Node\");\nvar snap_1 = require(\"./snap\");\nvar PriorityIndex_1 = require(\"./indexes/PriorityIndex\");\nvar KeyIndex_1 = require(\"./indexes/KeyIndex\");\nvar IndexMap_1 = require(\"./IndexMap\");\nvar LeafNode_1 = require(\"./LeafNode\");\nvar comparators_1 = require(\"./comparators\");\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\nvar EMPTY_NODE;\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n *\n * @constructor\n * @implements {Node}\n */\nvar ChildrenNode = /** @class */ (function () {\n    /**\n     *\n     * @param {!SortedMap.<string, !Node>} children_ List of children\n     * of this node..\n     * @param {?Node} priorityNode_ The priority of this node (as a snapshot node).\n     * @param {!IndexMap} indexMap_\n     */\n    function ChildrenNode(children_, priorityNode_, indexMap_) {\n        this.children_ = children_;\n        this.priorityNode_ = priorityNode_;\n        this.indexMap_ = indexMap_;\n        this.lazyHash_ = null;\n        /**\n         * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n         * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n         * class instead of an empty ChildrenNode.\n         */\n        if (this.priorityNode_) {\n            snap_1.validatePriorityNode(this.priorityNode_);\n        }\n        if (this.children_.isEmpty()) {\n            util_1.assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), 'An empty node cannot have a priority');\n        }\n    }\n    Object.defineProperty(ChildrenNode, \"EMPTY_NODE\", {\n        get: function () {\n            return (EMPTY_NODE ||\n                (EMPTY_NODE = new ChildrenNode(new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), null, IndexMap_1.IndexMap.Default)));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @inheritDoc */\n    ChildrenNode.prototype.isLeafNode = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getPriority = function () {\n        return this.priorityNode_ || EMPTY_NODE;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updatePriority = function (newPriorityNode) {\n        if (this.children_.isEmpty()) {\n            // Don't allow priorities on empty nodes\n            return this;\n        }\n        else {\n            return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getImmediateChild = function (childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.getPriority();\n        }\n        else {\n            var child = this.children_.get(childName);\n            return child === null ? EMPTY_NODE : child;\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getChild = function (path) {\n        var front = path.getFront();\n        if (front === null)\n            return this;\n        return this.getImmediateChild(front).getChild(path.popFront());\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.hasChild = function (childName) {\n        return this.children_.get(childName) !== null;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n        util_1.assert(newChildNode, 'We should always be passing snapshot nodes');\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else {\n            var namedNode = new Node_1.NamedNode(childName, newChildNode);\n            var newChildren = void 0, newIndexMap = void 0, newPriority = void 0;\n            if (newChildNode.isEmpty()) {\n                newChildren = this.children_.remove(childName);\n                newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);\n            }\n            else {\n                newChildren = this.children_.insert(childName, newChildNode);\n                newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n            }\n            newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;\n            return new ChildrenNode(newChildren, newPriority, newIndexMap);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.updateChild = function (path, newChildNode) {\n        var front = path.getFront();\n        if (front === null) {\n            return newChildNode;\n        }\n        else {\n            util_1.assert(path.getFront() !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n            var newImmediateChild = this.getImmediateChild(front).updateChild(path.popFront(), newChildNode);\n            return this.updateImmediateChild(front, newImmediateChild);\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.isEmpty = function () {\n        return this.children_.isEmpty();\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.numChildren = function () {\n        return this.children_.count();\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.val = function (exportFormat) {\n        if (this.isEmpty())\n            return null;\n        var obj = {};\n        var numKeys = 0, maxKey = 0, allIntegerKeys = true;\n        this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n            obj[key] = childNode.val(exportFormat);\n            numKeys++;\n            if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n                maxKey = Math.max(maxKey, Number(key));\n            }\n            else {\n                allIntegerKeys = false;\n            }\n        });\n        if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n            // convert to array.\n            var array = [];\n            for (var key in obj)\n                array[key] = obj[key];\n            return array;\n        }\n        else {\n            if (exportFormat && !this.getPriority().isEmpty()) {\n                obj['.priority'] = this.getPriority().val();\n            }\n            return obj;\n        }\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.hash = function () {\n        if (this.lazyHash_ === null) {\n            var toHash_1 = '';\n            if (!this.getPriority().isEmpty())\n                toHash_1 +=\n                    'priority:' +\n                        snap_1.priorityHashText(this.getPriority().val()) +\n                        ':';\n            this.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n                var childHash = childNode.hash();\n                if (childHash !== '')\n                    toHash_1 += ':' + key + ':' + childHash;\n            });\n            this.lazyHash_ = toHash_1 === '' ? '' : util_2.sha1(toHash_1);\n        }\n        return this.lazyHash_;\n    };\n    /** @inheritDoc */\n    ChildrenNode.prototype.getPredecessorChildName = function (childName, childNode, index) {\n        var idx = this.resolveIndex_(index);\n        if (idx) {\n            var predecessor = idx.getPredecessorKey(new Node_1.NamedNode(childName, childNode));\n            return predecessor ? predecessor.name : null;\n        }\n        else {\n            return this.children_.getPredecessorKey(childName);\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {?string}\n     */\n    ChildrenNode.prototype.getFirstChildName = function (indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            var minKey = idx.minKey();\n            return minKey && minKey.name;\n        }\n        else {\n            return this.children_.minKey();\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {?NamedNode}\n     */\n    ChildrenNode.prototype.getFirstChild = function (indexDefinition) {\n        var minKey = this.getFirstChildName(indexDefinition);\n        if (minKey) {\n            return new Node_1.NamedNode(minKey, this.children_.get(minKey));\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Given an index, return the key name of the largest value we have, according to that index\n     * @param {!Index} indexDefinition\n     * @return {?string}\n     */\n    ChildrenNode.prototype.getLastChildName = function (indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            var maxKey = idx.maxKey();\n            return maxKey && maxKey.name;\n        }\n        else {\n            return this.children_.maxKey();\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {?NamedNode}\n     */\n    ChildrenNode.prototype.getLastChild = function (indexDefinition) {\n        var maxKey = this.getLastChildName(indexDefinition);\n        if (maxKey) {\n            return new Node_1.NamedNode(maxKey, this.children_.get(maxKey));\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.forEachChild = function (index, action) {\n        var idx = this.resolveIndex_(index);\n        if (idx) {\n            return idx.inorderTraversal(function (wrappedNode) {\n                return action(wrappedNode.name, wrappedNode.node);\n            });\n        }\n        else {\n            return this.children_.inorderTraversal(action);\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {SortedMapIterator}\n     */\n    ChildrenNode.prototype.getIterator = function (indexDefinition) {\n        return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n    };\n    /**\n     *\n     * @param {!NamedNode} startPost\n     * @param {!Index} indexDefinition\n     * @return {!SortedMapIterator}\n     */\n    ChildrenNode.prototype.getIteratorFrom = function (startPost, indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getIteratorFrom(startPost, function (key) { return key; });\n        }\n        else {\n            var iterator = this.children_.getIteratorFrom(startPost.name, Node_1.NamedNode.Wrap);\n            var next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, startPost) < 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {!SortedMapIterator}\n     */\n    ChildrenNode.prototype.getReverseIterator = function (indexDefinition) {\n        return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);\n    };\n    /**\n     * @param {!NamedNode} endPost\n     * @param {!Index} indexDefinition\n     * @return {!SortedMapIterator}\n     */\n    ChildrenNode.prototype.getReverseIteratorFrom = function (endPost, indexDefinition) {\n        var idx = this.resolveIndex_(indexDefinition);\n        if (idx) {\n            return idx.getReverseIteratorFrom(endPost, function (key) {\n                return key;\n            });\n        }\n        else {\n            var iterator = this.children_.getReverseIteratorFrom(endPost.name, Node_1.NamedNode.Wrap);\n            var next = iterator.peek();\n            while (next != null && indexDefinition.compare(next, endPost) > 0) {\n                iterator.getNext();\n                next = iterator.peek();\n            }\n            return iterator;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.compareTo = function (other) {\n        if (this.isEmpty()) {\n            if (other.isEmpty()) {\n                return 0;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (other.isLeafNode() || other.isEmpty()) {\n            return 1;\n        }\n        else if (other === exports.MAX_NODE) {\n            return -1;\n        }\n        else {\n            // Must be another node with children.\n            return 0;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.withIndex = function (indexDefinition) {\n        if (indexDefinition === KeyIndex_1.KEY_INDEX ||\n            this.indexMap_.hasIndex(indexDefinition)) {\n            return this;\n        }\n        else {\n            var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);\n            return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.isIndexed = function (index) {\n        return index === KeyIndex_1.KEY_INDEX || this.indexMap_.hasIndex(index);\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildrenNode.prototype.equals = function (other) {\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            return false;\n        }\n        else {\n            var otherChildrenNode = other;\n            if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n                return false;\n            }\n            else if (this.children_.count() === otherChildrenNode.children_.count()) {\n                var thisIter = this.getIterator(PriorityIndex_1.PRIORITY_INDEX);\n                var otherIter = otherChildrenNode.getIterator(PriorityIndex_1.PRIORITY_INDEX);\n                var thisCurrent = thisIter.getNext();\n                var otherCurrent = otherIter.getNext();\n                while (thisCurrent && otherCurrent) {\n                    if (thisCurrent.name !== otherCurrent.name ||\n                        !thisCurrent.node.equals(otherCurrent.node)) {\n                        return false;\n                    }\n                    thisCurrent = thisIter.getNext();\n                    otherCurrent = otherIter.getNext();\n                }\n                return thisCurrent === null && otherCurrent === null;\n            }\n            else {\n                return false;\n            }\n        }\n    };\n    /**\n     * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n     * instead.\n     *\n     * @private\n     * @param {!Index} indexDefinition\n     * @return {?SortedMap.<NamedNode, Node>}\n     */\n    ChildrenNode.prototype.resolveIndex_ = function (indexDefinition) {\n        if (indexDefinition === KeyIndex_1.KEY_INDEX) {\n            return null;\n        }\n        else {\n            return this.indexMap_.get(indexDefinition.toString());\n        }\n    };\n    /**\n     * @private\n     * @type {RegExp}\n     */\n    ChildrenNode.INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n    return ChildrenNode;\n}());\nexports.ChildrenNode = ChildrenNode;\n/**\n * @constructor\n * @extends {ChildrenNode}\n * @private\n */\nvar MaxNode = /** @class */ (function (_super) {\n    tslib_1.__extends(MaxNode, _super);\n    function MaxNode() {\n        return _super.call(this, new SortedMap_1.SortedMap(comparators_1.NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap_1.IndexMap.Default) || this;\n    }\n    MaxNode.prototype.compareTo = function (other) {\n        if (other === this) {\n            return 0;\n        }\n        else {\n            return 1;\n        }\n    };\n    MaxNode.prototype.equals = function (other) {\n        // Not that we every compare it, but MAX_NODE is only ever equal to itself\n        return other === this;\n    };\n    MaxNode.prototype.getPriority = function () {\n        return this;\n    };\n    MaxNode.prototype.getImmediateChild = function (childName) {\n        return ChildrenNode.EMPTY_NODE;\n    };\n    MaxNode.prototype.isEmpty = function () {\n        return false;\n    };\n    return MaxNode;\n}(ChildrenNode));\nexports.MaxNode = MaxNode;\n/**\n * Marker that will sort higher than any other snapshot.\n * @type {!MAX_NODE}\n * @const\n */\nexports.MAX_NODE = new MaxNode();\nObject.defineProperties(Node_1.NamedNode, {\n    MIN: {\n        value: new Node_1.NamedNode(util_2.MIN_NAME, ChildrenNode.EMPTY_NODE)\n    },\n    MAX: {\n        value: new Node_1.NamedNode(util_2.MAX_NAME, exports.MAX_NODE)\n    }\n});\n/**\n * Reference Extensions\n */\nKeyIndex_1.KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode_1.LeafNode.__childrenNodeConstructor = ChildrenNode;\nsnap_1.setMaxNode(exports.MAX_NODE);\nPriorityIndex_1.setMaxNode(exports.MAX_NODE);\n\n//# sourceMappingURL=ChildrenNode.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @param {!string} name\n * @param {!Node} node\n * @constructor\n * @struct\n */\nvar NamedNode = /** @class */ (function () {\n    function NamedNode(name, node) {\n        this.name = name;\n        this.node = node;\n    }\n    /**\n     *\n     * @param {!string} name\n     * @param {!Node} node\n     * @return {NamedNode}\n     */\n    NamedNode.Wrap = function (name, node) {\n        return new NamedNode(name, node);\n    };\n    return NamedNode;\n}());\nexports.NamedNode = NamedNode;\n\n//# sourceMappingURL=Node.js.map\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n *\n * @enum\n */\nvar OperationType;\n(function (OperationType) {\n    OperationType[OperationType[\"OVERWRITE\"] = 0] = \"OVERWRITE\";\n    OperationType[OperationType[\"MERGE\"] = 1] = \"MERGE\";\n    OperationType[OperationType[\"ACK_USER_WRITE\"] = 2] = \"ACK_USER_WRITE\";\n    OperationType[OperationType[\"LISTEN_COMPLETE\"] = 3] = \"LISTEN_COMPLETE\";\n})(OperationType = exports.OperationType || (exports.OperationType = {}));\n/**\n * @param {boolean} fromUser\n * @param {boolean} fromServer\n * @param {?string} queryId\n * @param {boolean} tagged\n * @constructor\n */\nvar OperationSource = /** @class */ (function () {\n    function OperationSource(fromUser, fromServer, queryId, tagged) {\n        this.fromUser = fromUser;\n        this.fromServer = fromServer;\n        this.queryId = queryId;\n        this.tagged = tagged;\n        util_1.assert(!tagged || fromServer, 'Tagged queries must be from server.');\n    }\n    /**\n     * @const\n     * @type {!OperationSource}\n     */\n    OperationSource.User = new OperationSource(\n    /*fromUser=*/ true, false, null, \n    /*tagged=*/ false);\n    /**\n     * @const\n     * @type {!OperationSource}\n     */\n    OperationSource.Server = new OperationSource(false, \n    /*fromServer=*/ true, null, \n    /*tagged=*/ false);\n    /**\n     * @param {string} queryId\n     * @return {!OperationSource}\n     */\n    OperationSource.forServerTaggedQuery = function (queryId) {\n        return new OperationSource(false, \n        /*fromServer=*/ true, queryId, \n        /*tagged=*/ true);\n    };\n    return OperationSource;\n}());\nexports.OperationSource = OperationSource;\n\n//# sourceMappingURL=Operation.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Path_1 = require(\"./Path\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"./util\");\nvar util_3 = require(\"@firebase/util\");\nvar util_4 = require(\"@firebase/util\");\n/**\n * True for invalid Firebase keys\n * @type {RegExp}\n * @private\n */\nexports.INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n * @type {RegExp}\n * @private\n */\nexports.INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n/**\n * Maximum number of characters to allow in leaf value\n * @type {number}\n * @private\n */\nexports.MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n/**\n * @param {*} key\n * @return {boolean}\n */\nexports.isValidKey = function (key) {\n    return (typeof key === 'string' && key.length !== 0 && !exports.INVALID_KEY_REGEX_.test(key));\n};\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexports.isValidPathString = function (pathString) {\n    return (typeof pathString === 'string' &&\n        pathString.length !== 0 &&\n        !exports.INVALID_PATH_REGEX_.test(pathString));\n};\n/**\n * @param {string} pathString\n * @return {boolean}\n */\nexports.isValidRootPathString = function (pathString) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    return exports.isValidPathString(pathString);\n};\n/**\n * @param {*} priority\n * @return {boolean}\n */\nexports.isValidPriority = function (priority) {\n    return (priority === null ||\n        typeof priority === 'string' ||\n        (typeof priority === 'number' && !util_2.isInvalidJSONNumber(priority)) ||\n        (priority && typeof priority === 'object' && util_1.contains(priority, '.sv')));\n};\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexports.validateFirebaseDataArg = function (fnName, argumentNumber, data, path, optional) {\n    if (optional && data === undefined)\n        return;\n    exports.validateFirebaseData(util_3.errorPrefix(fnName, argumentNumber, optional), data, path);\n};\n/**\n * Validate a data object client-side before sending to server.\n *\n * @param {string} errorPrefix\n * @param {*} data\n * @param {!Path|!ValidationPath} path_\n */\nexports.validateFirebaseData = function (errorPrefix, data, path_) {\n    var path = path_ instanceof Path_1.Path ? new Path_1.ValidationPath(path_, errorPrefix) : path_;\n    if (data === undefined) {\n        throw new Error(errorPrefix + 'contains undefined ' + path.toErrorString());\n    }\n    if (typeof data === 'function') {\n        throw new Error(errorPrefix +\n            'contains a function ' +\n            path.toErrorString() +\n            ' with contents = ' +\n            data.toString());\n    }\n    if (util_2.isInvalidJSONNumber(data)) {\n        throw new Error(errorPrefix + 'contains ' + data.toString() + ' ' + path.toErrorString());\n    }\n    // Check max leaf size, but try to avoid the utf8 conversion if we can.\n    if (typeof data === 'string' &&\n        data.length > exports.MAX_LEAF_SIZE_ / 3 &&\n        util_4.stringLength(data) > exports.MAX_LEAF_SIZE_) {\n        throw new Error(errorPrefix +\n            'contains a string greater than ' +\n            exports.MAX_LEAF_SIZE_ +\n            ' utf8 bytes ' +\n            path.toErrorString() +\n            \" ('\" +\n            data.substring(0, 50) +\n            \"...')\");\n    }\n    // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n    // to save extra walking of large objects.\n    if (data && typeof data === 'object') {\n        var hasDotValue_1 = false, hasActualChild_1 = false;\n        util_1.forEach(data, function (key, value) {\n            if (key === '.value') {\n                hasDotValue_1 = true;\n            }\n            else if (key !== '.priority' && key !== '.sv') {\n                hasActualChild_1 = true;\n                if (!exports.isValidKey(key)) {\n                    throw new Error(errorPrefix +\n                        ' contains an invalid key (' +\n                        key +\n                        ') ' +\n                        path.toErrorString() +\n                        '.  Keys must be non-empty strings ' +\n                        'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n                }\n            }\n            path.push(key);\n            exports.validateFirebaseData(errorPrefix, value, path);\n            path.pop();\n        });\n        if (hasDotValue_1 && hasActualChild_1) {\n            throw new Error(errorPrefix +\n                ' contains \".value\" child ' +\n                path.toErrorString() +\n                ' in addition to actual children.');\n        }\n    }\n};\n/**\n * Pre-validate paths passed in the firebase function.\n *\n * @param {string} errorPrefix\n * @param {Array<!Path>} mergePaths\n */\nexports.validateFirebaseMergePaths = function (errorPrefix, mergePaths) {\n    var i, curPath;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        var keys = curPath.slice();\n        for (var j = 0; j < keys.length; j++) {\n            if (keys[j] === '.priority' && j === keys.length - 1) {\n                // .priority is OK\n            }\n            else if (!exports.isValidKey(keys[j])) {\n                throw new Error(errorPrefix +\n                    'contains an invalid key (' +\n                    keys[j] +\n                    ') in path ' +\n                    curPath.toString() +\n                    '. Keys must be non-empty strings ' +\n                    'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"');\n            }\n        }\n    }\n    // Check that update keys are not descendants of each other.\n    // We rely on the property that sorting guarantees that ancestors come\n    // right before descendants.\n    mergePaths.sort(Path_1.Path.comparePaths);\n    var prevPath = null;\n    for (i = 0; i < mergePaths.length; i++) {\n        curPath = mergePaths[i];\n        if (prevPath !== null && prevPath.contains(curPath)) {\n            throw new Error(errorPrefix +\n                'contains a path ' +\n                prevPath.toString() +\n                ' that is ancestor of another path ' +\n                curPath.toString());\n        }\n        prevPath = curPath;\n    }\n};\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n *\n * @param {string} fnName\n * @param {number} argumentNumber\n * @param {*} data\n * @param {!Path} path\n * @param {boolean} optional\n */\nexports.validateFirebaseMergeDataArg = function (fnName, argumentNumber, data, path, optional) {\n    if (optional && data === undefined)\n        return;\n    var errorPrefix = util_3.errorPrefix(fnName, argumentNumber, optional);\n    if (!(data && typeof data === 'object') || Array.isArray(data)) {\n        throw new Error(errorPrefix + ' must be an object containing the children to replace.');\n    }\n    var mergePaths = [];\n    util_1.forEach(data, function (key, value) {\n        var curPath = new Path_1.Path(key);\n        exports.validateFirebaseData(errorPrefix, value, path.child(curPath));\n        if (curPath.getBack() === '.priority') {\n            if (!exports.isValidPriority(value)) {\n                throw new Error(errorPrefix +\n                    \"contains an invalid value for '\" +\n                    curPath.toString() +\n                    \"', which must be a valid \" +\n                    'Firebase priority (a string, finite number, server value, or null).');\n            }\n        }\n        mergePaths.push(curPath);\n    });\n    exports.validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\nexports.validatePriority = function (fnName, argumentNumber, priority, optional) {\n    if (optional && priority === undefined)\n        return;\n    if (util_2.isInvalidJSONNumber(priority))\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n            'is ' +\n            priority.toString() +\n            ', but must be a valid Firebase priority (a string, finite number, ' +\n            'server value, or null).');\n    // Special case to allow importing data with a .sv.\n    if (!exports.isValidPriority(priority))\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n            'must be a valid Firebase priority ' +\n            '(a string, finite number, server value, or null).');\n};\nexports.validateEventType = function (fnName, argumentNumber, eventType, optional) {\n    if (optional && eventType === undefined)\n        return;\n    switch (eventType) {\n        case 'value':\n        case 'child_added':\n        case 'child_removed':\n        case 'child_changed':\n        case 'child_moved':\n            break;\n        default:\n            throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n                'must be a valid event type = \"value\", \"child_added\", \"child_removed\", ' +\n                '\"child_changed\", or \"child_moved\".');\n    }\n};\nexports.validateKey = function (fnName, argumentNumber, key, optional) {\n    if (optional && key === undefined)\n        return;\n    if (!exports.isValidKey(key))\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n            'was an invalid key = \"' +\n            key +\n            '\".  Firebase keys must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").');\n};\nexports.validatePathString = function (fnName, argumentNumber, pathString, optional) {\n    if (optional && pathString === undefined)\n        return;\n    if (!exports.isValidPathString(pathString))\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n            'was an invalid path = \"' +\n            pathString +\n            '\". Paths must be non-empty strings and ' +\n            'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n};\nexports.validateRootPathString = function (fnName, argumentNumber, pathString, optional) {\n    if (pathString) {\n        // Allow '/.info/' at the beginning.\n        pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n    }\n    exports.validatePathString(fnName, argumentNumber, pathString, optional);\n};\nexports.validateWritablePath = function (fnName, path) {\n    if (path.getFront() === '.info') {\n        throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n    }\n};\nexports.validateUrl = function (fnName, argumentNumber, parsedUrl) {\n    // TODO = Validate server better.\n    var pathString = parsedUrl.path.toString();\n    if (!(typeof parsedUrl.repoInfo.host === 'string') ||\n        parsedUrl.repoInfo.host.length === 0 ||\n        (!exports.isValidKey(parsedUrl.repoInfo.namespace) &&\n            parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n        (pathString.length !== 0 && !exports.isValidRootPathString(pathString))) {\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, false) +\n            'must be a valid firebase URL and ' +\n            'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".');\n    }\n};\nexports.validateCredential = function (fnName, argumentNumber, cred, optional) {\n    if (optional && cred === undefined)\n        return;\n    if (!(typeof cred === 'string'))\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n            'must be a valid credential (a string).');\n};\nexports.validateBoolean = function (fnName, argumentNumber, bool, optional) {\n    if (optional && bool === undefined)\n        return;\n    if (typeof bool !== 'boolean')\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) + 'must be a boolean.');\n};\nexports.validateString = function (fnName, argumentNumber, string, optional) {\n    if (optional && string === undefined)\n        return;\n    if (!(typeof string === 'string')) {\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n            'must be a valid string.');\n    }\n};\nexports.validateObject = function (fnName, argumentNumber, obj, optional) {\n    if (optional && obj === undefined)\n        return;\n    if (!(obj && typeof obj === 'object') || obj === null) {\n        throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n            'must be a valid object.');\n    }\n};\nexports.validateObjectContainsKey = function (fnName, argumentNumber, obj, key, optional, opt_type) {\n    var objectContainsKey = obj && typeof obj === 'object' && util_1.contains(obj, key);\n    if (!objectContainsKey) {\n        if (optional) {\n            return;\n        }\n        else {\n            throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n                'must contain the key \"' +\n                key +\n                '\"');\n        }\n    }\n    if (opt_type) {\n        var val = util_1.safeGet(obj, key);\n        if ((opt_type === 'number' && !(typeof val === 'number')) ||\n            (opt_type === 'string' && !(typeof val === 'string')) ||\n            (opt_type === 'boolean' && !(typeof val === 'boolean')) ||\n            (opt_type === 'function' && !(typeof val === 'function')) ||\n            (opt_type === 'object' && !(typeof val === 'object') && val)) {\n            if (optional) {\n                throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n                    'contains invalid value for key \"' +\n                    key +\n                    '\" (must be of type \"' +\n                    opt_type +\n                    '\")');\n            }\n            else {\n                throw new Error(util_3.errorPrefix(fnName, argumentNumber, optional) +\n                    'must contain the key \"' +\n                    key +\n                    '\" with type \"' +\n                    opt_type +\n                    '\"');\n            }\n        }\n    }\n};\n\n//# sourceMappingURL=validation.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @constructor\n * @struct\n * @param {!string} type The event type\n * @param {!Node} snapshotNode The data\n * @param {string=} childName The name for this child, if it's a child event\n * @param {Node=} oldSnap Used for intermediate processing of child changed events\n * @param {string=} prevName The name for the previous child, if applicable\n */\nvar Change = /** @class */ (function () {\n    function Change(type, snapshotNode, childName, oldSnap, prevName) {\n        this.type = type;\n        this.snapshotNode = snapshotNode;\n        this.childName = childName;\n        this.oldSnap = oldSnap;\n        this.prevName = prevName;\n    }\n    /**\n     * @param {!Node} snapshot\n     * @return {!Change}\n     */\n    Change.valueChange = function (snapshot) {\n        return new Change(Change.VALUE, snapshot);\n    };\n    /**\n     * @param {string} childKey\n     * @param {!Node} snapshot\n     * @return {!Change}\n     */\n    Change.childAddedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_ADDED, snapshot, childKey);\n    };\n    /**\n     * @param {string} childKey\n     * @param {!Node} snapshot\n     * @return {!Change}\n     */\n    Change.childRemovedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_REMOVED, snapshot, childKey);\n    };\n    /**\n     * @param {string} childKey\n     * @param {!Node} newSnapshot\n     * @param {!Node} oldSnapshot\n     * @return {!Change}\n     */\n    Change.childChangedChange = function (childKey, newSnapshot, oldSnapshot) {\n        return new Change(Change.CHILD_CHANGED, newSnapshot, childKey, oldSnapshot);\n    };\n    /**\n     * @param {string} childKey\n     * @param {!Node} snapshot\n     * @return {!Change}\n     */\n    Change.childMovedChange = function (childKey, snapshot) {\n        return new Change(Change.CHILD_MOVED, snapshot, childKey);\n    };\n    //event types\n    /** Event type for a child added */\n    Change.CHILD_ADDED = 'child_added';\n    /** Event type for a child removed */\n    Change.CHILD_REMOVED = 'child_removed';\n    /** Event type for a child changed */\n    Change.CHILD_CHANGED = 'child_changed';\n    /** Event type for a child moved */\n    Change.CHILD_MOVED = 'child_moved';\n    /** Event type for a value change */\n    Change.VALUE = 'value';\n    return Change;\n}());\nexports.Change = Change;\n\n//# sourceMappingURL=Change.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChildrenNode_1 = require(\"./ChildrenNode\");\nvar LeafNode_1 = require(\"./LeafNode\");\nvar Node_1 = require(\"./Node\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar childSet_1 = require(\"./childSet\");\nvar comparators_1 = require(\"./comparators\");\nvar IndexMap_1 = require(\"./IndexMap\");\nvar PriorityIndex_1 = require(\"./indexes/PriorityIndex\");\nvar USE_HINZE = true;\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param {*} json JSON to create a node for.\n * @param {?string|?number=} priority Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n * @return {!Node}\n */\nfunction nodeFromJSON(json, priority) {\n    if (priority === void 0) { priority = null; }\n    if (json === null) {\n        return ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n    }\n    if (typeof json === 'object' && '.priority' in json) {\n        priority = json['.priority'];\n    }\n    util_2.assert(priority === null ||\n        typeof priority === 'string' ||\n        typeof priority === 'number' ||\n        (typeof priority === 'object' && '.sv' in priority), 'Invalid priority type found: ' + typeof priority);\n    if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n        json = json['.value'];\n    }\n    // Valid leaf nodes include non-objects or server-value wrapper objects\n    if (typeof json !== 'object' || '.sv' in json) {\n        var jsonLeaf = json;\n        return new LeafNode_1.LeafNode(jsonLeaf, nodeFromJSON(priority));\n    }\n    if (!(json instanceof Array) && USE_HINZE) {\n        var children_1 = [];\n        var childrenHavePriority_1 = false;\n        var hinzeJsonObj_1 = json;\n        util_1.forEach(hinzeJsonObj_1, function (key, child) {\n            if (typeof key !== 'string' || key.substring(0, 1) !== '.') {\n                // Ignore metadata nodes\n                var childNode = nodeFromJSON(hinzeJsonObj_1[key]);\n                if (!childNode.isEmpty()) {\n                    childrenHavePriority_1 =\n                        childrenHavePriority_1 || !childNode.getPriority().isEmpty();\n                    children_1.push(new Node_1.NamedNode(key, childNode));\n                }\n            }\n        });\n        if (children_1.length == 0) {\n            return ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        }\n        var childSet = childSet_1.buildChildSet(children_1, comparators_1.NAME_ONLY_COMPARATOR, function (namedNode) { return namedNode.name; }, comparators_1.NAME_COMPARATOR);\n        if (childrenHavePriority_1) {\n            var sortedChildSet = childSet_1.buildChildSet(children_1, PriorityIndex_1.PRIORITY_INDEX.getCompare());\n            return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap_1.IndexMap({ '.priority': sortedChildSet }, { '.priority': PriorityIndex_1.PRIORITY_INDEX }));\n        }\n        else {\n            return new ChildrenNode_1.ChildrenNode(childSet, nodeFromJSON(priority), IndexMap_1.IndexMap.Default);\n        }\n    }\n    else {\n        var node_1 = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        var jsonObj_1 = json;\n        util_1.forEach(jsonObj_1, function (key, childData) {\n            if (util_1.contains(jsonObj_1, key)) {\n                if (key.substring(0, 1) !== '.') {\n                    // ignore metadata nodes.\n                    var childNode = nodeFromJSON(childData);\n                    if (childNode.isLeafNode() || !childNode.isEmpty())\n                        node_1 = node_1.updateImmediateChild(key, childNode);\n                }\n            }\n        });\n        return node_1.updatePriority(nodeFromJSON(priority));\n    }\n}\nexports.nodeFromJSON = nodeFromJSON;\nPriorityIndex_1.setNodeFromJSON(nodeFromJSON);\n\n//# sourceMappingURL=nodeFromJSON.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Index_1 = require(\"./Index\");\nvar Node_1 = require(\"../Node\");\nvar util_1 = require(\"../../util/util\");\nvar util_2 = require(\"@firebase/util\");\nvar __EMPTY_NODE;\nvar KeyIndex = /** @class */ (function (_super) {\n    tslib_1.__extends(KeyIndex, _super);\n    function KeyIndex() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(KeyIndex, \"__EMPTY_NODE\", {\n        get: function () {\n            return __EMPTY_NODE;\n        },\n        set: function (val) {\n            __EMPTY_NODE = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.compare = function (a, b) {\n        return util_1.nameCompare(a.name, b.name);\n    };\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.isDefinedOn = function (node) {\n        // We could probably return true here (since every node has a key), but it's never called\n        // so just leaving unimplemented for now.\n        throw util_2.assertionError('KeyIndex.isDefinedOn not expected to be called.');\n    };\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n        return false; // The key for a node never changes.\n    };\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.minPost = function () {\n        return Node_1.NamedNode.MIN;\n    };\n    /**\n     * @inheritDoc\n     */\n    KeyIndex.prototype.maxPost = function () {\n        // TODO: This should really be created once and cached in a static property, but\n        // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n        return new Node_1.NamedNode(util_1.MAX_NAME, __EMPTY_NODE);\n    };\n    /**\n     * @param {*} indexValue\n     * @param {string} name\n     * @return {!NamedNode}\n     */\n    KeyIndex.prototype.makePost = function (indexValue, name) {\n        util_2.assert(typeof indexValue === 'string', 'KeyIndex indexValue must always be a string.');\n        // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n        return new Node_1.NamedNode(indexValue, __EMPTY_NODE);\n    };\n    /**\n     * @return {!string} String representation for inclusion in a query spec\n     */\n    KeyIndex.prototype.toString = function () {\n        return '.key';\n    };\n    return KeyIndex;\n}(Index_1.Index));\nexports.KeyIndex = KeyIndex;\nexports.KEY_INDEX = new KeyIndex();\n\n//# sourceMappingURL=KeyIndex.js.map\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createSubscribe, deepCopy, deepExtend, ErrorFactory, patchProperty } from '@firebase/util';\nvar contains = function (obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n};\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n// An array to capture listeners before the true auth functions\n// exist\nvar tokenListeners = [];\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n */\nvar FirebaseAppImpl = /** @class */ (function () {\n    function FirebaseAppImpl(options, name, firebase_) {\n        this.firebase_ = firebase_;\n        this.isDeleted_ = false;\n        this.services_ = {};\n        this.name_ = name;\n        this.options_ = deepCopy(options);\n        this.INTERNAL = {\n            getUid: function () { return null; },\n            getToken: function () { return Promise.resolve(null); },\n            addAuthTokenListener: function (callback) {\n                tokenListeners.push(callback);\n                // Make sure callback is called, asynchronously, in the absence of the auth module\n                setTimeout(function () { return callback(null); }, 0);\n            },\n            removeAuthTokenListener: function (callback) {\n                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });\n            }\n        };\n    }\n    Object.defineProperty(FirebaseAppImpl.prototype, \"name\", {\n        get: function () {\n            this.checkDestroyed_();\n            return this.name_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FirebaseAppImpl.prototype, \"options\", {\n        get: function () {\n            this.checkDestroyed_();\n            return this.options_;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FirebaseAppImpl.prototype.delete = function () {\n        var _this = this;\n        return new Promise(function (resolve) {\n            _this.checkDestroyed_();\n            resolve();\n        })\n            .then(function () {\n            _this.firebase_.INTERNAL.removeApp(_this.name_);\n            var services = [];\n            Object.keys(_this.services_).forEach(function (serviceKey) {\n                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {\n                    services.push(_this.services_[serviceKey][instanceKey]);\n                });\n            });\n            return Promise.all(services.map(function (service) {\n                return service.INTERNAL.delete();\n            }));\n        })\n            .then(function () {\n            _this.isDeleted_ = true;\n            _this.services_ = {};\n        });\n    };\n    /**\n     * Return a service instance associated with this app (creating it\n     * on demand), identified by the passed instanceIdentifier.\n     *\n     * NOTE: Currently storage is the only one that is leveraging this\n     * functionality. They invoke it by calling:\n     *\n     * ```javascript\n     * firebase.app().storage('STORAGE BUCKET ID')\n     * ```\n     *\n     * The service name is passed to this already\n     * @internal\n     */\n    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {\n        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }\n        this.checkDestroyed_();\n        if (!this.services_[name]) {\n            this.services_[name] = {};\n        }\n        if (!this.services_[name][instanceIdentifier]) {\n            /**\n             * If a custom instance has been defined (i.e. not '[DEFAULT]')\n             * then we will pass that instance on, otherwise we pass `null`\n             */\n            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME\n                ? instanceIdentifier\n                : undefined;\n            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);\n            this.services_[name][instanceIdentifier] = service;\n        }\n        return this.services_[name][instanceIdentifier];\n    };\n    /**\n     * Callback function used to extend an App instance at the time\n     * of service instance creation.\n     */\n    FirebaseAppImpl.prototype.extendApp = function (props) {\n        var _this = this;\n        // Copy the object onto the FirebaseAppImpl prototype\n        deepExtend(this, props);\n        /**\n         * If the app has overwritten the addAuthTokenListener stub, forward\n         * the active token listeners on to the true fxn.\n         *\n         * TODO: This function is required due to our current module\n         * structure. Once we are able to rely strictly upon a single module\n         * implementation, this code should be refactored and Auth should\n         * provide these stubs and the upgrade logic\n         */\n        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {\n            tokenListeners.forEach(function (listener) {\n                _this.INTERNAL.addAuthTokenListener(listener);\n            });\n            tokenListeners = [];\n        }\n    };\n    /**\n     * This function will throw an Error if the App has already been deleted -\n     * use before performing API actions on the App.\n     */\n    FirebaseAppImpl.prototype.checkDestroyed_ = function () {\n        if (this.isDeleted_) {\n            error('app-deleted', { name: this.name_ });\n        }\n    };\n    return FirebaseAppImpl;\n}());\n// Prevent dead-code elimination of these methods w/o invalid property\n// copying.\n(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\n    FirebaseAppImpl.prototype.delete ||\n    console.log('dc');\n/**\n * Return a firebase namespace object.\n *\n * In production, this will be called exactly once and the result\n * assigned to the 'firebase' global.  It may be called multiple times\n * in unit tests.\n */\nexport function createFirebaseNamespace() {\n    var apps_ = {};\n    var factories = {};\n    var appHooks = {};\n    // A namespace is a plain JavaScript Object.\n    var namespace = {\n        // Hack to prevent Babel from modifying the object returned\n        // as the firebase namespace.\n        __esModule: true,\n        initializeApp: initializeApp,\n        app: app,\n        apps: null,\n        Promise: Promise,\n        SDK_VERSION: '4.10.1',\n        INTERNAL: {\n            registerService: registerService,\n            createFirebaseNamespace: createFirebaseNamespace,\n            extendNamespace: extendNamespace,\n            createSubscribe: createSubscribe,\n            ErrorFactory: ErrorFactory,\n            removeApp: removeApp,\n            factories: factories,\n            useAsService: useAsService,\n            Promise: Promise,\n            deepExtend: deepExtend\n        }\n    };\n    // Inject a circular default export to allow Babel users who were previously\n    // using:\n    //\n    //   import firebase from 'firebase';\n    //   which becomes: var firebase = require('firebase').default;\n    //\n    // instead of\n    //\n    //   import * as firebase from 'firebase';\n    //   which becomes: var firebase = require('firebase');\n    patchProperty(namespace, 'default', namespace);\n    // firebase.apps is a read-only getter.\n    Object.defineProperty(namespace, 'apps', {\n        get: getApps\n    });\n    /**\n     * Called by App.delete() - but before any services associated with the App\n     * are deleted.\n     */\n    function removeApp(name) {\n        var app = apps_[name];\n        callAppHooks(app, 'delete');\n        delete apps_[name];\n    }\n    /**\n     * Get the App object for a given name (or DEFAULT).\n     */\n    function app(name) {\n        name = name || DEFAULT_ENTRY_NAME;\n        if (!contains(apps_, name)) {\n            error('no-app', { name: name });\n        }\n        return apps_[name];\n    }\n    patchProperty(app, 'App', FirebaseAppImpl);\n    /**\n     * Create a new App instance (name must be unique).\n     */\n    function initializeApp(options, name) {\n        if (name === undefined) {\n            name = DEFAULT_ENTRY_NAME;\n        }\n        else {\n            if (typeof name !== 'string' || name === '') {\n                error('bad-app-name', { name: name + '' });\n            }\n        }\n        if (contains(apps_, name)) {\n            error('duplicate-app', { name: name });\n        }\n        var app = new FirebaseAppImpl(options, name, namespace);\n        apps_[name] = app;\n        callAppHooks(app, 'create');\n        return app;\n    }\n    /*\n     * Return an array of all the non-deleted FirebaseApps.\n     */\n    function getApps() {\n        // Make a copy so caller cannot mutate the apps list.\n        return Object.keys(apps_).map(function (name) { return apps_[name]; });\n    }\n    /*\n     * Register a Firebase Service.\n     *\n     * firebase.INTERNAL.registerService()\n     *\n     * TODO: Implement serviceProperties.\n     */\n    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {\n        // Cannot re-register a service that already exists\n        if (factories[name]) {\n            error('duplicate-service', { name: name });\n        }\n        // Capture the service factory for later service instantiation\n        factories[name] = createService;\n        // Capture the appHook, if passed\n        if (appHook) {\n            appHooks[name] = appHook;\n            // Run the **new** app hook on all existing apps\n            getApps().forEach(function (app) {\n                appHook('create', app);\n            });\n        }\n        // The Service namespace is an accessor function ...\n        var serviceNamespace = function (appArg) {\n            if (appArg === void 0) { appArg = app(); }\n            if (typeof appArg[name] !== 'function') {\n                // Invalid argument.\n                // This happens in the following case: firebase.storage('gs:/')\n                error('invalid-app-argument', { name: name });\n            }\n            // Forward service instance lookup to the FirebaseApp.\n            return appArg[name]();\n        };\n        // ... and a container for service-level properties.\n        if (serviceProperties !== undefined) {\n            deepExtend(serviceNamespace, serviceProperties);\n        }\n        // Monkey-patch the serviceNamespace onto the firebase namespace\n        namespace[name] = serviceNamespace;\n        // Patch the FirebaseAppImpl prototype\n        FirebaseAppImpl.prototype[name] = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var serviceFxn = this._getService.bind(this, name);\n            return serviceFxn.apply(this, allowMultipleInstances ? args : []);\n        };\n        return serviceNamespace;\n    }\n    /**\n     * Patch the top-level firebase namespace with additional properties.\n     *\n     * firebase.INTERNAL.extendNamespace()\n     */\n    function extendNamespace(props) {\n        deepExtend(namespace, props);\n    }\n    function callAppHooks(app, eventName) {\n        Object.keys(factories).forEach(function (serviceName) {\n            // Ignore virtual services\n            var factoryName = useAsService(app, serviceName);\n            if (factoryName === null) {\n                return;\n            }\n            if (appHooks[factoryName]) {\n                appHooks[factoryName](eventName, app);\n            }\n        });\n    }\n    // Map the requested service to a registered service name\n    // (used to map auth to serverAuth service when needed).\n    function useAsService(app, name) {\n        if (name === 'serverAuth') {\n            return null;\n        }\n        var useService = name;\n        var options = app.options;\n        return useService;\n    }\n    return namespace;\n}\nfunction error(code, args) {\n    throw appErrors.create(code, args);\n}\n// TypeScript does not support non-string indexes!\n// let errors: {[code: AppError: string} = {\nvar errors = {\n    'no-app': \"No Firebase App '{$name}' has been created - \" +\n        'call Firebase App.initializeApp()',\n    'bad-app-name': \"Illegal App name: '{$name}\",\n    'duplicate-app': \"Firebase App named '{$name}' already exists\",\n    'app-deleted': \"Firebase App named '{$name}' already deleted\",\n    'duplicate-service': \"Firebase service named '{$name}' already registered\",\n    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +\n        'account is only allowed in a Node.js environment. On client ' +\n        'devices, you should instead initialize the SDK with an api key and ' +\n        'auth domain',\n    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +\n        'Firebase App instance.'\n};\nvar appErrors = new ErrorFactory('app', 'Firebase', errors);\n\n\n//# sourceMappingURL=firebaseApp.js.map\n","/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createFirebaseNamespace } from './src/firebaseApp';\nexport var firebase = createFirebaseNamespace();\nexport default firebase;\n\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nvar CacheNode = /** @class */ (function () {\n    /**\n     * @param {!Node} node_\n     * @param {boolean} fullyInitialized_\n     * @param {boolean} filtered_\n     */\n    function CacheNode(node_, fullyInitialized_, filtered_) {\n        this.node_ = node_;\n        this.fullyInitialized_ = fullyInitialized_;\n        this.filtered_ = filtered_;\n    }\n    /**\n     * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n     * @return {boolean}\n     */\n    CacheNode.prototype.isFullyInitialized = function () {\n        return this.fullyInitialized_;\n    };\n    /**\n     * Returns whether this node is potentially missing children due to a filter applied to the node\n     * @return {boolean}\n     */\n    CacheNode.prototype.isFiltered = function () {\n        return this.filtered_;\n    };\n    /**\n     * @param {!Path} path\n     * @return {boolean}\n     */\n    CacheNode.prototype.isCompleteForPath = function (path) {\n        if (path.isEmpty()) {\n            return this.isFullyInitialized() && !this.filtered_;\n        }\n        var childKey = path.getFront();\n        return this.isCompleteForChild(childKey);\n    };\n    /**\n     * @param {!string} key\n     * @return {boolean}\n     */\n    CacheNode.prototype.isCompleteForChild = function (key) {\n        return ((this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key));\n    };\n    /**\n     * @return {!Node}\n     */\n    CacheNode.prototype.getNode = function () {\n        return this.node_;\n    };\n    return CacheNode;\n}());\nexports.CacheNode = CacheNode;\n\n//# sourceMappingURL=CacheNode.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ServerValues_1 = require(\"./util/ServerValues\");\nvar nodeFromJSON_1 = require(\"./snap/nodeFromJSON\");\nvar Path_1 = require(\"./util/Path\");\nvar SparseSnapshotTree_1 = require(\"./SparseSnapshotTree\");\nvar SyncTree_1 = require(\"./SyncTree\");\nvar SnapshotHolder_1 = require(\"./SnapshotHolder\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"./util/util\");\nvar util_3 = require(\"@firebase/util\");\nvar AuthTokenProvider_1 = require(\"./AuthTokenProvider\");\nvar StatsManager_1 = require(\"./stats/StatsManager\");\nvar StatsReporter_1 = require(\"./stats/StatsReporter\");\nvar StatsListener_1 = require(\"./stats/StatsListener\");\nvar EventQueue_1 = require(\"./view/EventQueue\");\nvar PersistentConnection_1 = require(\"./PersistentConnection\");\nvar ReadonlyRestClient_1 = require(\"./ReadonlyRestClient\");\nvar Database_1 = require(\"../api/Database\");\nvar INTERRUPT_REASON = 'repo_interrupt';\n/**\n * A connection to a single data repository.\n */\nvar Repo = /** @class */ (function () {\n    /**\n     * @param {!RepoInfo} repoInfo_\n     * @param {boolean} forceRestClient\n     * @param {!FirebaseApp} app\n     */\n    function Repo(repoInfo_, forceRestClient, app) {\n        var _this = this;\n        this.repoInfo_ = repoInfo_;\n        this.app = app;\n        this.dataUpdateCount = 0;\n        this.statsListener_ = null;\n        this.eventQueue_ = new EventQueue_1.EventQueue();\n        this.nextWriteId_ = 1;\n        this.interceptServerDataCallback_ = null;\n        // A list of data pieces and paths to be set when this client disconnects.\n        this.onDisconnect_ = new SparseSnapshotTree_1.SparseSnapshotTree();\n        /**\n         * TODO: This should be @private but it's used by test_access.js and internal.js\n         * @type {?PersistentConnection}\n         */\n        this.persistentConnection_ = null;\n        /** @type {!AuthTokenProvider} */\n        var authTokenProvider = new AuthTokenProvider_1.AuthTokenProvider(app);\n        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo_);\n        if (forceRestClient || util_2.beingCrawled()) {\n            this.server_ = new ReadonlyRestClient_1.ReadonlyRestClient(this.repoInfo_, this.onDataUpdate_.bind(this), authTokenProvider);\n            // Minor hack: Fire onConnect immediately, since there's no actual connection.\n            setTimeout(this.onConnectStatus_.bind(this, true), 0);\n        }\n        else {\n            var authOverride = app.options['databaseAuthVariableOverride'];\n            // Validate authOverride\n            if (typeof authOverride !== 'undefined' && authOverride !== null) {\n                if (typeof authOverride !== 'object') {\n                    throw new Error('Only objects are supported for option databaseAuthVariableOverride');\n                }\n                try {\n                    util_1.stringify(authOverride);\n                }\n                catch (e) {\n                    throw new Error('Invalid authOverride provided: ' + e);\n                }\n            }\n            this.persistentConnection_ = new PersistentConnection_1.PersistentConnection(this.repoInfo_, this.onDataUpdate_.bind(this), this.onConnectStatus_.bind(this), this.onServerInfoUpdate_.bind(this), authTokenProvider, authOverride);\n            this.server_ = this.persistentConnection_;\n        }\n        authTokenProvider.addTokenChangeListener(function (token) {\n            _this.server_.refreshAuthToken(token);\n        });\n        // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n        // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n        this.statsReporter_ = StatsManager_1.StatsManager.getOrCreateReporter(repoInfo_, function () { return new StatsReporter_1.StatsReporter(_this.stats_, _this.server_); });\n        this.transactions_init_();\n        // Used for .info.\n        this.infoData_ = new SnapshotHolder_1.SnapshotHolder();\n        this.infoSyncTree_ = new SyncTree_1.SyncTree({\n            startListening: function (query, tag, currentHashFn, onComplete) {\n                var infoEvents = [];\n                var node = _this.infoData_.getNode(query.path);\n                // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n                // on initial data...\n                if (!node.isEmpty()) {\n                    infoEvents = _this.infoSyncTree_.applyServerOverwrite(query.path, node);\n                    setTimeout(function () {\n                        onComplete('ok');\n                    }, 0);\n                }\n                return infoEvents;\n            },\n            stopListening: function () { }\n        });\n        this.updateInfo_('connected', false);\n        this.serverSyncTree_ = new SyncTree_1.SyncTree({\n            startListening: function (query, tag, currentHashFn, onComplete) {\n                _this.server_.listen(query, currentHashFn, tag, function (status, data) {\n                    var events = onComplete(status, data);\n                    _this.eventQueue_.raiseEventsForChangedPath(query.path, events);\n                });\n                // No synchronous events for network-backed sync trees\n                return [];\n            },\n            stopListening: function (query, tag) {\n                _this.server_.unlisten(query, tag);\n            }\n        });\n    }\n    /**\n     * @return {string}  The URL corresponding to the root of this Firebase.\n     */\n    Repo.prototype.toString = function () {\n        return ((this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host);\n    };\n    /**\n     * @return {!string} The namespace represented by the repo.\n     */\n    Repo.prototype.name = function () {\n        return this.repoInfo_.namespace;\n    };\n    /**\n     * @return {!number} The time in milliseconds, taking the server offset into account if we have one.\n     */\n    Repo.prototype.serverTime = function () {\n        var offsetNode = this.infoData_.getNode(new Path_1.Path('.info/serverTimeOffset'));\n        var offset = offsetNode.val() || 0;\n        return new Date().getTime() + offset;\n    };\n    /**\n     * Generate ServerValues using some variables from the repo object.\n     * @return {!Object}\n     */\n    Repo.prototype.generateServerValues = function () {\n        return ServerValues_1.generateWithValues({\n            timestamp: this.serverTime()\n        });\n    };\n    /**\n     * Called by realtime when we get new messages from the server.\n     *\n     * @private\n     * @param {string} pathString\n     * @param {*} data\n     * @param {boolean} isMerge\n     * @param {?number} tag\n     */\n    Repo.prototype.onDataUpdate_ = function (pathString, data, isMerge, tag) {\n        // For testing.\n        this.dataUpdateCount++;\n        var path = new Path_1.Path(pathString);\n        data = this.interceptServerDataCallback_\n            ? this.interceptServerDataCallback_(pathString, data)\n            : data;\n        var events = [];\n        if (tag) {\n            if (isMerge) {\n                var taggedChildren = util_3.map(data, function (raw) {\n                    return nodeFromJSON_1.nodeFromJSON(raw);\n                });\n                events = this.serverSyncTree_.applyTaggedQueryMerge(path, taggedChildren, tag);\n            }\n            else {\n                var taggedSnap = nodeFromJSON_1.nodeFromJSON(data);\n                events = this.serverSyncTree_.applyTaggedQueryOverwrite(path, taggedSnap, tag);\n            }\n        }\n        else if (isMerge) {\n            var changedChildren = util_3.map(data, function (raw) {\n                return nodeFromJSON_1.nodeFromJSON(raw);\n            });\n            events = this.serverSyncTree_.applyServerMerge(path, changedChildren);\n        }\n        else {\n            var snap = nodeFromJSON_1.nodeFromJSON(data);\n            events = this.serverSyncTree_.applyServerOverwrite(path, snap);\n        }\n        var affectedPath = path;\n        if (events.length > 0) {\n            // Since we have a listener outstanding for each transaction, receiving any events\n            // is a proxy for some change having occurred.\n            affectedPath = this.rerunTransactions_(path);\n        }\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, events);\n    };\n    /**\n     * TODO: This should be @private but it's used by test_access.js and internal.js\n     * @param {?function(!string, *):*} callback\n     * @private\n     */\n    Repo.prototype.interceptServerData_ = function (callback) {\n        this.interceptServerDataCallback_ = callback;\n    };\n    /**\n     * @param {!boolean} connectStatus\n     * @private\n     */\n    Repo.prototype.onConnectStatus_ = function (connectStatus) {\n        this.updateInfo_('connected', connectStatus);\n        if (connectStatus === false) {\n            this.runOnDisconnectEvents_();\n        }\n    };\n    /**\n     * @param {!Object} updates\n     * @private\n     */\n    Repo.prototype.onServerInfoUpdate_ = function (updates) {\n        var _this = this;\n        util_2.each(updates, function (value, key) {\n            _this.updateInfo_(key, value);\n        });\n    };\n    /**\n     *\n     * @param {!string} pathString\n     * @param {*} value\n     * @private\n     */\n    Repo.prototype.updateInfo_ = function (pathString, value) {\n        var path = new Path_1.Path('/.info/' + pathString);\n        var newNode = nodeFromJSON_1.nodeFromJSON(value);\n        this.infoData_.updateSnapshot(path, newNode);\n        var events = this.infoSyncTree_.applyServerOverwrite(path, newNode);\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n    };\n    /**\n     * @return {!number}\n     * @private\n     */\n    Repo.prototype.getNextWriteId_ = function () {\n        return this.nextWriteId_++;\n    };\n    /**\n     * @param {!Path} path\n     * @param {*} newVal\n     * @param {number|string|null} newPriority\n     * @param {?function(?Error, *=)} onComplete\n     */\n    Repo.prototype.setWithPriority = function (path, newVal, newPriority, onComplete) {\n        var _this = this;\n        this.log_('set', {\n            path: path.toString(),\n            value: newVal,\n            priority: newPriority\n        });\n        // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n        // (b) store unresolved paths on JSON parse\n        var serverValues = this.generateServerValues();\n        var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, newPriority);\n        var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n        var writeId = this.getNextWriteId_();\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, writeId, true);\n        this.eventQueue_.queueEvents(events);\n        this.server_.put(path.toString(), newNodeUnresolved.val(/*export=*/ true), function (status, errorReason) {\n            var success = status === 'ok';\n            if (!success) {\n                util_2.warn('set at ' + path + ' failed: ' + status);\n            }\n            var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId, !success);\n            _this.eventQueue_.raiseEventsForChangedPath(path, clearEvents);\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n        var affectedPath = this.abortTransactions_(path);\n        this.rerunTransactions_(affectedPath);\n        // We queued the events above, so just flush the queue here\n        this.eventQueue_.raiseEventsForChangedPath(affectedPath, []);\n    };\n    /**\n     * @param {!Path} path\n     * @param {!Object} childrenToMerge\n     * @param {?function(?Error, *=)} onComplete\n     */\n    Repo.prototype.update = function (path, childrenToMerge, onComplete) {\n        var _this = this;\n        this.log_('update', { path: path.toString(), value: childrenToMerge });\n        // Start with our existing data and merge each child into it.\n        var empty = true;\n        var serverValues = this.generateServerValues();\n        var changedChildren = {};\n        util_3.forEach(childrenToMerge, function (changedKey, changedValue) {\n            empty = false;\n            var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(changedValue);\n            changedChildren[changedKey] = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n        });\n        if (!empty) {\n            var writeId_1 = this.getNextWriteId_();\n            var events = this.serverSyncTree_.applyUserMerge(path, changedChildren, writeId_1);\n            this.eventQueue_.queueEvents(events);\n            this.server_.merge(path.toString(), childrenToMerge, function (status, errorReason) {\n                var success = status === 'ok';\n                if (!success) {\n                    util_2.warn('update at ' + path + ' failed: ' + status);\n                }\n                var clearEvents = _this.serverSyncTree_.ackUserWrite(writeId_1, !success);\n                var affectedPath = clearEvents.length > 0 ? _this.rerunTransactions_(path) : path;\n                _this.eventQueue_.raiseEventsForChangedPath(affectedPath, clearEvents);\n                _this.callOnCompleteCallback(onComplete, status, errorReason);\n            });\n            util_3.forEach(childrenToMerge, function (changedPath) {\n                var affectedPath = _this.abortTransactions_(path.child(changedPath));\n                _this.rerunTransactions_(affectedPath);\n            });\n            // We queued the events above, so just flush the queue here\n            this.eventQueue_.raiseEventsForChangedPath(path, []);\n        }\n        else {\n            util_2.log(\"update() called with empty data.  Don't do anything.\");\n            this.callOnCompleteCallback(onComplete, 'ok');\n        }\n    };\n    /**\n     * Applies all of the changes stored up in the onDisconnect_ tree.\n     * @private\n     */\n    Repo.prototype.runOnDisconnectEvents_ = function () {\n        var _this = this;\n        this.log_('onDisconnectEvents');\n        var serverValues = this.generateServerValues();\n        var resolvedOnDisconnectTree = ServerValues_1.resolveDeferredValueTree(this.onDisconnect_, serverValues);\n        var events = [];\n        resolvedOnDisconnectTree.forEachTree(Path_1.Path.Empty, function (path, snap) {\n            events = events.concat(_this.serverSyncTree_.applyServerOverwrite(path, snap));\n            var affectedPath = _this.abortTransactions_(path);\n            _this.rerunTransactions_(affectedPath);\n        });\n        this.onDisconnect_ = new SparseSnapshotTree_1.SparseSnapshotTree();\n        this.eventQueue_.raiseEventsForChangedPath(Path_1.Path.Empty, events);\n    };\n    /**\n     * @param {!Path} path\n     * @param {?function(?Error, *=)} onComplete\n     */\n    Repo.prototype.onDisconnectCancel = function (path, onComplete) {\n        var _this = this;\n        this.server_.onDisconnectCancel(path.toString(), function (status, errorReason) {\n            if (status === 'ok') {\n                _this.onDisconnect_.forget(path);\n            }\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n    };\n    /**\n     * @param {!Path} path\n     * @param {*} value\n     * @param {?function(?Error, *=)} onComplete\n     */\n    Repo.prototype.onDisconnectSet = function (path, value, onComplete) {\n        var _this = this;\n        var newNode = nodeFromJSON_1.nodeFromJSON(value);\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\n            if (status === 'ok') {\n                _this.onDisconnect_.remember(path, newNode);\n            }\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n    };\n    /**\n     * @param {!Path} path\n     * @param {*} value\n     * @param {*} priority\n     * @param {?function(?Error, *=)} onComplete\n     */\n    Repo.prototype.onDisconnectSetWithPriority = function (path, value, priority, onComplete) {\n        var _this = this;\n        var newNode = nodeFromJSON_1.nodeFromJSON(value, priority);\n        this.server_.onDisconnectPut(path.toString(), newNode.val(/*export=*/ true), function (status, errorReason) {\n            if (status === 'ok') {\n                _this.onDisconnect_.remember(path, newNode);\n            }\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n    };\n    /**\n     * @param {!Path} path\n     * @param {*} childrenToMerge\n     * @param {?function(?Error, *=)} onComplete\n     */\n    Repo.prototype.onDisconnectUpdate = function (path, childrenToMerge, onComplete) {\n        var _this = this;\n        if (util_3.isEmpty(childrenToMerge)) {\n            util_2.log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n            this.callOnCompleteCallback(onComplete, 'ok');\n            return;\n        }\n        this.server_.onDisconnectMerge(path.toString(), childrenToMerge, function (status, errorReason) {\n            if (status === 'ok') {\n                util_3.forEach(childrenToMerge, function (childName, childNode) {\n                    var newChildNode = nodeFromJSON_1.nodeFromJSON(childNode);\n                    _this.onDisconnect_.remember(path.child(childName), newChildNode);\n                });\n            }\n            _this.callOnCompleteCallback(onComplete, status, errorReason);\n        });\n    };\n    /**\n     * @param {!Query} query\n     * @param {!EventRegistration} eventRegistration\n     */\n    Repo.prototype.addEventCallbackForQuery = function (query, eventRegistration) {\n        var events;\n        if (query.path.getFront() === '.info') {\n            events = this.infoSyncTree_.addEventRegistration(query, eventRegistration);\n        }\n        else {\n            events = this.serverSyncTree_.addEventRegistration(query, eventRegistration);\n        }\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\n    };\n    /**\n     * @param {!Query} query\n     * @param {?EventRegistration} eventRegistration\n     */\n    Repo.prototype.removeEventCallbackForQuery = function (query, eventRegistration) {\n        // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n        // a little bit by handling the return values anyways.\n        var events;\n        if (query.path.getFront() === '.info') {\n            events = this.infoSyncTree_.removeEventRegistration(query, eventRegistration);\n        }\n        else {\n            events = this.serverSyncTree_.removeEventRegistration(query, eventRegistration);\n        }\n        this.eventQueue_.raiseEventsAtPath(query.path, events);\n    };\n    Repo.prototype.interrupt = function () {\n        if (this.persistentConnection_) {\n            this.persistentConnection_.interrupt(INTERRUPT_REASON);\n        }\n    };\n    Repo.prototype.resume = function () {\n        if (this.persistentConnection_) {\n            this.persistentConnection_.resume(INTERRUPT_REASON);\n        }\n    };\n    Repo.prototype.stats = function (showDelta) {\n        if (showDelta === void 0) { showDelta = false; }\n        if (typeof console === 'undefined')\n            return;\n        var stats;\n        if (showDelta) {\n            if (!this.statsListener_)\n                this.statsListener_ = new StatsListener_1.StatsListener(this.stats_);\n            stats = this.statsListener_.get();\n        }\n        else {\n            stats = this.stats_.get();\n        }\n        var longestName = Object.keys(stats).reduce(function (previousValue, currentValue) {\n            return Math.max(currentValue.length, previousValue);\n        }, 0);\n        util_3.forEach(stats, function (stat, value) {\n            // pad stat names to be the same length (plus 2 extra spaces).\n            for (var i = stat.length; i < longestName + 2; i++)\n                stat += ' ';\n            console.log(stat + value);\n        });\n    };\n    Repo.prototype.statsIncrementCounter = function (metric) {\n        this.stats_.incrementCounter(metric);\n        this.statsReporter_.includeStat(metric);\n    };\n    /**\n     * @param {...*} var_args\n     * @private\n     */\n    Repo.prototype.log_ = function () {\n        var var_args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            var_args[_i] = arguments[_i];\n        }\n        var prefix = '';\n        if (this.persistentConnection_) {\n            prefix = this.persistentConnection_.id + ':';\n        }\n        util_2.log.apply(void 0, [prefix].concat(var_args));\n    };\n    /**\n     * @param {?function(?Error, *=)} callback\n     * @param {!string} status\n     * @param {?string=} errorReason\n     */\n    Repo.prototype.callOnCompleteCallback = function (callback, status, errorReason) {\n        if (callback) {\n            util_2.exceptionGuard(function () {\n                if (status == 'ok') {\n                    callback(null);\n                }\n                else {\n                    var code = (status || 'error').toUpperCase();\n                    var message = code;\n                    if (errorReason)\n                        message += ': ' + errorReason;\n                    var error = new Error(message);\n                    error.code = code;\n                    callback(error);\n                }\n            });\n        }\n    };\n    Object.defineProperty(Repo.prototype, \"database\", {\n        get: function () {\n            return this.__database || (this.__database = new Database_1.Database(this));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Repo;\n}());\nexports.Repo = Repo;\n\n//# sourceMappingURL=Repo.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * An iterator over an LLRBNode.\n */\nvar SortedMapIterator = /** @class */ (function () {\n    /**\n     * @template K, V, T\n     * @param {LLRBNode|LLRBEmptyNode} node Node to iterate.\n     * @param {?K} startKey\n     * @param {function(K, K): number} comparator\n     * @param {boolean} isReverse_ Whether or not to iterate in reverse\n     * @param {(function(K, V):T)=} resultGenerator_\n     */\n    function SortedMapIterator(node, startKey, comparator, isReverse_, resultGenerator_) {\n        if (resultGenerator_ === void 0) { resultGenerator_ = null; }\n        this.isReverse_ = isReverse_;\n        this.resultGenerator_ = resultGenerator_;\n        /** @private\n         * @type {Array.<!LLRBNode>}\n         */\n        this.nodeStack_ = [];\n        var cmp = 1;\n        while (!node.isEmpty()) {\n            node = node;\n            cmp = startKey ? comparator(node.key, startKey) : 1;\n            // flip the comparison if we're going in reverse\n            if (isReverse_)\n                cmp *= -1;\n            if (cmp < 0) {\n                // This node is less than our start key. ignore it\n                if (this.isReverse_) {\n                    node = node.left;\n                }\n                else {\n                    node = node.right;\n                }\n            }\n            else if (cmp === 0) {\n                // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n                this.nodeStack_.push(node);\n                break;\n            }\n            else {\n                // This node is greater than our start key, add it to the stack and move to the next one\n                this.nodeStack_.push(node);\n                if (this.isReverse_) {\n                    node = node.right;\n                }\n                else {\n                    node = node.left;\n                }\n            }\n        }\n    }\n    SortedMapIterator.prototype.getNext = function () {\n        if (this.nodeStack_.length === 0)\n            return null;\n        var node = this.nodeStack_.pop();\n        var result;\n        if (this.resultGenerator_)\n            result = this.resultGenerator_(node.key, node.value);\n        else\n            result = { key: node.key, value: node.value };\n        if (this.isReverse_) {\n            node = node.left;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.right;\n            }\n        }\n        else {\n            node = node.right;\n            while (!node.isEmpty()) {\n                this.nodeStack_.push(node);\n                node = node.left;\n            }\n        }\n        return result;\n    };\n    SortedMapIterator.prototype.hasNext = function () {\n        return this.nodeStack_.length > 0;\n    };\n    SortedMapIterator.prototype.peek = function () {\n        if (this.nodeStack_.length === 0)\n            return null;\n        var node = this.nodeStack_[this.nodeStack_.length - 1];\n        if (this.resultGenerator_) {\n            return this.resultGenerator_(node.key, node.value);\n        }\n        else {\n            return { key: node.key, value: node.value };\n        }\n    };\n    return SortedMapIterator;\n}());\nexports.SortedMapIterator = SortedMapIterator;\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nvar LLRBNode = /** @class */ (function () {\n    /**\n     * @template K, V\n     * @param {!K} key Key associated with this node.\n     * @param {!V} value Value associated with this node.\n     * @param {?boolean} color Whether this node is red.\n     * @param {?(LLRBNode|LLRBEmptyNode)=} left Left child.\n     * @param {?(LLRBNode|LLRBEmptyNode)=} right Right child.\n     */\n    function LLRBNode(key, value, color, left, right) {\n        this.key = key;\n        this.value = value;\n        this.color = color != null ? color : LLRBNode.RED;\n        this.left =\n            left != null ? left : SortedMap.EMPTY_NODE;\n        this.right =\n            right != null ? right : SortedMap.EMPTY_NODE;\n    }\n    /**\n     * Returns a copy of the current node, optionally replacing pieces of it.\n     *\n     * @param {?K} key New key for the node, or null.\n     * @param {?V} value New value for the node, or null.\n     * @param {?boolean} color New color for the node, or null.\n     * @param {?LLRBNode|LLRBEmptyNode} left New left child for the node, or null.\n     * @param {?LLRBNode|LLRBEmptyNode} right New right child for the node, or null.\n     * @return {!LLRBNode} The node copy.\n     */\n    LLRBNode.prototype.copy = function (key, value, color, left, right) {\n        return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n    };\n    /**\n     * @return {number} The total number of nodes in the tree.\n     */\n    LLRBNode.prototype.count = function () {\n        return this.left.count() + 1 + this.right.count();\n    };\n    /**\n     * @return {boolean} True if the tree is empty.\n     */\n    LLRBNode.prototype.isEmpty = function () {\n        return false;\n    };\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param {function(!K, !V):*} action Callback function to be called for each\n     *   node.  If it returns true, traversal is aborted.\n     * @return {*} The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    LLRBNode.prototype.inorderTraversal = function (action) {\n        return (this.left.inorderTraversal(action) ||\n            action(this.key, this.value) ||\n            this.right.inorderTraversal(action));\n    };\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param {function(!Object, !Object)} action Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @return {*} True if traversal was aborted.\n     */\n    LLRBNode.prototype.reverseTraversal = function (action) {\n        return (this.right.reverseTraversal(action) ||\n            action(this.key, this.value) ||\n            this.left.reverseTraversal(action));\n    };\n    /**\n     * @return {!Object} The minimum node in the tree.\n     * @private\n     */\n    LLRBNode.prototype.min_ = function () {\n        if (this.left.isEmpty()) {\n            return this;\n        }\n        else {\n            return this.left.min_();\n        }\n    };\n    /**\n     * @return {!K} The maximum key in the tree.\n     */\n    LLRBNode.prototype.minKey = function () {\n        return this.min_().key;\n    };\n    /**\n     * @return {!K} The maximum key in the tree.\n     */\n    LLRBNode.prototype.maxKey = function () {\n        if (this.right.isEmpty()) {\n            return this.key;\n        }\n        else {\n            return this.right.maxKey();\n        }\n    };\n    /**\n     *\n     * @param {!Object} key Key to insert.\n     * @param {!Object} value Value to insert.\n     * @param {Comparator} comparator Comparator.\n     * @return {!LLRBNode} New tree, with the key/value added.\n     */\n    LLRBNode.prototype.insert = function (key, value, comparator) {\n        var cmp, n;\n        n = this;\n        cmp = comparator(key, n.key);\n        if (cmp < 0) {\n            n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n        }\n        else if (cmp === 0) {\n            n = n.copy(null, value, null, null, null);\n        }\n        else {\n            n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n        }\n        return n.fixUp_();\n    };\n    /**\n     * @private\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the minimum key removed.\n     */\n    LLRBNode.prototype.removeMin_ = function () {\n        if (this.left.isEmpty()) {\n            return SortedMap.EMPTY_NODE;\n        }\n        var n = this;\n        if (!n.left.isRed_() && !n.left.left.isRed_())\n            n = n.moveRedLeft_();\n        n = n.copy(null, null, null, n.left.removeMin_(), null);\n        return n.fixUp_();\n    };\n    /**\n     * @param {!Object} key The key of the item to remove.\n     * @param {Comparator} comparator Comparator.\n     * @return {!LLRBNode|LLRBEmptyNode} New tree, with the specified item removed.\n     */\n    LLRBNode.prototype.remove = function (key, comparator) {\n        var n, smallest;\n        n = this;\n        if (comparator(key, n.key) < 0) {\n            if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n                n = n.moveRedLeft_();\n            }\n            n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n        }\n        else {\n            if (n.left.isRed_())\n                n = n.rotateRight_();\n            if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n                n = n.moveRedRight_();\n            }\n            if (comparator(key, n.key) === 0) {\n                if (n.right.isEmpty()) {\n                    return SortedMap.EMPTY_NODE;\n                }\n                else {\n                    smallest = n.right.min_();\n                    n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());\n                }\n            }\n            n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n        }\n        return n.fixUp_();\n    };\n    /**\n     * @private\n     * @return {boolean} Whether this is a RED node.\n     */\n    LLRBNode.prototype.isRed_ = function () {\n        return this.color;\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree after performing any needed rotations.\n     */\n    LLRBNode.prototype.fixUp_ = function () {\n        var n = this;\n        if (n.right.isRed_() && !n.left.isRed_())\n            n = n.rotateLeft_();\n        if (n.left.isRed_() && n.left.left.isRed_())\n            n = n.rotateRight_();\n        if (n.left.isRed_() && n.right.isRed_())\n            n = n.colorFlip_();\n        return n;\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after moveRedLeft.\n     */\n    LLRBNode.prototype.moveRedLeft_ = function () {\n        var n = this.colorFlip_();\n        if (n.right.left.isRed_()) {\n            n = n.copy(null, null, null, null, n.right.rotateRight_());\n            n = n.rotateLeft_();\n            n = n.colorFlip_();\n        }\n        return n;\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after moveRedRight.\n     */\n    LLRBNode.prototype.moveRedRight_ = function () {\n        var n = this.colorFlip_();\n        if (n.left.left.isRed_()) {\n            n = n.rotateRight_();\n            n = n.colorFlip_();\n        }\n        return n;\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after rotateLeft.\n     */\n    LLRBNode.prototype.rotateLeft_ = function () {\n        var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, nl, null);\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after rotateRight.\n     */\n    LLRBNode.prototype.rotateRight_ = function () {\n        var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, nr);\n    };\n    /**\n     * @private\n     * @return {!LLRBNode} New tree, after colorFlip.\n     */\n    LLRBNode.prototype.colorFlip_ = function () {\n        var left = this.left.copy(null, null, !this.left.color, null, null);\n        var right = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, left, right);\n    };\n    /**\n     * For testing.\n     *\n     * @private\n     * @return {boolean} True if all is well.\n     */\n    LLRBNode.prototype.checkMaxDepth_ = function () {\n        var blackDepth = this.check_();\n        return Math.pow(2.0, blackDepth) <= this.count() + 1;\n    };\n    /**\n     * @private\n     * @return {number} Not sure what this returns exactly. :-).\n     */\n    LLRBNode.prototype.check_ = function () {\n        var blackDepth;\n        if (this.isRed_() && this.left.isRed_()) {\n            throw new Error('Red node has red child(' + this.key + ',' + this.value + ')');\n        }\n        if (this.right.isRed_()) {\n            throw new Error('Right child of (' + this.key + ',' + this.value + ') is red');\n        }\n        blackDepth = this.left.check_();\n        if (blackDepth !== this.right.check_()) {\n            throw new Error('Black depths differ');\n        }\n        else {\n            return blackDepth + (this.isRed_() ? 0 : 1);\n        }\n    };\n    LLRBNode.RED = true;\n    LLRBNode.BLACK = false;\n    return LLRBNode;\n}());\nexports.LLRBNode = LLRBNode;\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nvar LLRBEmptyNode = /** @class */ (function () {\n    function LLRBEmptyNode() {\n    }\n    /**\n     * Returns a copy of the current node.\n     *\n     * @return {!LLRBEmptyNode} The node copy.\n     */\n    LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {\n        return this;\n    };\n    /**\n     * Returns a copy of the tree, with the specified key/value added.\n     *\n     * @param {!K} key Key to be added.\n     * @param {!V} value Value to be added.\n     * @param {Comparator} comparator Comparator.\n     * @return {!LLRBNode} New tree, with item added.\n     */\n    LLRBEmptyNode.prototype.insert = function (key, value, comparator) {\n        return new LLRBNode(key, value, null);\n    };\n    /**\n     * Returns a copy of the tree, with the specified key removed.\n     *\n     * @param {!K} key The key to remove.\n     * @param {Comparator} comparator Comparator.\n     * @return {!LLRBEmptyNode} New tree, with item removed.\n     */\n    LLRBEmptyNode.prototype.remove = function (key, comparator) {\n        return this;\n    };\n    /**\n     * @return {number} The total number of nodes in the tree.\n     */\n    LLRBEmptyNode.prototype.count = function () {\n        return 0;\n    };\n    /**\n     * @return {boolean} True if the tree is empty.\n     */\n    LLRBEmptyNode.prototype.isEmpty = function () {\n        return true;\n    };\n    /**\n     * Traverses the tree in key order and calls the specified action function\n     * for each node.\n     *\n     * @param {function(!K, !V):*} action Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @return {boolean} True if traversal was aborted.\n     */\n    LLRBEmptyNode.prototype.inorderTraversal = function (action) {\n        return false;\n    };\n    /**\n     * Traverses the tree in reverse key order and calls the specified action function\n     * for each node.\n     *\n     * @param {function(!K, !V)} action Callback function to be called for each\n     * node.  If it returns true, traversal is aborted.\n     * @return {boolean} True if traversal was aborted.\n     */\n    LLRBEmptyNode.prototype.reverseTraversal = function (action) {\n        return false;\n    };\n    /**\n     * @return {null}\n     */\n    LLRBEmptyNode.prototype.minKey = function () {\n        return null;\n    };\n    /**\n     * @return {null}\n     */\n    LLRBEmptyNode.prototype.maxKey = function () {\n        return null;\n    };\n    /**\n     * @private\n     * @return {number} Not sure what this returns exactly. :-).\n     */\n    LLRBEmptyNode.prototype.check_ = function () {\n        return 0;\n    };\n    /**\n     * @private\n     * @return {boolean} Whether this node is red.\n     */\n    LLRBEmptyNode.prototype.isRed_ = function () {\n        return false;\n    };\n    return LLRBEmptyNode;\n}());\nexports.LLRBEmptyNode = LLRBEmptyNode;\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nvar SortedMap = /** @class */ (function () {\n    /**\n     * @template K, V\n     * @param {function(K, K):number} comparator_ Key comparator.\n     * @param {LLRBNode=} root_ (Optional) Root node for the map.\n     */\n    function SortedMap(comparator_, root_) {\n        if (root_ === void 0) { root_ = SortedMap.EMPTY_NODE; }\n        this.comparator_ = comparator_;\n        this.root_ = root_;\n    }\n    /**\n     * Returns a copy of the map, with the specified key/value added or replaced.\n     * (TODO: We should perhaps rename this method to 'put')\n     *\n     * @param {!K} key Key to be added.\n     * @param {!V} value Value to be added.\n     * @return {!SortedMap.<K, V>} New map, with item added.\n     */\n    SortedMap.prototype.insert = function (key, value) {\n        return new SortedMap(this.comparator_, this.root_\n            .insert(key, value, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    /**\n     * Returns a copy of the map, with the specified key removed.\n     *\n     * @param {!K} key The key to remove.\n     * @return {!SortedMap.<K, V>} New map, with item removed.\n     */\n    SortedMap.prototype.remove = function (key) {\n        return new SortedMap(this.comparator_, this.root_\n            .remove(key, this.comparator_)\n            .copy(null, null, LLRBNode.BLACK, null, null));\n    };\n    /**\n     * Returns the value of the node with the given key, or null.\n     *\n     * @param {!K} key The key to look up.\n     * @return {?V} The value of the node with the given key, or null if the\n     * key doesn't exist.\n     */\n    SortedMap.prototype.get = function (key) {\n        var cmp;\n        var node = this.root_;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                return node.value;\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                node = node.right;\n            }\n        }\n        return null;\n    };\n    /**\n     * Returns the key of the item *before* the specified key, or null if key is the first item.\n     * @param {K} key The key to find the predecessor of\n     * @return {?K} The predecessor key.\n     */\n    SortedMap.prototype.getPredecessorKey = function (key) {\n        var cmp, node = this.root_, rightParent = null;\n        while (!node.isEmpty()) {\n            cmp = this.comparator_(key, node.key);\n            if (cmp === 0) {\n                if (!node.left.isEmpty()) {\n                    node = node.left;\n                    while (!node.right.isEmpty())\n                        node = node.right;\n                    return node.key;\n                }\n                else if (rightParent) {\n                    return rightParent.key;\n                }\n                else {\n                    return null; // first item.\n                }\n            }\n            else if (cmp < 0) {\n                node = node.left;\n            }\n            else if (cmp > 0) {\n                rightParent = node;\n                node = node.right;\n            }\n        }\n        throw new Error('Attempted to find predecessor key for a nonexistent key.  What gives?');\n    };\n    /**\n     * @return {boolean} True if the map is empty.\n     */\n    SortedMap.prototype.isEmpty = function () {\n        return this.root_.isEmpty();\n    };\n    /**\n     * @return {number} The total number of nodes in the map.\n     */\n    SortedMap.prototype.count = function () {\n        return this.root_.count();\n    };\n    /**\n     * @return {?K} The minimum key in the map.\n     */\n    SortedMap.prototype.minKey = function () {\n        return this.root_.minKey();\n    };\n    /**\n     * @return {?K} The maximum key in the map.\n     */\n    SortedMap.prototype.maxKey = function () {\n        return this.root_.maxKey();\n    };\n    /**\n     * Traverses the map in key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param {function(!K, !V):*} action Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @return {*} The first truthy value returned by action, or the last falsey\n     *   value returned by action\n     */\n    SortedMap.prototype.inorderTraversal = function (action) {\n        return this.root_.inorderTraversal(action);\n    };\n    /**\n     * Traverses the map in reverse key order and calls the specified action function\n     * for each key/value pair.\n     *\n     * @param {function(!Object, !Object)} action Callback function to be called\n     * for each key/value pair.  If action returns true, traversal is aborted.\n     * @return {*} True if the traversal was aborted.\n     */\n    SortedMap.prototype.reverseTraversal = function (action) {\n        return this.root_.reverseTraversal(action);\n    };\n    /**\n     * Returns an iterator over the SortedMap.\n     * @template T\n     * @param {(function(K, V):T)=} resultGenerator\n     * @return {SortedMapIterator.<K, V, T>} The iterator.\n     */\n    SortedMap.prototype.getIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);\n    };\n    SortedMap.prototype.getIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIteratorFrom = function (key, resultGenerator) {\n        return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);\n    };\n    SortedMap.prototype.getReverseIterator = function (resultGenerator) {\n        return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);\n    };\n    /**\n     * Always use the same empty node, to reduce memory.\n     * @const\n     */\n    SortedMap.EMPTY_NODE = new LLRBEmptyNode();\n    return SortedMap;\n}());\nexports.SortedMap = SortedMap;\n\n//# sourceMappingURL=SortedMap.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar snap_1 = require(\"./snap\");\nvar __childrenNodeConstructor;\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nvar LeafNode = /** @class */ (function () {\n    /**\n     * @implements {Node}\n     * @param {!(string|number|boolean|Object)} value_ The value to store in this leaf node.\n     *                                         The object type is possible in the event of a deferred value\n     * @param {!Node=} priorityNode_ The priority of this node.\n     */\n    function LeafNode(value_, priorityNode_) {\n        if (priorityNode_ === void 0) { priorityNode_ = LeafNode.__childrenNodeConstructor.EMPTY_NODE; }\n        this.value_ = value_;\n        this.priorityNode_ = priorityNode_;\n        this.lazyHash_ = null;\n        util_1.assert(this.value_ !== undefined && this.value_ !== null, \"LeafNode shouldn't be created with null/undefined value.\");\n        snap_1.validatePriorityNode(this.priorityNode_);\n    }\n    Object.defineProperty(LeafNode, \"__childrenNodeConstructor\", {\n        get: function () {\n            return __childrenNodeConstructor;\n        },\n        set: function (val) {\n            __childrenNodeConstructor = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @inheritDoc */\n    LeafNode.prototype.isLeafNode = function () {\n        return true;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getPriority = function () {\n        return this.priorityNode_;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updatePriority = function (newPriorityNode) {\n        return new LeafNode(this.value_, newPriorityNode);\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getImmediateChild = function (childName) {\n        // Hack to treat priority as a regular child\n        if (childName === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getChild = function (path) {\n        if (path.isEmpty()) {\n            return this;\n        }\n        else if (path.getFront() === '.priority') {\n            return this.priorityNode_;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.hasChild = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.getPredecessorChildName = function (childName, childNode) {\n        return null;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updateImmediateChild = function (childName, newChildNode) {\n        if (childName === '.priority') {\n            return this.updatePriority(newChildNode);\n        }\n        else if (newChildNode.isEmpty() && childName !== '.priority') {\n            return this;\n        }\n        else {\n            return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.updateChild = function (path, newChildNode) {\n        var front = path.getFront();\n        if (front === null) {\n            return newChildNode;\n        }\n        else if (newChildNode.isEmpty() && front !== '.priority') {\n            return this;\n        }\n        else {\n            util_1.assert(front !== '.priority' || path.getLength() === 1, '.priority must be the last token in a path');\n            return this.updateImmediateChild(front, LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(path.popFront(), newChildNode));\n        }\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.isEmpty = function () {\n        return false;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.numChildren = function () {\n        return 0;\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.forEachChild = function (index, action) {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.val = function (exportFormat) {\n        if (exportFormat && !this.getPriority().isEmpty())\n            return {\n                '.value': this.getValue(),\n                '.priority': this.getPriority().val()\n            };\n        else\n            return this.getValue();\n    };\n    /** @inheritDoc */\n    LeafNode.prototype.hash = function () {\n        if (this.lazyHash_ === null) {\n            var toHash = '';\n            if (!this.priorityNode_.isEmpty())\n                toHash +=\n                    'priority:' +\n                        snap_1.priorityHashText(this.priorityNode_.val()) +\n                        ':';\n            var type = typeof this.value_;\n            toHash += type + ':';\n            if (type === 'number') {\n                toHash += util_2.doubleToIEEE754String(this.value_);\n            }\n            else {\n                toHash += this.value_;\n            }\n            this.lazyHash_ = util_2.sha1(toHash);\n        }\n        return this.lazyHash_;\n    };\n    /**\n     * Returns the value of the leaf node.\n     * @return {Object|string|number|boolean} The value of the node.\n     */\n    LeafNode.prototype.getValue = function () {\n        return this.value_;\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.compareTo = function (other) {\n        if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n            return 1;\n        }\n        else if (other instanceof LeafNode.__childrenNodeConstructor) {\n            return -1;\n        }\n        else {\n            util_1.assert(other.isLeafNode(), 'Unknown node type');\n            return this.compareToLeafNode_(other);\n        }\n    };\n    /**\n     * Comparison specifically for two leaf nodes\n     * @param {!LeafNode} otherLeaf\n     * @return {!number}\n     * @private\n     */\n    LeafNode.prototype.compareToLeafNode_ = function (otherLeaf) {\n        var otherLeafType = typeof otherLeaf.value_;\n        var thisLeafType = typeof this.value_;\n        var otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n        var thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n        util_1.assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n        util_1.assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n        if (otherIndex === thisIndex) {\n            // Same type, compare values\n            if (thisLeafType === 'object') {\n                // Deferred value nodes are all equal, but we should also never get to this point...\n                return 0;\n            }\n            else {\n                // Note that this works because true > false, all others are number or string comparisons\n                if (this.value_ < otherLeaf.value_) {\n                    return -1;\n                }\n                else if (this.value_ === otherLeaf.value_) {\n                    return 0;\n                }\n                else {\n                    return 1;\n                }\n            }\n        }\n        else {\n            return thisIndex - otherIndex;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.withIndex = function () {\n        return this;\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.isIndexed = function () {\n        return true;\n    };\n    /**\n     * @inheritDoc\n     */\n    LeafNode.prototype.equals = function (other) {\n        /**\n         * @inheritDoc\n         */\n        if (other === this) {\n            return true;\n        }\n        else if (other.isLeafNode()) {\n            var otherLeaf = other;\n            return (this.value_ === otherLeaf.value_ &&\n                this.priorityNode_.equals(otherLeaf.priorityNode_));\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n     * the same type, the comparison falls back to their value\n     * @type {Array.<!string>}\n     * @const\n     */\n    LeafNode.VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n    return LeafNode;\n}());\nexports.LeafNode = LeafNode;\n\n//# sourceMappingURL=LeafNode.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node_1 = require(\"../Node\");\nvar util_1 = require(\"../../util/util\");\n/**\n *\n * @constructor\n */\nvar Index = /** @class */ (function () {\n    function Index() {\n    }\n    /**\n     * @return {function(!NamedNode, !NamedNode):number} A standalone comparison function for\n     * this index\n     */\n    Index.prototype.getCompare = function () {\n        return this.compare.bind(this);\n    };\n    /**\n     * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n     * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n     *\n     * @param {!Node} oldNode\n     * @param {!Node} newNode\n     * @return {boolean} True if the portion of the snapshot being indexed changed between oldNode and newNode\n     */\n    Index.prototype.indexedValueChanged = function (oldNode, newNode) {\n        var oldWrapped = new Node_1.NamedNode(util_1.MIN_NAME, oldNode);\n        var newWrapped = new Node_1.NamedNode(util_1.MIN_NAME, newNode);\n        return this.compare(oldWrapped, newWrapped) !== 0;\n    };\n    /**\n     * @return {!NamedNode} a node wrapper that will sort equal to or less than\n     * any other node wrapper, using this index\n     */\n    Index.prototype.minPost = function () {\n        return Node_1.NamedNode.MIN;\n    };\n    return Index;\n}());\nexports.Index = Index;\n\n//# sourceMappingURL=Index.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PROTOCOL_VERSION = '5';\nexports.VERSION_PARAM = 'v';\nexports.TRANSPORT_SESSION_PARAM = 's';\nexports.REFERER_PARAM = 'r';\nexports.FORGE_REF = 'f';\nexports.FORGE_DOMAIN = 'firebaseio.com';\nexports.LAST_SESSION_PARAM = 'ls';\nexports.WEBSOCKET = 'websocket';\nexports.LONG_POLLING = 'long_polling';\n\n//# sourceMappingURL=Constants.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DOMStorageWrapper_1 = require(\"./DOMStorageWrapper\");\nvar MemoryStorage_1 = require(\"./MemoryStorage\");\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param {string} domStorageName Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @return {?} Turning off type information until a common interface is defined.\n */\nvar createStoragefor = function (domStorageName) {\n    try {\n        // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n        // so it must be inside the try/catch.\n        if (typeof window !== 'undefined' &&\n            typeof window[domStorageName] !== 'undefined') {\n            // Need to test cache. Just because it's here doesn't mean it works\n            var domStorage = window[domStorageName];\n            domStorage.setItem('firebase:sentinel', 'cache');\n            domStorage.removeItem('firebase:sentinel');\n            return new DOMStorageWrapper_1.DOMStorageWrapper(domStorage);\n        }\n    }\n    catch (e) { }\n    // Failed to create wrapper.  Just return in-memory storage.\n    // TODO: log?\n    return new MemoryStorage_1.MemoryStorage();\n};\n/** A storage object that lasts across sessions */\nexports.PersistentStorage = createStoragefor('localStorage');\n/** A storage object that only lasts one session */\nexports.SessionStorage = createStoragefor('sessionStorage');\n\n//# sourceMappingURL=storage.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Repo_1 = require(\"./Repo\");\nvar util_2 = require(\"./util/util\");\nvar parser_1 = require(\"./util/libs/parser\");\nvar validation_1 = require(\"./util/validation\");\nrequire(\"./Repo_transaction\");\n/** @const {string} */\nvar DATABASE_URL_OPTION = 'databaseURL';\nvar _staticInstance;\n/**\n * Creates and caches Repo instances.\n */\nvar RepoManager = /** @class */ (function () {\n    function RepoManager() {\n        /**\n         * @private {!Object.<string, Object<string, !fb.core.Repo>>}\n         */\n        this.repos_ = {};\n        /**\n         * If true, new Repos will be created to use ReadonlyRestClient (for testing purposes).\n         * @private {boolean}\n         */\n        this.useRestClient_ = false;\n    }\n    RepoManager.getInstance = function () {\n        if (!_staticInstance) {\n            _staticInstance = new RepoManager();\n        }\n        return _staticInstance;\n    };\n    // TODO(koss): Remove these functions unless used in tests?\n    RepoManager.prototype.interrupt = function () {\n        for (var appName in this.repos_) {\n            for (var dbUrl in this.repos_[appName]) {\n                this.repos_[appName][dbUrl].interrupt();\n            }\n        }\n    };\n    RepoManager.prototype.resume = function () {\n        for (var appName in this.repos_) {\n            for (var dbUrl in this.repos_[appName]) {\n                this.repos_[appName][dbUrl].resume();\n            }\n        }\n    };\n    /**\n     * This function should only ever be called to CREATE a new database instance.\n     *\n     * @param {!FirebaseApp} app\n     * @return {!Database}\n     */\n    RepoManager.prototype.databaseFromApp = function (app, url) {\n        var dbUrl = url || app.options[DATABASE_URL_OPTION];\n        if (dbUrl === undefined) {\n            util_2.fatal(\"Can't determine Firebase Database URL.  Be sure to include \" +\n                DATABASE_URL_OPTION +\n                ' option when calling firebase.initializeApp().');\n        }\n        var parsedUrl = parser_1.parseRepoInfo(dbUrl);\n        var repoInfo = parsedUrl.repoInfo;\n        validation_1.validateUrl('Invalid Firebase Database URL', 1, parsedUrl);\n        if (!parsedUrl.path.isEmpty()) {\n            util_2.fatal('Database URL must point to the root of a Firebase Database ' +\n                '(not including a child path).');\n        }\n        var repo = this.createRepo(repoInfo, app);\n        return repo.database;\n    };\n    /**\n     * Remove the repo and make sure it is disconnected.\n     *\n     * @param {!Repo} repo\n     */\n    RepoManager.prototype.deleteRepo = function (repo) {\n        var appRepos = util_1.safeGet(this.repos_, repo.app.name);\n        // This should never happen...\n        if (!appRepos || util_1.safeGet(appRepos, repo.repoInfo_.toURLString()) !== repo) {\n            util_2.fatal(\"Database \" + repo.app.name + \"(\" + repo.repoInfo_ + \") has already been deleted.\");\n        }\n        repo.interrupt();\n        delete appRepos[repo.repoInfo_.toURLString()];\n    };\n    /**\n     * Ensures a repo doesn't already exist and then creates one using the\n     * provided app.\n     *\n     * @param {!RepoInfo} repoInfo The metadata about the Repo\n     * @param {!FirebaseApp} app\n     * @return {!Repo} The Repo object for the specified server / repoName.\n     */\n    RepoManager.prototype.createRepo = function (repoInfo, app) {\n        var appRepos = util_1.safeGet(this.repos_, app.name);\n        if (!appRepos) {\n            appRepos = {};\n            this.repos_[app.name] = appRepos;\n        }\n        var repo = util_1.safeGet(appRepos, repoInfo.toURLString());\n        if (repo) {\n            util_2.fatal('Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.');\n        }\n        repo = new Repo_1.Repo(repoInfo, this.useRestClient_, app);\n        appRepos[repoInfo.toURLString()] = repo;\n        return repo;\n    };\n    /**\n     * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n     * @param {boolean} forceRestClient\n     */\n    RepoManager.prototype.forceRestClient = function (forceRestClient) {\n        this.useRestClient_ = forceRestClient;\n    };\n    return RepoManager;\n}());\nexports.RepoManager = RepoManager;\n\n//# sourceMappingURL=RepoManager.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar StatsCollection_1 = require(\"./StatsCollection\");\nvar StatsManager = /** @class */ (function () {\n    function StatsManager() {\n    }\n    StatsManager.getCollection = function (repoInfo) {\n        var hashString = repoInfo.toString();\n        if (!this.collections_[hashString]) {\n            this.collections_[hashString] = new StatsCollection_1.StatsCollection();\n        }\n        return this.collections_[hashString];\n    };\n    StatsManager.getOrCreateReporter = function (repoInfo, creatorFunction) {\n        var hashString = repoInfo.toString();\n        if (!this.reporters_[hashString]) {\n            this.reporters_[hashString] = creatorFunction();\n        }\n        return this.reporters_[hashString];\n    };\n    StatsManager.collections_ = {};\n    StatsManager.reporters_ = {};\n    return StatsManager;\n}());\nexports.StatsManager = StatsManager;\n\n//# sourceMappingURL=StatsManager.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Change_1 = require(\"../Change\");\nvar ChildrenNode_1 = require(\"../../snap/ChildrenNode\");\nvar PriorityIndex_1 = require(\"../../snap/indexes/PriorityIndex\");\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n *\n * @constructor\n * @implements {NodeFilter}\n * @param {!Index} index\n */\nvar IndexedFilter = /** @class */ (function () {\n    function IndexedFilter(index_) {\n        this.index_ = index_;\n    }\n    IndexedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        util_1.assert(snap.isIndexed(this.index_), 'A node must be indexed if only a child is updated');\n        var oldChild = snap.getImmediateChild(key);\n        // Check if anything actually changed.\n        if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {\n            // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n            // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n            // to avoid treating these cases as \"nothing changed.\"\n            if (oldChild.isEmpty() == newChild.isEmpty()) {\n                // Nothing changed.\n                // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n                //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n                return snap;\n            }\n        }\n        if (optChangeAccumulator != null) {\n            if (newChild.isEmpty()) {\n                if (snap.hasChild(key)) {\n                    optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, oldChild));\n                }\n                else {\n                    util_1.assert(snap.isLeafNode(), 'A child remove without an old child only makes sense on a leaf node');\n                }\n            }\n            else if (oldChild.isEmpty()) {\n                optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, newChild));\n            }\n            else {\n                optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, newChild, oldChild));\n            }\n        }\n        if (snap.isLeafNode() && newChild.isEmpty()) {\n            return snap;\n        }\n        else {\n            // Make sure the node is indexed\n            return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n        if (optChangeAccumulator != null) {\n            if (!oldSnap.isLeafNode()) {\n                oldSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n                    if (!newSnap.hasChild(key)) {\n                        optChangeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(key, childNode));\n                    }\n                });\n            }\n            if (!newSnap.isLeafNode()) {\n                newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n                    if (oldSnap.hasChild(key)) {\n                        var oldChild = oldSnap.getImmediateChild(key);\n                        if (!oldChild.equals(childNode)) {\n                            optChangeAccumulator.trackChildChange(Change_1.Change.childChangedChange(key, childNode, oldChild));\n                        }\n                    }\n                    else {\n                        optChangeAccumulator.trackChildChange(Change_1.Change.childAddedChange(key, childNode));\n                    }\n                });\n            }\n        }\n        return newSnap.withIndex(this.index_);\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n        if (oldSnap.isEmpty()) {\n            return ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        }\n        else {\n            return oldSnap.updatePriority(newPriority);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.filtersNodes = function () {\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.getIndexedFilter = function () {\n        return this;\n    };\n    /**\n     * @inheritDoc\n     */\n    IndexedFilter.prototype.getIndex = function () {\n        return this.index_;\n    };\n    return IndexedFilter;\n}());\nexports.IndexedFilter = IndexedFilter;\n\n//# sourceMappingURL=IndexedFilter.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SortedMap_1 = require(\"./SortedMap\");\nvar Path_1 = require(\"./Path\");\nvar util_1 = require(\"./util\");\nvar util_2 = require(\"@firebase/util\");\nvar emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nvar EmptyChildren = function () {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap_1.SortedMap(util_1.stringCompare);\n    }\n    return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nvar ImmutableTree = /** @class */ (function () {\n    /**\n     * @template T\n     * @param {?T} value\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n     */\n    function ImmutableTree(value, children) {\n        if (children === void 0) { children = EmptyChildren(); }\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * @template T\n     * @param {!Object.<string, !T>} obj\n     * @return {!ImmutableTree.<!T>}\n     */\n    ImmutableTree.fromObject = function (obj) {\n        var tree = ImmutableTree.Empty;\n        util_2.forEach(obj, function (childPath, childSnap) {\n            tree = tree.set(new Path_1.Path(childPath), childSnap);\n        });\n        return tree;\n    };\n    /**\n     * True if the value is empty and there are no children\n     * @return {boolean}\n     */\n    ImmutableTree.prototype.isEmpty = function () {\n        return this.value === null && this.children.isEmpty();\n    };\n    /**\n     * Given a path and predicate, return the first node and the path to that node\n     * where the predicate returns true.\n     *\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n     * on the way back out, it may be better to pass down a pathSoFar obj.\n     *\n     * @param {!Path} relativePath The remainder of the path\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\n     *   node\n     * @return {?{path:!Path, value:!T}}\n     */\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: Path_1.Path.Empty, value: this.value };\n        }\n        else {\n            if (relativePath.isEmpty()) {\n                return null;\n            }\n            else {\n                var front = relativePath.getFront();\n                var child = this.children.get(front);\n                if (child !== null) {\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n                    if (childExistingPathAndValue != null) {\n                        var fullPath = new Path_1.Path(front).child(childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    };\n    /**\n     * Find, if it exists, the shortest subpath of the given path that points a defined\n     * value in the tree\n     * @param {!Path} relativePath\n     * @return {?{path: !Path, value: !T}}\n     */\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\n    };\n    /**\n     * @param {!Path} relativePath\n     * @return {!ImmutableTree.<T>} The subtree at the given path\n     */\n    ImmutableTree.prototype.subtree = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            return this;\n        }\n        else {\n            var front = relativePath.getFront();\n            var childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(relativePath.popFront());\n            }\n            else {\n                return ImmutableTree.Empty;\n            }\n        }\n    };\n    /**\n     * Sets a value at the specified path.\n     *\n     * @param {!Path} relativePath Path to set value at.\n     * @param {?T} toSet Value to set.\n     * @return {!ImmutableTree.<T>} Resulting tree.\n     */\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\n        if (relativePath.isEmpty()) {\n            return new ImmutableTree(toSet, this.children);\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front) || ImmutableTree.Empty;\n            var newChild = child.set(relativePath.popFront(), toSet);\n            var newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    };\n    /**\n     * Removes the value at the specified path.\n     *\n     * @param {!Path} relativePath Path to value to remove.\n     * @return {!ImmutableTree.<T>} Resulting tree.\n     */\n    ImmutableTree.prototype.remove = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            if (this.children.isEmpty()) {\n                return ImmutableTree.Empty;\n            }\n            else {\n                return new ImmutableTree(null, this.children);\n            }\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front);\n            if (child) {\n                var newChild = child.remove(relativePath.popFront());\n                var newChildren = void 0;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                }\n                else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return ImmutableTree.Empty;\n                }\n                else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            }\n            else {\n                return this;\n            }\n        }\n    };\n    /**\n     * Gets a value from the tree.\n     *\n     * @param {!Path} relativePath Path to get value for.\n     * @return {?T} Value at path, or null.\n     */\n    ImmutableTree.prototype.get = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            return this.value;\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front);\n            if (child) {\n                return child.get(relativePath.popFront());\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    /**\n     * Replace the subtree at the specified path with the given new tree.\n     *\n     * @param {!Path} relativePath Path to replace subtree for.\n     * @param {!ImmutableTree} newTree New tree.\n     * @return {!ImmutableTree} Resulting tree.\n     */\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n        if (relativePath.isEmpty()) {\n            return newTree;\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front) || ImmutableTree.Empty;\n            var newChild = child.setTree(relativePath.popFront(), newTree);\n            var newChildren = void 0;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            }\n            else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    };\n    /**\n     * Performs a depth first fold on this tree. Transforms a tree into a single\n     * value, given a function that operates on the path to a node, an optional\n     * current value, and a map of child names to folded subtrees\n     * @template V\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\n     * @return {V}\n     */\n    ImmutableTree.prototype.fold = function (fn) {\n        return this.fold_(Path_1.Path.Empty, fn);\n    };\n    /**\n     * Recursive helper for public-facing fold() method\n     * @template V\n     * @param {!Path} pathSoFar\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\n     * @return {V}\n     * @private\n     */\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n        var accum = {};\n        this.children.inorderTraversal(function (childKey, childTree) {\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    };\n    /**\n     * Find the first matching value on the given path. Return the result of applying f to it.\n     * @template V\n     * @param {!Path} path\n     * @param {!function(!Path, !T):?V} f\n     * @return {?V}\n     */\n    ImmutableTree.prototype.findOnPath = function (path, f) {\n        return this.findOnPath_(path, Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n        var result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        }\n        else {\n            if (pathToFollow.isEmpty()) {\n                return null;\n            }\n            else {\n                var front = pathToFollow.getFront();\n                var nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    };\n    /**\n     *\n     * @param {!Path} path\n     * @param {!function(!Path, !T)} f\n     * @returns {!ImmutableTree.<T>}\n     */\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\n        return this.foreachOnPath_(path, Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n        if (pathToFollow.isEmpty()) {\n            return this;\n        }\n        else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            var front = pathToFollow.getFront();\n            var nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n            }\n            else {\n                return ImmutableTree.Empty;\n            }\n        }\n    };\n    /**\n     * Calls the given function for each node in the tree that has a value.\n     *\n     * @param {function(!Path, !T)} f A function to be called with\n     *   the path from the root of the tree to a node, and the value at that node.\n     *   Called in depth-first order.\n     */\n    ImmutableTree.prototype.foreach = function (f) {\n        this.foreach_(Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n        this.children.inorderTraversal(function (childName, childTree) {\n            childTree.foreach_(currentRelativePath.child(childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    };\n    /**\n     *\n     * @param {function(string, !T)} f\n     */\n    ImmutableTree.prototype.foreachChild = function (f) {\n        this.children.inorderTraversal(function (childName, childTree) {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    };\n    ImmutableTree.Empty = new ImmutableTree(null);\n    return ImmutableTree;\n}());\nexports.ImmutableTree = ImmutableTree;\n\n//# sourceMappingURL=ImmutableTree.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar validation_1 = require(\"../core/util/validation\");\nvar Path_1 = require(\"../core/util/Path\");\nvar PriorityIndex_1 = require(\"../core/snap/indexes/PriorityIndex\");\n/**\n * Class representing a firebase data snapshot.  It wraps a SnapshotNode and\n * surfaces the public methods (val, forEach, etc.) we want to expose.\n */\nvar DataSnapshot = /** @class */ (function () {\n    /**\n     * @param {!Node} node_ A SnapshotNode to wrap.\n     * @param {!Reference} ref_ The ref of the location this snapshot came from.\n     * @param {!Index} index_ The iteration order for this snapshot\n     */\n    function DataSnapshot(node_, ref_, index_) {\n        this.node_ = node_;\n        this.ref_ = ref_;\n        this.index_ = index_;\n    }\n    /**\n     * Retrieves the snapshot contents as JSON.  Returns null if the snapshot is\n     * empty.\n     *\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n     */\n    DataSnapshot.prototype.val = function () {\n        util_1.validateArgCount('DataSnapshot.val', 0, 0, arguments.length);\n        return this.node_.val();\n    };\n    /**\n     * Returns the snapshot contents as JSON, including priorities of node.  Suitable for exporting\n     * the entire node contents.\n     * @return {*} JSON representation of the DataSnapshot contents, or null if empty.\n     */\n    DataSnapshot.prototype.exportVal = function () {\n        util_1.validateArgCount('DataSnapshot.exportVal', 0, 0, arguments.length);\n        return this.node_.val(true);\n    };\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n    // for end-users\n    DataSnapshot.prototype.toJSON = function () {\n        // Optional spacer argument is unnecessary because we're depending on recursion rather than stringifying the content\n        util_1.validateArgCount('DataSnapshot.toJSON', 0, 1, arguments.length);\n        return this.exportVal();\n    };\n    /**\n     * Returns whether the snapshot contains a non-null value.\n     *\n     * @return {boolean} Whether the snapshot contains a non-null value, or is empty.\n     */\n    DataSnapshot.prototype.exists = function () {\n        util_1.validateArgCount('DataSnapshot.exists', 0, 0, arguments.length);\n        return !this.node_.isEmpty();\n    };\n    /**\n     * Returns a DataSnapshot of the specified child node's contents.\n     *\n     * @param {!string} childPathString Path to a child.\n     * @return {!DataSnapshot} DataSnapshot for child node.\n     */\n    DataSnapshot.prototype.child = function (childPathString) {\n        util_1.validateArgCount('DataSnapshot.child', 0, 1, arguments.length);\n        // Ensure the childPath is a string (can be a number)\n        childPathString = String(childPathString);\n        validation_1.validatePathString('DataSnapshot.child', 1, childPathString, false);\n        var childPath = new Path_1.Path(childPathString);\n        var childRef = this.ref_.child(childPath);\n        return new DataSnapshot(this.node_.getChild(childPath), childRef, PriorityIndex_1.PRIORITY_INDEX);\n    };\n    /**\n     * Returns whether the snapshot contains a child at the specified path.\n     *\n     * @param {!string} childPathString Path to a child.\n     * @return {boolean} Whether the child exists.\n     */\n    DataSnapshot.prototype.hasChild = function (childPathString) {\n        util_1.validateArgCount('DataSnapshot.hasChild', 1, 1, arguments.length);\n        validation_1.validatePathString('DataSnapshot.hasChild', 1, childPathString, false);\n        var childPath = new Path_1.Path(childPathString);\n        return !this.node_.getChild(childPath).isEmpty();\n    };\n    /**\n     * Returns the priority of the object, or null if no priority was set.\n     *\n     * @return {string|number|null} The priority.\n     */\n    DataSnapshot.prototype.getPriority = function () {\n        util_1.validateArgCount('DataSnapshot.getPriority', 0, 0, arguments.length);\n        // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n        return this.node_.getPriority().val();\n    };\n    /**\n     * Iterates through child nodes and calls the specified action for each one.\n     *\n     * @param {function(!DataSnapshot)} action Callback function to be called\n     * for each child.\n     * @return {boolean} True if forEach was canceled by action returning true for\n     * one of the child nodes.\n     */\n    DataSnapshot.prototype.forEach = function (action) {\n        var _this = this;\n        util_1.validateArgCount('DataSnapshot.forEach', 1, 1, arguments.length);\n        util_1.validateCallback('DataSnapshot.forEach', 1, action, false);\n        if (this.node_.isLeafNode())\n            return false;\n        var childrenNode = this.node_;\n        // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n        return !!childrenNode.forEachChild(this.index_, function (key, node) {\n            return action(new DataSnapshot(node, _this.ref_.child(key), PriorityIndex_1.PRIORITY_INDEX));\n        });\n    };\n    /**\n     * Returns whether this DataSnapshot has children.\n     * @return {boolean} True if the DataSnapshot contains 1 or more child nodes.\n     */\n    DataSnapshot.prototype.hasChildren = function () {\n        util_1.validateArgCount('DataSnapshot.hasChildren', 0, 0, arguments.length);\n        if (this.node_.isLeafNode())\n            return false;\n        else\n            return !this.node_.isEmpty();\n    };\n    Object.defineProperty(DataSnapshot.prototype, \"key\", {\n        get: function () {\n            return this.ref_.getKey();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the number of children for this DataSnapshot.\n     * @return {number} The number of children that this DataSnapshot contains.\n     */\n    DataSnapshot.prototype.numChildren = function () {\n        util_1.validateArgCount('DataSnapshot.numChildren', 0, 0, arguments.length);\n        return this.node_.numChildren();\n    };\n    /**\n     * @return {Reference} The Firebase reference for the location this snapshot's data came from.\n     */\n    DataSnapshot.prototype.getRef = function () {\n        util_1.validateArgCount('DataSnapshot.ref', 0, 0, arguments.length);\n        return this.ref_;\n    };\n    Object.defineProperty(DataSnapshot.prototype, \"ref\", {\n        get: function () {\n            return this.getRef();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return DataSnapshot;\n}());\nexports.DataSnapshot = DataSnapshot;\n\n//# sourceMappingURL=DataSnapshot.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar onDisconnect_1 = require(\"./onDisconnect\");\nvar TransactionResult_1 = require(\"./TransactionResult\");\nvar util_1 = require(\"../core/util/util\");\nvar NextPushId_1 = require(\"../core/util/NextPushId\");\nvar Query_1 = require(\"./Query\");\nvar Repo_1 = require(\"../core/Repo\");\nvar Path_1 = require(\"../core/util/Path\");\nvar QueryParams_1 = require(\"../core/view/QueryParams\");\nvar validation_1 = require(\"../core/util/validation\");\nvar util_2 = require(\"@firebase/util\");\nvar util_3 = require(\"@firebase/util\");\nvar SyncPoint_1 = require(\"../core/SyncPoint\");\nvar Reference = /** @class */ (function (_super) {\n    tslib_1.__extends(Reference, _super);\n    /**\n     * Call options:\n     *   new Reference(Repo, Path) or\n     *   new Reference(url: string, string|RepoManager)\n     *\n     * Externally - this is the firebase.database.Reference type.\n     *\n     * @param {!Repo} repo\n     * @param {(!Path)} path\n     * @extends {Query}\n     */\n    function Reference(repo, path) {\n        var _this = this;\n        if (!(repo instanceof Repo_1.Repo)) {\n            throw new Error('new Reference() no longer supported - use app.database().');\n        }\n        // call Query's constructor, passing in the repo and path.\n        _this = _super.call(this, repo, path, QueryParams_1.QueryParams.DEFAULT, false) || this;\n        return _this;\n    }\n    /** @return {?string} */\n    Reference.prototype.getKey = function () {\n        util_2.validateArgCount('Reference.key', 0, 0, arguments.length);\n        if (this.path.isEmpty())\n            return null;\n        else\n            return this.path.getBack();\n    };\n    /**\n     * @param {!(string|Path)} pathString\n     * @return {!Reference}\n     */\n    Reference.prototype.child = function (pathString) {\n        util_2.validateArgCount('Reference.child', 1, 1, arguments.length);\n        if (typeof pathString === 'number') {\n            pathString = String(pathString);\n        }\n        else if (!(pathString instanceof Path_1.Path)) {\n            if (this.path.getFront() === null)\n                validation_1.validateRootPathString('Reference.child', 1, pathString, false);\n            else\n                validation_1.validatePathString('Reference.child', 1, pathString, false);\n        }\n        return new Reference(this.repo, this.path.child(pathString));\n    };\n    /** @return {?Reference} */\n    Reference.prototype.getParent = function () {\n        util_2.validateArgCount('Reference.parent', 0, 0, arguments.length);\n        var parentPath = this.path.parent();\n        return parentPath === null ? null : new Reference(this.repo, parentPath);\n    };\n    /** @return {!Reference} */\n    Reference.prototype.getRoot = function () {\n        util_2.validateArgCount('Reference.root', 0, 0, arguments.length);\n        var ref = this;\n        while (ref.getParent() !== null) {\n            ref = ref.getParent();\n        }\n        return ref;\n    };\n    /** @return {!Database} */\n    Reference.prototype.databaseProp = function () {\n        return this.repo.database;\n    };\n    /**\n     * @param {*} newVal\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.set = function (newVal, onComplete) {\n        util_2.validateArgCount('Reference.set', 1, 2, arguments.length);\n        validation_1.validateWritablePath('Reference.set', this.path);\n        validation_1.validateFirebaseDataArg('Reference.set', 1, newVal, this.path, false);\n        util_2.validateCallback('Reference.set', 2, onComplete, true);\n        var deferred = new util_3.Deferred();\n        this.repo.setWithPriority(this.path, newVal, \n        /*priority=*/ null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {!Object} objectToMerge\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.update = function (objectToMerge, onComplete) {\n        util_2.validateArgCount('Reference.update', 1, 2, arguments.length);\n        validation_1.validateWritablePath('Reference.update', this.path);\n        if (Array.isArray(objectToMerge)) {\n            var newObjectToMerge = {};\n            for (var i = 0; i < objectToMerge.length; ++i) {\n                newObjectToMerge['' + i] = objectToMerge[i];\n            }\n            objectToMerge = newObjectToMerge;\n            util_1.warn('Passing an Array to Firebase.update() is deprecated. ' +\n                'Use set() if you want to overwrite the existing data, or ' +\n                'an Object with integer keys if you really do want to ' +\n                'only update some of the children.');\n        }\n        validation_1.validateFirebaseMergeDataArg('Reference.update', 1, objectToMerge, this.path, false);\n        util_2.validateCallback('Reference.update', 2, onComplete, true);\n        var deferred = new util_3.Deferred();\n        this.repo.update(this.path, objectToMerge, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {*} newVal\n     * @param {string|number|null} newPriority\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.setWithPriority = function (newVal, newPriority, onComplete) {\n        util_2.validateArgCount('Reference.setWithPriority', 2, 3, arguments.length);\n        validation_1.validateWritablePath('Reference.setWithPriority', this.path);\n        validation_1.validateFirebaseDataArg('Reference.setWithPriority', 1, newVal, this.path, false);\n        validation_1.validatePriority('Reference.setWithPriority', 2, newPriority, false);\n        util_2.validateCallback('Reference.setWithPriority', 3, onComplete, true);\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\n            throw 'Reference.setWithPriority failed: ' +\n                this.getKey() +\n                ' is a read-only object.';\n        var deferred = new util_3.Deferred();\n        this.repo.setWithPriority(this.path, newVal, newPriority, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.remove = function (onComplete) {\n        util_2.validateArgCount('Reference.remove', 0, 1, arguments.length);\n        validation_1.validateWritablePath('Reference.remove', this.path);\n        util_2.validateCallback('Reference.remove', 1, onComplete, true);\n        return this.set(null, onComplete);\n    };\n    /**\n     * @param {function(*):*} transactionUpdate\n     * @param {(function(?Error, boolean, ?DataSnapshot))=} onComplete\n     * @param {boolean=} applyLocally\n     * @return {!Promise}\n     */\n    Reference.prototype.transaction = function (transactionUpdate, onComplete, applyLocally) {\n        util_2.validateArgCount('Reference.transaction', 1, 3, arguments.length);\n        validation_1.validateWritablePath('Reference.transaction', this.path);\n        util_2.validateCallback('Reference.transaction', 1, transactionUpdate, false);\n        util_2.validateCallback('Reference.transaction', 2, onComplete, true);\n        // NOTE: applyLocally is an internal-only option for now.  We need to decide if we want to keep it and how\n        // to expose it.\n        validation_1.validateBoolean('Reference.transaction', 3, applyLocally, true);\n        if (this.getKey() === '.length' || this.getKey() === '.keys')\n            throw 'Reference.transaction failed: ' +\n                this.getKey() +\n                ' is a read-only object.';\n        if (applyLocally === undefined)\n            applyLocally = true;\n        var deferred = new util_3.Deferred();\n        if (typeof onComplete === 'function') {\n            deferred.promise.catch(function () { });\n        }\n        var promiseComplete = function (error, committed, snapshot) {\n            if (error) {\n                deferred.reject(error);\n            }\n            else {\n                deferred.resolve(new TransactionResult_1.TransactionResult(committed, snapshot));\n            }\n            if (typeof onComplete === 'function') {\n                onComplete(error, committed, snapshot);\n            }\n        };\n        this.repo.startTransaction(this.path, transactionUpdate, promiseComplete, applyLocally);\n        return deferred.promise;\n    };\n    /**\n     * @param {string|number|null} priority\n     * @param {function(?Error)=} onComplete\n     * @return {!Promise}\n     */\n    Reference.prototype.setPriority = function (priority, onComplete) {\n        util_2.validateArgCount('Reference.setPriority', 1, 2, arguments.length);\n        validation_1.validateWritablePath('Reference.setPriority', this.path);\n        validation_1.validatePriority('Reference.setPriority', 1, priority, false);\n        util_2.validateCallback('Reference.setPriority', 2, onComplete, true);\n        var deferred = new util_3.Deferred();\n        this.repo.setWithPriority(this.path.child('.priority'), priority, null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {*=} value\n     * @param {function(?Error)=} onComplete\n     * @return {!Reference}\n     */\n    Reference.prototype.push = function (value, onComplete) {\n        util_2.validateArgCount('Reference.push', 0, 2, arguments.length);\n        validation_1.validateWritablePath('Reference.push', this.path);\n        validation_1.validateFirebaseDataArg('Reference.push', 1, value, this.path, true);\n        util_2.validateCallback('Reference.push', 2, onComplete, true);\n        var now = this.repo.serverTime();\n        var name = NextPushId_1.nextPushId(now);\n        // push() returns a ThennableReference whose promise is fulfilled with a regular Reference.\n        // We use child() to create handles to two different references. The first is turned into a\n        // ThennableReference below by adding then() and catch() methods and is used as the\n        // return value of push(). The second remains a regular Reference and is used as the fulfilled\n        // value of the first ThennableReference.\n        var thennablePushRef = this.child(name);\n        var pushRef = this.child(name);\n        var promise;\n        if (value != null) {\n            promise = thennablePushRef.set(value, onComplete).then(function () { return pushRef; });\n        }\n        else {\n            promise = Promise.resolve(pushRef);\n        }\n        thennablePushRef.then = promise.then.bind(promise);\n        thennablePushRef.catch = promise.then.bind(promise, undefined);\n        if (typeof onComplete === 'function') {\n            promise.catch(function () { });\n        }\n        return thennablePushRef;\n    };\n    /**\n     * @return {!OnDisconnect}\n     */\n    Reference.prototype.onDisconnect = function () {\n        validation_1.validateWritablePath('Reference.onDisconnect', this.path);\n        return new onDisconnect_1.OnDisconnect(this.repo, this.path);\n    };\n    Object.defineProperty(Reference.prototype, \"database\", {\n        get: function () {\n            return this.databaseProp();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"key\", {\n        get: function () {\n            return this.getKey();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"parent\", {\n        get: function () {\n            return this.getParent();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Reference.prototype, \"root\", {\n        get: function () {\n            return this.getRoot();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Reference;\n}(Query_1.Query));\nexports.Reference = Reference;\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nQuery_1.Query.__referenceConstructor = Reference;\nSyncPoint_1.SyncPoint.__referenceConstructor = Reference;\n\n//# sourceMappingURL=Reference.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\nexports.CONSTANTS = {\n    /**\n     * @define {boolean} Whether this is the client Node.js SDK.\n     */\n    NODE_CLIENT: false,\n    /**\n     * @define {boolean} Whether this is the Admin Node.js SDK.\n     */\n    NODE_ADMIN: false,\n    /**\n     * Firebase SDK Version\n     */\n    SDK_VERSION: '${JSCORE_VERSION}'\n};\n\n//# sourceMappingURL=constants.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IndexedFilter_1 = require(\"./IndexedFilter\");\nvar PriorityIndex_1 = require(\"../../snap/indexes/PriorityIndex\");\nvar Node_1 = require(\"../../../core/snap/Node\");\nvar ChildrenNode_1 = require(\"../../snap/ChildrenNode\");\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n *\n * @constructor\n * @implements {NodeFilter}\n */\nvar RangedFilter = /** @class */ (function () {\n    /**\n     * @param {!QueryParams} params\n     */\n    function RangedFilter(params) {\n        this.indexedFilter_ = new IndexedFilter_1.IndexedFilter(params.getIndex());\n        this.index_ = params.getIndex();\n        this.startPost_ = RangedFilter.getStartPost_(params);\n        this.endPost_ = RangedFilter.getEndPost_(params);\n    }\n    /**\n     * @return {!NamedNode}\n     */\n    RangedFilter.prototype.getStartPost = function () {\n        return this.startPost_;\n    };\n    /**\n     * @return {!NamedNode}\n     */\n    RangedFilter.prototype.getEndPost = function () {\n        return this.endPost_;\n    };\n    /**\n     * @param {!NamedNode} node\n     * @return {boolean}\n     */\n    RangedFilter.prototype.matches = function (node) {\n        return (this.index_.compare(this.getStartPost(), node) <= 0 &&\n            this.index_.compare(node, this.getEndPost()) <= 0);\n    };\n    /**\n     * @inheritDoc\n     */\n    RangedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.matches(new Node_1.NamedNode(key, newChild))) {\n            newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        }\n        return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n    };\n    /**\n     * @inheritDoc\n     */\n    RangedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n        if (newSnap.isLeafNode()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            newSnap = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        }\n        var filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n        var self = this;\n        newSnap.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n            if (!self.matches(new Node_1.NamedNode(key, childNode))) {\n                filtered = filtered.updateImmediateChild(key, ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n            }\n        });\n        return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    };\n    /**\n     * @inheritDoc\n     */\n    RangedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    };\n    /**\n     * @inheritDoc\n     */\n    RangedFilter.prototype.filtersNodes = function () {\n        return true;\n    };\n    /**\n     * @inheritDoc\n     */\n    RangedFilter.prototype.getIndexedFilter = function () {\n        return this.indexedFilter_;\n    };\n    /**\n     * @inheritDoc\n     */\n    RangedFilter.prototype.getIndex = function () {\n        return this.index_;\n    };\n    /**\n     * @param {!QueryParams} params\n     * @return {!NamedNode}\n     * @private\n     */\n    RangedFilter.getStartPost_ = function (params) {\n        if (params.hasStart()) {\n            var startName = params.getIndexStartName();\n            return params.getIndex().makePost(params.getIndexStartValue(), startName);\n        }\n        else {\n            return params.getIndex().minPost();\n        }\n    };\n    /**\n     * @param {!QueryParams} params\n     * @return {!NamedNode}\n     * @private\n     */\n    RangedFilter.getEndPost_ = function (params) {\n        if (params.hasEnd()) {\n            var endName = params.getIndexEndName();\n            return params.getIndex().makePost(params.getIndexEndValue(), endName);\n        }\n        else {\n            return params.getIndex().maxPost();\n        }\n    };\n    return RangedFilter;\n}());\nexports.RangedFilter = RangedFilter;\n\n//# sourceMappingURL=RangedFilter.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nvar ServerActions = /** @class */ (function () {\n    function ServerActions() {\n    }\n    /**\n     * @param {string} pathString\n     * @param {*} data\n     * @param {function(string, string)=} onComplete\n     * @param {string=} hash\n     */\n    ServerActions.prototype.put = function (pathString, data, onComplete, hash) { };\n    /**\n     * @param {string} pathString\n     * @param {*} data\n     * @param {function(string, ?string)} onComplete\n     * @param {string=} hash\n     */\n    ServerActions.prototype.merge = function (pathString, data, onComplete, hash) { };\n    /**\n     * Refreshes the auth token for the current connection.\n     * @param {string} token The authentication token\n     */\n    ServerActions.prototype.refreshAuthToken = function (token) { };\n    /**\n     * @param {string} pathString\n     * @param {*} data\n     * @param {function(string, string)=} onComplete\n     */\n    ServerActions.prototype.onDisconnectPut = function (pathString, data, onComplete) { };\n    /**\n     * @param {string} pathString\n     * @param {*} data\n     * @param {function(string, string)=} onComplete\n     */\n    ServerActions.prototype.onDisconnectMerge = function (pathString, data, onComplete) { };\n    /**\n     * @param {string} pathString\n     * @param {function(string, string)=} onComplete\n     */\n    ServerActions.prototype.onDisconnectCancel = function (pathString, onComplete) { };\n    /**\n     * @param {Object.<string, *>} stats\n     */\n    ServerActions.prototype.reportStats = function (stats) { };\n    return ServerActions;\n}());\nexports.ServerActions = ServerActions;\n\n//# sourceMappingURL=ServerActions.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar app_1 = require(\"@firebase/app\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../core/util/util\");\nvar StatsManager_1 = require(\"../core/stats/StatsManager\");\nvar Constants_1 = require(\"./Constants\");\nvar util_3 = require(\"@firebase/util\");\nvar storage_1 = require(\"../core/storage/storage\");\nvar util_4 = require(\"@firebase/util\");\nvar util_5 = require(\"@firebase/util\");\nvar WEBSOCKET_MAX_FRAME_SIZE = 16384;\nvar WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\nvar WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n    WebSocketImpl = MozWebSocket;\n}\nelse if (typeof WebSocket !== 'undefined') {\n    WebSocketImpl = WebSocket;\n}\nfunction setWebSocketImpl(impl) {\n    WebSocketImpl = impl;\n}\nexports.setWebSocketImpl = setWebSocketImpl;\n/**\n * Create a new websocket connection with the given callbacks.\n * @constructor\n * @implements {Transport}\n */\nvar WebSocketConnection = /** @class */ (function () {\n    /**\n     * @param {string} connId identifier for this transport\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n     *                                         session\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n     */\n    function WebSocketConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.keepaliveTimer = null;\n        this.frames = null;\n        this.totalFrames = 0;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.log_ = util_2.logWrapper(this.connId);\n        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);\n        this.connURL = WebSocketConnection.connectionURL_(repoInfo, transportSessionId, lastSessionId);\n    }\n    /**\n     * @param {RepoInfo} repoInfo The info for the websocket endpoint.\n     * @param {string=} transportSessionId Optional transportSessionId if this is connecting to an existing transport\n     *                                         session\n     * @param {string=} lastSessionId Optional lastSessionId if there was a previous connection\n     * @return {string} connection url\n     * @private\n     */\n    WebSocketConnection.connectionURL_ = function (repoInfo, transportSessionId, lastSessionId) {\n        var urlParams = {};\n        urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;\n        if (!util_5.isNodeSdk() &&\n            typeof location !== 'undefined' &&\n            location.href &&\n            location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {\n            urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;\n        }\n        if (transportSessionId) {\n            urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = transportSessionId;\n        }\n        if (lastSessionId) {\n            urlParams[Constants_1.LAST_SESSION_PARAM] = lastSessionId;\n        }\n        return repoInfo.connectionURL(Constants_1.WEBSOCKET, urlParams);\n    };\n    /**\n     *\n     * @param onMessage Callback when messages arrive\n     * @param onDisconnect Callback with connection lost.\n     */\n    WebSocketConnection.prototype.open = function (onMessage, onDisconnect) {\n        var _this = this;\n        this.onDisconnect = onDisconnect;\n        this.onMessage = onMessage;\n        this.log_('Websocket connecting to ' + this.connURL);\n        this.everConnected_ = false;\n        // Assume failure until proven otherwise.\n        storage_1.PersistentStorage.set('previous_websocket_failure', true);\n        try {\n            if (util_5.isNodeSdk()) {\n                var device = util_3.CONSTANTS.NODE_ADMIN ? 'AdminNode' : 'Node';\n                // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n                var options = {\n                    headers: {\n                        'User-Agent': \"Firebase/\" + Constants_1.PROTOCOL_VERSION + \"/\" + app_1.default.SDK_VERSION + \"/\" + process.platform + \"/\" + device\n                    }\n                };\n                // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n                var env = process['env'];\n                var proxy = this.connURL.indexOf('wss://') == 0\n                    ? env['HTTPS_PROXY'] || env['https_proxy']\n                    : env['HTTP_PROXY'] || env['http_proxy'];\n                if (proxy) {\n                    options['proxy'] = { origin: proxy };\n                }\n                this.mySock = new WebSocketImpl(this.connURL, [], options);\n            }\n            else {\n                this.mySock = new WebSocketImpl(this.connURL);\n            }\n        }\n        catch (e) {\n            this.log_('Error instantiating WebSocket.');\n            var error = e.message || e.data;\n            if (error) {\n                this.log_(error);\n            }\n            this.onClosed_();\n            return;\n        }\n        this.mySock.onopen = function () {\n            _this.log_('Websocket connected.');\n            _this.everConnected_ = true;\n        };\n        this.mySock.onclose = function () {\n            _this.log_('Websocket connection was disconnected.');\n            _this.mySock = null;\n            _this.onClosed_();\n        };\n        this.mySock.onmessage = function (m) {\n            _this.handleIncomingFrame(m);\n        };\n        this.mySock.onerror = function (e) {\n            _this.log_('WebSocket error.  Closing connection.');\n            var error = e.message || e.data;\n            if (error) {\n                _this.log_(error);\n            }\n            _this.onClosed_();\n        };\n    };\n    /**\n     * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n     */\n    WebSocketConnection.prototype.start = function () { };\n    WebSocketConnection.forceDisallow = function () {\n        WebSocketConnection.forceDisallow_ = true;\n    };\n    WebSocketConnection.isAvailable = function () {\n        var isOldAndroid = false;\n        if (typeof navigator !== 'undefined' && navigator.userAgent) {\n            var oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n            var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n            if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n                if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n                    isOldAndroid = true;\n                }\n            }\n        }\n        return (!isOldAndroid &&\n            WebSocketImpl !== null &&\n            !WebSocketConnection.forceDisallow_);\n    };\n    /**\n     * Returns true if we previously failed to connect with this transport.\n     * @return {boolean}\n     */\n    WebSocketConnection.previouslyFailed = function () {\n        // If our persistent storage is actually only in-memory storage,\n        // we default to assuming that it previously failed to be safe.\n        return (storage_1.PersistentStorage.isInMemoryStorage ||\n            storage_1.PersistentStorage.get('previous_websocket_failure') === true);\n    };\n    WebSocketConnection.prototype.markConnectionHealthy = function () {\n        storage_1.PersistentStorage.remove('previous_websocket_failure');\n    };\n    WebSocketConnection.prototype.appendFrame_ = function (data) {\n        this.frames.push(data);\n        if (this.frames.length == this.totalFrames) {\n            var fullMess = this.frames.join('');\n            this.frames = null;\n            var jsonMess = util_4.jsonEval(fullMess);\n            //handle the message\n            this.onMessage(jsonMess);\n        }\n    };\n    /**\n     * @param {number} frameCount The number of frames we are expecting from the server\n     * @private\n     */\n    WebSocketConnection.prototype.handleNewFrameCount_ = function (frameCount) {\n        this.totalFrames = frameCount;\n        this.frames = [];\n    };\n    /**\n     * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n     * @param {!String} data\n     * @return {?String} Any remaining data to be process, or null if there is none\n     * @private\n     */\n    WebSocketConnection.prototype.extractFrameCount_ = function (data) {\n        util_1.assert(this.frames === null, 'We already have a frame buffer');\n        // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n        // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n        if (data.length <= 6) {\n            var frameCount = Number(data);\n            if (!isNaN(frameCount)) {\n                this.handleNewFrameCount_(frameCount);\n                return null;\n            }\n        }\n        this.handleNewFrameCount_(1);\n        return data;\n    };\n    /**\n     * Process a websocket frame that has arrived from the server.\n     * @param mess The frame data\n     */\n    WebSocketConnection.prototype.handleIncomingFrame = function (mess) {\n        if (this.mySock === null)\n            return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n        var data = mess['data'];\n        this.bytesReceived += data.length;\n        this.stats_.incrementCounter('bytes_received', data.length);\n        this.resetKeepAlive();\n        if (this.frames !== null) {\n            // we're buffering\n            this.appendFrame_(data);\n        }\n        else {\n            // try to parse out a frame count, otherwise, assume 1 and process it\n            var remainingData = this.extractFrameCount_(data);\n            if (remainingData !== null) {\n                this.appendFrame_(remainingData);\n            }\n        }\n    };\n    /**\n     * Send a message to the server\n     * @param {Object} data The JSON object to transmit\n     */\n    WebSocketConnection.prototype.send = function (data) {\n        this.resetKeepAlive();\n        var dataStr = util_4.stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //We can only fit a certain amount in each websocket frame, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        var dataSegs = util_2.splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n        //Send the length header\n        if (dataSegs.length > 1) {\n            this.sendString_(String(dataSegs.length));\n        }\n        //Send the actual data in segments.\n        for (var i = 0; i < dataSegs.length; i++) {\n            this.sendString_(dataSegs[i]);\n        }\n    };\n    WebSocketConnection.prototype.shutdown_ = function () {\n        this.isClosed_ = true;\n        if (this.keepaliveTimer) {\n            clearInterval(this.keepaliveTimer);\n            this.keepaliveTimer = null;\n        }\n        if (this.mySock) {\n            this.mySock.close();\n            this.mySock = null;\n        }\n    };\n    WebSocketConnection.prototype.onClosed_ = function () {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is closing itself');\n            this.shutdown_();\n            // since this is an internal close, trigger the close listener\n            if (this.onDisconnect) {\n                this.onDisconnect(this.everConnected_);\n                this.onDisconnect = null;\n            }\n        }\n    };\n    /**\n     * External-facing close handler.\n     * Close the websocket and kill the connection.\n     */\n    WebSocketConnection.prototype.close = function () {\n        if (!this.isClosed_) {\n            this.log_('WebSocket is being closed');\n            this.shutdown_();\n        }\n    };\n    /**\n     * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n     * the last activity.\n     */\n    WebSocketConnection.prototype.resetKeepAlive = function () {\n        var _this = this;\n        clearInterval(this.keepaliveTimer);\n        this.keepaliveTimer = setInterval(function () {\n            //If there has been no websocket activity for a while, send a no-op\n            if (_this.mySock) {\n                _this.sendString_('0');\n            }\n            _this.resetKeepAlive();\n        }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));\n    };\n    /**\n     * Send a string over the websocket.\n     *\n     * @param {string} str String to send.\n     * @private\n     */\n    WebSocketConnection.prototype.sendString_ = function (str) {\n        // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n        // calls for some unknown reason.  We treat these as an error and disconnect.\n        // See https://app.asana.com/0/58926111402292/68021340250410\n        try {\n            this.mySock.send(str);\n        }\n        catch (e) {\n            this.log_('Exception thrown from WebSocket.send():', e.message || e.data, 'Closing connection.');\n            setTimeout(this.onClosed_.bind(this), 0);\n        }\n    };\n    /**\n     * Number of response before we consider the connection \"healthy.\"\n     * @type {number}\n     */\n    WebSocketConnection.responsesRequiredToBeHealthy = 2;\n    /**\n     * Time to wait for the connection te become healthy before giving up.\n     * @type {number}\n     */\n    WebSocketConnection.healthyTimeout = 30000;\n    return WebSocketConnection;\n}());\nexports.WebSocketConnection = WebSocketConnection;\n\n//# sourceMappingURL=WebSocketConnection.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../core/util/util\");\nvar CountedSet_1 = require(\"../core/util/CountedSet\");\nvar StatsManager_1 = require(\"../core/stats/StatsManager\");\nvar PacketReceiver_1 = require(\"./polling/PacketReceiver\");\nvar Constants_1 = require(\"./Constants\");\nvar util_2 = require(\"@firebase/util\");\nvar util_3 = require(\"@firebase/util\");\n// URL query parameters associated with longpolling\nexports.FIREBASE_LONGPOLL_START_PARAM = 'start';\nexports.FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexports.FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexports.FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexports.FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexports.FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexports.FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexports.FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nvar MAX_URL_DATA_SIZE = 1870;\nvar SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nvar MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n * @const\n * @type {number}\n */\nvar KEEPALIVE_REQUEST_INTERVAL = 25000;\n/**\n * How long to wait before aborting a long-polling connection attempt.\n * @const\n * @type {number}\n */\nvar LP_CONNECT_TIMEOUT = 30000;\n/**\n * This class manages a single long-polling connection.\n *\n * @constructor\n * @implements {Transport}\n */\nvar BrowserPollConnection = /** @class */ (function () {\n    /**\n     * @param {string} connId An identifier for this connection, used for logging\n     * @param {RepoInfo} repoInfo The info for the endpoint to send data to.\n     * @param {string=} transportSessionId Optional transportSessionid if we are reconnecting for an existing\n     *                                         transport session\n     * @param {string=}  lastSessionId Optional lastSessionId if the PersistentConnection has already created a\n     *                                     connection previously\n     */\n    function BrowserPollConnection(connId, repoInfo, transportSessionId, lastSessionId) {\n        this.connId = connId;\n        this.repoInfo = repoInfo;\n        this.transportSessionId = transportSessionId;\n        this.lastSessionId = lastSessionId;\n        this.bytesSent = 0;\n        this.bytesReceived = 0;\n        this.everConnected_ = false;\n        this.log_ = util_1.logWrapper(connId);\n        this.stats_ = StatsManager_1.StatsManager.getCollection(repoInfo);\n        this.urlFn = function (params) {\n            return repoInfo.connectionURL(Constants_1.LONG_POLLING, params);\n        };\n    }\n    /**\n     *\n     * @param {function(Object)} onMessage Callback when messages arrive\n     * @param {function()} onDisconnect Callback with connection lost.\n     */\n    BrowserPollConnection.prototype.open = function (onMessage, onDisconnect) {\n        var _this = this;\n        this.curSegmentNum = 0;\n        this.onDisconnect_ = onDisconnect;\n        this.myPacketOrderer = new PacketReceiver_1.PacketReceiver(onMessage);\n        this.isClosed_ = false;\n        this.connectTimeoutTimer_ = setTimeout(function () {\n            _this.log_('Timed out trying to connect.');\n            // Make sure we clear the host cache\n            _this.onClosed_();\n            _this.connectTimeoutTimer_ = null;\n        }, Math.floor(LP_CONNECT_TIMEOUT));\n        // Ensure we delay the creation of the iframe until the DOM is loaded.\n        util_1.executeWhenDOMReady(function () {\n            if (_this.isClosed_)\n                return;\n            //Set up a callback that gets triggered once a connection is set up.\n            _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var command = args[0], arg1 = args[1], arg2 = args[2], arg3 = args[3], arg4 = args[4];\n                _this.incrementIncomingBytes_(args);\n                if (!_this.scriptTagHolder)\n                    return; // we closed the connection.\n                if (_this.connectTimeoutTimer_) {\n                    clearTimeout(_this.connectTimeoutTimer_);\n                    _this.connectTimeoutTimer_ = null;\n                }\n                _this.everConnected_ = true;\n                if (command == exports.FIREBASE_LONGPOLL_START_PARAM) {\n                    _this.id = arg1;\n                    _this.password = arg2;\n                }\n                else if (command === exports.FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n                    // Don't clear the host cache. We got a response from the server, so we know it's reachable\n                    if (arg1) {\n                        // We aren't expecting any more data (other than what the server's already in the process of sending us\n                        // through our already open polls), so don't send any more.\n                        _this.scriptTagHolder.sendNewPolls = false;\n                        // arg1 in this case is the last response number sent by the server. We should try to receive\n                        // all of the responses up to this one before closing\n                        _this.myPacketOrderer.closeAfter(arg1, function () {\n                            _this.onClosed_();\n                        });\n                    }\n                    else {\n                        _this.onClosed_();\n                    }\n                }\n                else {\n                    throw new Error('Unrecognized command received: ' + command);\n                }\n            }, function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var pN = args[0], data = args[1];\n                _this.incrementIncomingBytes_(args);\n                _this.myPacketOrderer.handleResponse(pN, data);\n            }, function () {\n                _this.onClosed_();\n            }, _this.urlFn);\n            //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n            //from cache.\n            var urlParams = {};\n            urlParams[exports.FIREBASE_LONGPOLL_START_PARAM] = 't';\n            urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 100000000);\n            if (_this.scriptTagHolder.uniqueCallbackIdentifier)\n                urlParams[exports.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;\n            urlParams[Constants_1.VERSION_PARAM] = Constants_1.PROTOCOL_VERSION;\n            if (_this.transportSessionId) {\n                urlParams[Constants_1.TRANSPORT_SESSION_PARAM] = _this.transportSessionId;\n            }\n            if (_this.lastSessionId) {\n                urlParams[Constants_1.LAST_SESSION_PARAM] = _this.lastSessionId;\n            }\n            if (!util_3.isNodeSdk() &&\n                typeof location !== 'undefined' &&\n                location.href &&\n                location.href.indexOf(Constants_1.FORGE_DOMAIN) !== -1) {\n                urlParams[Constants_1.REFERER_PARAM] = Constants_1.FORGE_REF;\n            }\n            var connectURL = _this.urlFn(urlParams);\n            _this.log_('Connecting via long-poll to ' + connectURL);\n            _this.scriptTagHolder.addTag(connectURL, function () {\n                /* do nothing */\n            });\n        });\n    };\n    /**\n     * Call this when a handshake has completed successfully and we want to consider the connection established\n     */\n    BrowserPollConnection.prototype.start = function () {\n        this.scriptTagHolder.startLongPoll(this.id, this.password);\n        this.addDisconnectPingFrame(this.id, this.password);\n    };\n    /**\n     * Forces long polling to be considered as a potential transport\n     */\n    BrowserPollConnection.forceAllow = function () {\n        BrowserPollConnection.forceAllow_ = true;\n    };\n    /**\n     * Forces longpolling to not be considered as a potential transport\n     */\n    BrowserPollConnection.forceDisallow = function () {\n        BrowserPollConnection.forceDisallow_ = true;\n    };\n    // Static method, use string literal so it can be accessed in a generic way\n    BrowserPollConnection.isAvailable = function () {\n        // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n        // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n        return (BrowserPollConnection.forceAllow_ ||\n            (!BrowserPollConnection.forceDisallow_ &&\n                typeof document !== 'undefined' &&\n                document.createElement != null &&\n                !util_1.isChromeExtensionContentScript() &&\n                !util_1.isWindowsStoreApp() &&\n                !util_3.isNodeSdk()));\n    };\n    /**\n     * No-op for polling\n     */\n    BrowserPollConnection.prototype.markConnectionHealthy = function () { };\n    /**\n     * Stops polling and cleans up the iframe\n     * @private\n     */\n    BrowserPollConnection.prototype.shutdown_ = function () {\n        this.isClosed_ = true;\n        if (this.scriptTagHolder) {\n            this.scriptTagHolder.close();\n            this.scriptTagHolder = null;\n        }\n        //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n        if (this.myDisconnFrame) {\n            document.body.removeChild(this.myDisconnFrame);\n            this.myDisconnFrame = null;\n        }\n        if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        }\n    };\n    /**\n     * Triggered when this transport is closed\n     * @private\n     */\n    BrowserPollConnection.prototype.onClosed_ = function () {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is closing itself');\n            this.shutdown_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_(this.everConnected_);\n                this.onDisconnect_ = null;\n            }\n        }\n    };\n    /**\n     * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n     * that we've left.\n     */\n    BrowserPollConnection.prototype.close = function () {\n        if (!this.isClosed_) {\n            this.log_('Longpoll is being closed.');\n            this.shutdown_();\n        }\n    };\n    /**\n     * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n     * broken into chunks (since URLs have a small maximum length).\n     * @param {!Object} data The JSON data to transmit.\n     */\n    BrowserPollConnection.prototype.send = function (data) {\n        var dataStr = util_2.stringify(data);\n        this.bytesSent += dataStr.length;\n        this.stats_.incrementCounter('bytes_sent', dataStr.length);\n        //first, lets get the base64-encoded data\n        var base64data = util_2.base64Encode(dataStr);\n        //We can only fit a certain amount in each URL, so we need to split this request\n        //up into multiple pieces if it doesn't fit in one request.\n        var dataSegs = util_1.splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n        //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n        //of segments so that we can reassemble the packet on the server.\n        for (var i = 0; i < dataSegs.length; i++) {\n            this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);\n            this.curSegmentNum++;\n        }\n    };\n    /**\n     * This is how we notify the server that we're leaving.\n     * We aren't able to send requests with DHTML on a window close event, but we can\n     * trigger XHR requests in some browsers (everything but Opera basically).\n     * @param {!string} id\n     * @param {!string} pw\n     */\n    BrowserPollConnection.prototype.addDisconnectPingFrame = function (id, pw) {\n        if (util_3.isNodeSdk())\n            return;\n        this.myDisconnFrame = document.createElement('iframe');\n        var urlParams = {};\n        urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n        urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = id;\n        urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = pw;\n        this.myDisconnFrame.src = this.urlFn(urlParams);\n        this.myDisconnFrame.style.display = 'none';\n        document.body.appendChild(this.myDisconnFrame);\n    };\n    /**\n     * Used to track the bytes received by this client\n     * @param {*} args\n     * @private\n     */\n    BrowserPollConnection.prototype.incrementIncomingBytes_ = function (args) {\n        // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n        var bytesReceived = util_2.stringify(args).length;\n        this.bytesReceived += bytesReceived;\n        this.stats_.incrementCounter('bytes_received', bytesReceived);\n    };\n    return BrowserPollConnection;\n}());\nexports.BrowserPollConnection = BrowserPollConnection;\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n * @constructor\n *********************************************************************************************/\nvar FirebaseIFrameScriptHolder = /** @class */ (function () {\n    /**\n     * @param commandCB - The callback to be called when control commands are recevied from the server.\n     * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n     * @param onDisconnect - The callback to be triggered when this tag holder is closed\n     * @param urlFn - A function that provides the URL of the endpoint to send data to.\n     */\n    function FirebaseIFrameScriptHolder(commandCB, onMessageCB, onDisconnect, urlFn) {\n        this.onDisconnect = onDisconnect;\n        this.urlFn = urlFn;\n        //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n        //problems in some browsers.\n        /**\n         * @type {CountedSet.<number, number>}\n         */\n        this.outstandingRequests = new CountedSet_1.CountedSet();\n        //A queue of the pending segments waiting for transmission to the server.\n        this.pendingSegs = [];\n        //A serial number. We use this for two things:\n        // 1) A way to ensure the browser doesn't cache responses to polls\n        // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n        //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n        //    JSONP code in the order it was added to the iframe.\n        this.currentSerial = Math.floor(Math.random() * 100000000);\n        // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n        // incoming data from the server that we're waiting for).\n        this.sendNewPolls = true;\n        if (!util_3.isNodeSdk()) {\n            //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n            //iframes where we put the long-polling script tags. We have two callbacks:\n            //   1) Command Callback - Triggered for control issues, like starting a connection.\n            //   2) Message Callback - Triggered when new data arrives.\n            this.uniqueCallbackIdentifier = util_1.LUIDGenerator();\n            window[exports.FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;\n            window[exports.FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;\n            //Create an iframe for us to add script tags to.\n            this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n            // Set the iframe's contents.\n            var script = '';\n            // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n            // for ie9, but ie8 needs to do it again in the document itself.\n            if (this.myIFrame.src &&\n                this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:') {\n                var currentDomain = document.domain;\n                script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n            }\n            var iframeContents = '<html><body>' + script + '</body></html>';\n            try {\n                this.myIFrame.doc.open();\n                this.myIFrame.doc.write(iframeContents);\n                this.myIFrame.doc.close();\n            }\n            catch (e) {\n                util_1.log('frame writing exception');\n                if (e.stack) {\n                    util_1.log(e.stack);\n                }\n                util_1.log(e);\n            }\n        }\n        else {\n            this.commandCB = commandCB;\n            this.onMessageCB = onMessageCB;\n        }\n    }\n    /**\n     * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n     * actually use.\n     * @private\n     * @return {Element}\n     */\n    FirebaseIFrameScriptHolder.createIFrame_ = function () {\n        var iframe = document.createElement('iframe');\n        iframe.style.display = 'none';\n        // This is necessary in order to initialize the document inside the iframe\n        if (document.body) {\n            document.body.appendChild(iframe);\n            try {\n                // If document.domain has been modified in IE, this will throw an error, and we need to set the\n                // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n                // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n                var a = iframe.contentWindow.document;\n                if (!a) {\n                    // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n                    util_1.log('No IE domain setting required');\n                }\n            }\n            catch (e) {\n                var domain = document.domain;\n                iframe.src =\n                    \"javascript:void((function(){document.open();document.domain='\" +\n                        domain +\n                        \"';document.close();})())\";\n            }\n        }\n        else {\n            // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n            // never gets hit.\n            throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n        }\n        // Get the document of the iframe in a browser-specific way.\n        if (iframe.contentDocument) {\n            iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n        }\n        else if (iframe.contentWindow) {\n            iframe.doc = iframe.contentWindow.document; // Internet Explorer\n        }\n        else if (iframe.document) {\n            iframe.doc = iframe.document; //others?\n        }\n        return iframe;\n    };\n    /**\n     * Cancel all outstanding queries and remove the frame.\n     */\n    FirebaseIFrameScriptHolder.prototype.close = function () {\n        var _this = this;\n        //Mark this iframe as dead, so no new requests are sent.\n        this.alive = false;\n        if (this.myIFrame) {\n            //We have to actually remove all of the html inside this iframe before removing it from the\n            //window, or IE will continue loading and executing the script tags we've already added, which\n            //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n            this.myIFrame.doc.body.innerHTML = '';\n            setTimeout(function () {\n                if (_this.myIFrame !== null) {\n                    document.body.removeChild(_this.myIFrame);\n                    _this.myIFrame = null;\n                }\n            }, Math.floor(0));\n        }\n        if (util_3.isNodeSdk() && this.myID) {\n            var urlParams = {};\n            urlParams[exports.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM] = 't';\n            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            var theURL = this.urlFn(urlParams);\n            FirebaseIFrameScriptHolder.nodeRestRequest(theURL);\n        }\n        // Protect from being called recursively.\n        var onDisconnect = this.onDisconnect;\n        if (onDisconnect) {\n            this.onDisconnect = null;\n            onDisconnect();\n        }\n    };\n    /**\n     * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n     * @param {!string} id - The ID of this connection\n     * @param {!string} pw - The password for this connection\n     */\n    FirebaseIFrameScriptHolder.prototype.startLongPoll = function (id, pw) {\n        this.myID = id;\n        this.myPW = pw;\n        this.alive = true;\n        //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n        while (this.newRequest_()) { }\n    };\n    /**\n     * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n     * too many outstanding requests and we are still alive.\n     *\n     * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n     * needed.\n     */\n    FirebaseIFrameScriptHolder.prototype.newRequest_ = function () {\n        // We keep one outstanding request open all the time to receive data, but if we need to send data\n        // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n        // close the old request.\n        if (this.alive &&\n            this.sendNewPolls &&\n            this.outstandingRequests.count() < (this.pendingSegs.length > 0 ? 2 : 1)) {\n            //construct our url\n            this.currentSerial++;\n            var urlParams = {};\n            urlParams[exports.FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n            urlParams[exports.FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n            urlParams[exports.FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n            var theURL = this.urlFn(urlParams);\n            //Now add as much data as we can.\n            var curDataString = '';\n            var i = 0;\n            while (this.pendingSegs.length > 0) {\n                //first, lets see if the next segment will fit.\n                var nextSeg = this.pendingSegs[0];\n                if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <=\n                    MAX_URL_DATA_SIZE) {\n                    //great, the segment will fit. Lets append it.\n                    var theSeg = this.pendingSegs.shift();\n                    curDataString =\n                        curDataString +\n                            '&' +\n                            exports.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n                            i +\n                            '=' +\n                            theSeg.seg +\n                            '&' +\n                            exports.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n                            i +\n                            '=' +\n                            theSeg.ts +\n                            '&' +\n                            exports.FIREBASE_LONGPOLL_DATA_PARAM +\n                            i +\n                            '=' +\n                            theSeg.d;\n                    i++;\n                }\n                else {\n                    break;\n                }\n            }\n            theURL = theURL + curDataString;\n            this.addLongPollTag_(theURL, this.currentSerial);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Queue a packet for transmission to the server.\n     * @param segnum - A sequential id for this packet segment used for reassembly\n     * @param totalsegs - The total number of segments in this packet\n     * @param data - The data for this segment.\n     */\n    FirebaseIFrameScriptHolder.prototype.enqueueSegment = function (segnum, totalsegs, data) {\n        //add this to the queue of segments to send.\n        this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n        //send the data immediately if there isn't already data being transmitted, unless\n        //startLongPoll hasn't been called yet.\n        if (this.alive) {\n            this.newRequest_();\n        }\n    };\n    /**\n     * Add a script tag for a regular long-poll request.\n     * @param {!string} url - The URL of the script tag.\n     * @param {!number} serial - The serial number of the request.\n     * @private\n     */\n    FirebaseIFrameScriptHolder.prototype.addLongPollTag_ = function (url, serial) {\n        var _this = this;\n        //remember that we sent this request.\n        this.outstandingRequests.add(serial, 1);\n        var doNewRequest = function () {\n            _this.outstandingRequests.remove(serial);\n            _this.newRequest_();\n        };\n        // If this request doesn't return on its own accord (by the server sending us some data), we'll\n        // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n        var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));\n        var readyStateCB = function () {\n            // Request completed.  Cancel the keepalive.\n            clearTimeout(keepaliveTimeout);\n            // Trigger a new request so we can continue receiving data.\n            doNewRequest();\n        };\n        this.addTag(url, readyStateCB);\n    };\n    /**\n     * Add an arbitrary script tag to the iframe.\n     * @param {!string} url - The URL for the script tag source.\n     * @param {!function()} loadCB - A callback to be triggered once the script has loaded.\n     */\n    FirebaseIFrameScriptHolder.prototype.addTag = function (url, loadCB) {\n        var _this = this;\n        if (util_3.isNodeSdk()) {\n            this.doNodeLongPoll(url, loadCB);\n        }\n        else {\n            setTimeout(function () {\n                try {\n                    // if we're already closed, don't add this poll\n                    if (!_this.sendNewPolls)\n                        return;\n                    var newScript_1 = _this.myIFrame.doc.createElement('script');\n                    newScript_1.type = 'text/javascript';\n                    newScript_1.async = true;\n                    newScript_1.src = url;\n                    newScript_1.onload = newScript_1.onreadystatechange = function () {\n                        var rstate = newScript_1.readyState;\n                        if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                            newScript_1.onload = newScript_1.onreadystatechange = null;\n                            if (newScript_1.parentNode) {\n                                newScript_1.parentNode.removeChild(newScript_1);\n                            }\n                            loadCB();\n                        }\n                    };\n                    newScript_1.onerror = function () {\n                        util_1.log('Long-poll script failed to load: ' + url);\n                        _this.sendNewPolls = false;\n                        _this.close();\n                    };\n                    _this.myIFrame.doc.body.appendChild(newScript_1);\n                }\n                catch (e) {\n                    // TODO: we should make this error visible somehow\n                }\n            }, Math.floor(1));\n        }\n    };\n    return FirebaseIFrameScriptHolder;\n}());\nexports.FirebaseIFrameScriptHolder = FirebaseIFrameScriptHolder;\n\n//# sourceMappingURL=BrowserPollConnection.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../core/util/util\");\nvar storage_1 = require(\"../core/storage/storage\");\nvar Constants_1 = require(\"./Constants\");\nvar TransportManager_1 = require(\"./TransportManager\");\n// Abort upgrade attempt if it takes longer than 60s.\nvar UPGRADE_TIMEOUT = 60000;\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nvar DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nvar BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nvar BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\nvar MESSAGE_TYPE = 't';\nvar MESSAGE_DATA = 'd';\nvar CONTROL_SHUTDOWN = 's';\nvar CONTROL_RESET = 'r';\nvar CONTROL_ERROR = 'e';\nvar CONTROL_PONG = 'o';\nvar SWITCH_ACK = 'a';\nvar END_TRANSMISSION = 'n';\nvar PING = 'p';\nvar SERVER_HELLO = 'h';\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n *\n * @constructor\n */\nvar Connection = /** @class */ (function () {\n    /**\n     * @param {!string} id - an id for this connection\n     * @param {!RepoInfo} repoInfo_ - the info for the endpoint to connect to\n     * @param {function(Object)} onMessage_ - the callback to be triggered when a server-push message arrives\n     * @param {function(number, string)} onReady_ - the callback to be triggered when this connection is ready to send messages.\n     * @param {function()} onDisconnect_ - the callback to be triggered when a connection was lost\n     * @param {function(string)} onKill_ - the callback to be triggered when this connection has permanently shut down.\n     * @param {string=} lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n     */\n    function Connection(id, repoInfo_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {\n        this.id = id;\n        this.repoInfo_ = repoInfo_;\n        this.onMessage_ = onMessage_;\n        this.onReady_ = onReady_;\n        this.onDisconnect_ = onDisconnect_;\n        this.onKill_ = onKill_;\n        this.lastSessionId = lastSessionId;\n        this.connectionCount = 0;\n        this.pendingDataMessages = [];\n        this.state_ = 0 /* CONNECTING */;\n        this.log_ = util_1.logWrapper('c:' + this.id + ':');\n        this.transportManager_ = new TransportManager_1.TransportManager(repoInfo_);\n        this.log_('Connection created');\n        this.start_();\n    }\n    /**\n     * Starts a connection attempt\n     * @private\n     */\n    Connection.prototype.start_ = function () {\n        var _this = this;\n        var conn = this.transportManager_.initialTransport();\n        this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, undefined, this.lastSessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n        var onMessageReceived = this.connReceiver_(this.conn_);\n        var onConnectionLost = this.disconnReceiver_(this.conn_);\n        this.tx_ = this.conn_;\n        this.rx_ = this.conn_;\n        this.secondaryConn_ = null;\n        this.isHealthy_ = false;\n        /*\n         * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n         * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n         * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n         * still have the context of your originating frame.\n         */\n        setTimeout(function () {\n            // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n            _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);\n        }, Math.floor(0));\n        var healthyTimeout_ms = conn['healthyTimeout'] || 0;\n        if (healthyTimeout_ms > 0) {\n            this.healthyTimeout_ = util_1.setTimeoutNonBlocking(function () {\n                _this.healthyTimeout_ = null;\n                if (!_this.isHealthy_) {\n                    if (_this.conn_ &&\n                        _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {\n                        _this.log_('Connection exceeded healthy timeout but has received ' +\n                            _this.conn_.bytesReceived +\n                            ' bytes.  Marking connection healthy.');\n                        _this.isHealthy_ = true;\n                        _this.conn_.markConnectionHealthy();\n                    }\n                    else if (_this.conn_ &&\n                        _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {\n                        _this.log_('Connection exceeded healthy timeout but has sent ' +\n                            _this.conn_.bytesSent +\n                            ' bytes.  Leaving connection alive.');\n                        // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n                        // the server.\n                    }\n                    else {\n                        _this.log_('Closing unhealthy connection after timeout.');\n                        _this.close();\n                    }\n                }\n            }, Math.floor(healthyTimeout_ms));\n        }\n    };\n    /**\n     * @return {!string}\n     * @private\n     */\n    Connection.prototype.nextTransportId_ = function () {\n        return 'c:' + this.id + ':' + this.connectionCount++;\n    };\n    Connection.prototype.disconnReceiver_ = function (conn) {\n        var _this = this;\n        return function (everConnected) {\n            if (conn === _this.conn_) {\n                _this.onConnectionLost_(everConnected);\n            }\n            else if (conn === _this.secondaryConn_) {\n                _this.log_('Secondary connection lost.');\n                _this.onSecondaryConnectionLost_();\n            }\n            else {\n                _this.log_('closing an old connection');\n            }\n        };\n    };\n    Connection.prototype.connReceiver_ = function (conn) {\n        var _this = this;\n        return function (message) {\n            if (_this.state_ != 2 /* DISCONNECTED */) {\n                if (conn === _this.rx_) {\n                    _this.onPrimaryMessageReceived_(message);\n                }\n                else if (conn === _this.secondaryConn_) {\n                    _this.onSecondaryMessageReceived_(message);\n                }\n                else {\n                    _this.log_('message on old connection');\n                }\n            }\n        };\n    };\n    /**\n     *\n     * @param {Object} dataMsg An arbitrary data message to be sent to the server\n     */\n    Connection.prototype.sendRequest = function (dataMsg) {\n        // wrap in a data message envelope and send it on\n        var msg = { t: 'd', d: dataMsg };\n        this.sendData_(msg);\n    };\n    Connection.prototype.tryCleanupConnection = function () {\n        if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n            this.log_('cleaning up and promoting a connection: ' + this.secondaryConn_.connId);\n            this.conn_ = this.secondaryConn_;\n            this.secondaryConn_ = null;\n            // the server will shutdown the old connection\n        }\n    };\n    Connection.prototype.onSecondaryControl_ = function (controlData) {\n        if (MESSAGE_TYPE in controlData) {\n            var cmd = controlData[MESSAGE_TYPE];\n            if (cmd === SWITCH_ACK) {\n                this.upgradeIfSecondaryHealthy_();\n            }\n            else if (cmd === CONTROL_RESET) {\n                // Most likely the session wasn't valid. Abandon the switch attempt\n                this.log_('Got a reset on secondary, closing it');\n                this.secondaryConn_.close();\n                // If we were already using this connection for something, than we need to fully close\n                if (this.tx_ === this.secondaryConn_ ||\n                    this.rx_ === this.secondaryConn_) {\n                    this.close();\n                }\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on secondary.');\n                this.secondaryResponsesRequired_--;\n                this.upgradeIfSecondaryHealthy_();\n            }\n        }\n    };\n    Connection.prototype.onSecondaryMessageReceived_ = function (parsedData) {\n        var layer = util_1.requireKey('t', parsedData);\n        var data = util_1.requireKey('d', parsedData);\n        if (layer == 'c') {\n            this.onSecondaryControl_(data);\n        }\n        else if (layer == 'd') {\n            // got a data message, but we're still second connection. Need to buffer it up\n            this.pendingDataMessages.push(data);\n        }\n        else {\n            throw new Error('Unknown protocol layer: ' + layer);\n        }\n    };\n    Connection.prototype.upgradeIfSecondaryHealthy_ = function () {\n        if (this.secondaryResponsesRequired_ <= 0) {\n            this.log_('Secondary connection is healthy.');\n            this.isHealthy_ = true;\n            this.secondaryConn_.markConnectionHealthy();\n            this.proceedWithUpgrade_();\n        }\n        else {\n            // Send a ping to make sure the connection is healthy.\n            this.log_('sending ping on secondary.');\n            this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n        }\n    };\n    Connection.prototype.proceedWithUpgrade_ = function () {\n        // tell this connection to consider itself open\n        this.secondaryConn_.start();\n        // send ack\n        this.log_('sending client ack on secondary');\n        this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n        // send end packet on primary transport, switch to sending on this one\n        // can receive on this one, buffer responses until end received on primary transport\n        this.log_('Ending transmission on primary');\n        this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n        this.tx_ = this.secondaryConn_;\n        this.tryCleanupConnection();\n    };\n    Connection.prototype.onPrimaryMessageReceived_ = function (parsedData) {\n        // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n        var layer = util_1.requireKey('t', parsedData);\n        var data = util_1.requireKey('d', parsedData);\n        if (layer == 'c') {\n            this.onControl_(data);\n        }\n        else if (layer == 'd') {\n            this.onDataMessage_(data);\n        }\n    };\n    Connection.prototype.onDataMessage_ = function (message) {\n        this.onPrimaryResponse_();\n        // We don't do anything with data messages, just kick them up a level\n        this.onMessage_(message);\n    };\n    Connection.prototype.onPrimaryResponse_ = function () {\n        if (!this.isHealthy_) {\n            this.primaryResponsesRequired_--;\n            if (this.primaryResponsesRequired_ <= 0) {\n                this.log_('Primary connection is healthy.');\n                this.isHealthy_ = true;\n                this.conn_.markConnectionHealthy();\n            }\n        }\n    };\n    Connection.prototype.onControl_ = function (controlData) {\n        var cmd = util_1.requireKey(MESSAGE_TYPE, controlData);\n        if (MESSAGE_DATA in controlData) {\n            var payload = controlData[MESSAGE_DATA];\n            if (cmd === SERVER_HELLO) {\n                this.onHandshake_(payload);\n            }\n            else if (cmd === END_TRANSMISSION) {\n                this.log_('recvd end transmission on primary');\n                this.rx_ = this.secondaryConn_;\n                for (var i = 0; i < this.pendingDataMessages.length; ++i) {\n                    this.onDataMessage_(this.pendingDataMessages[i]);\n                }\n                this.pendingDataMessages = [];\n                this.tryCleanupConnection();\n            }\n            else if (cmd === CONTROL_SHUTDOWN) {\n                // This was previously the 'onKill' callback passed to the lower-level connection\n                // payload in this case is the reason for the shutdown. Generally a human-readable error\n                this.onConnectionShutdown_(payload);\n            }\n            else if (cmd === CONTROL_RESET) {\n                // payload in this case is the host we should contact\n                this.onReset_(payload);\n            }\n            else if (cmd === CONTROL_ERROR) {\n                util_1.error('Server Error: ' + payload);\n            }\n            else if (cmd === CONTROL_PONG) {\n                this.log_('got pong on primary.');\n                this.onPrimaryResponse_();\n                this.sendPingOnPrimaryIfNecessary_();\n            }\n            else {\n                util_1.error('Unknown control packet command: ' + cmd);\n            }\n        }\n    };\n    /**\n     *\n     * @param {Object} handshake The handshake data returned from the server\n     * @private\n     */\n    Connection.prototype.onHandshake_ = function (handshake) {\n        var timestamp = handshake.ts;\n        var version = handshake.v;\n        var host = handshake.h;\n        this.sessionId = handshake.s;\n        this.repoInfo_.updateHost(host);\n        // if we've already closed the connection, then don't bother trying to progress further\n        if (this.state_ == 0 /* CONNECTING */) {\n            this.conn_.start();\n            this.onConnectionEstablished_(this.conn_, timestamp);\n            if (Constants_1.PROTOCOL_VERSION !== version) {\n                util_1.warn('Protocol version mismatch detected');\n            }\n            // TODO: do we want to upgrade? when? maybe a delay?\n            this.tryStartUpgrade_();\n        }\n    };\n    Connection.prototype.tryStartUpgrade_ = function () {\n        var conn = this.transportManager_.upgradeTransport();\n        if (conn) {\n            this.startUpgrade_(conn);\n        }\n    };\n    Connection.prototype.startUpgrade_ = function (conn) {\n        var _this = this;\n        this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.sessionId);\n        // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n        // can consider the transport healthy.\n        this.secondaryResponsesRequired_ =\n            conn['responsesRequiredToBeHealthy'] || 0;\n        var onMessage = this.connReceiver_(this.secondaryConn_);\n        var onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n        this.secondaryConn_.open(onMessage, onDisconnect);\n        // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n        util_1.setTimeoutNonBlocking(function () {\n            if (_this.secondaryConn_) {\n                _this.log_('Timed out trying to upgrade.');\n                _this.secondaryConn_.close();\n            }\n        }, Math.floor(UPGRADE_TIMEOUT));\n    };\n    Connection.prototype.onReset_ = function (host) {\n        this.log_('Reset packet received.  New host: ' + host);\n        this.repoInfo_.updateHost(host);\n        // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n        // We don't currently support resets after the connection has already been established\n        if (this.state_ === 1 /* CONNECTED */) {\n            this.close();\n        }\n        else {\n            // Close whatever connections we have open and start again.\n            this.closeConnections_();\n            this.start_();\n        }\n    };\n    Connection.prototype.onConnectionEstablished_ = function (conn, timestamp) {\n        var _this = this;\n        this.log_('Realtime connection established.');\n        this.conn_ = conn;\n        this.state_ = 1 /* CONNECTED */;\n        if (this.onReady_) {\n            this.onReady_(timestamp, this.sessionId);\n            this.onReady_ = null;\n        }\n        // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n        // send some pings.\n        if (this.primaryResponsesRequired_ === 0) {\n            this.log_('Primary connection is healthy.');\n            this.isHealthy_ = true;\n        }\n        else {\n            util_1.setTimeoutNonBlocking(function () {\n                _this.sendPingOnPrimaryIfNecessary_();\n            }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n        }\n    };\n    Connection.prototype.sendPingOnPrimaryIfNecessary_ = function () {\n        // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n        if (!this.isHealthy_ && this.state_ === 1 /* CONNECTED */) {\n            this.log_('sending ping on primary.');\n            this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n        }\n    };\n    Connection.prototype.onSecondaryConnectionLost_ = function () {\n        var conn = this.secondaryConn_;\n        this.secondaryConn_ = null;\n        if (this.tx_ === conn || this.rx_ === conn) {\n            // we are relying on this connection already in some capacity. Therefore, a failure is real\n            this.close();\n        }\n    };\n    /**\n     *\n     * @param {boolean} everConnected Whether or not the connection ever reached a server. Used to determine if\n     * we should flush the host cache\n     * @private\n     */\n    Connection.prototype.onConnectionLost_ = function (everConnected) {\n        this.conn_ = null;\n        // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n        // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n        if (!everConnected && this.state_ === 0 /* CONNECTING */) {\n            this.log_('Realtime connection failed.');\n            // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n            if (this.repoInfo_.isCacheableHost()) {\n                storage_1.PersistentStorage.remove('host:' + this.repoInfo_.host);\n                // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n                this.repoInfo_.internalHost = this.repoInfo_.host;\n            }\n        }\n        else if (this.state_ === 1 /* CONNECTED */) {\n            this.log_('Realtime connection lost.');\n        }\n        this.close();\n    };\n    /**\n     *\n     * @param {string} reason\n     * @private\n     */\n    Connection.prototype.onConnectionShutdown_ = function (reason) {\n        this.log_('Connection shutdown command received. Shutting down...');\n        if (this.onKill_) {\n            this.onKill_(reason);\n            this.onKill_ = null;\n        }\n        // We intentionally don't want to fire onDisconnect (kill is a different case),\n        // so clear the callback.\n        this.onDisconnect_ = null;\n        this.close();\n    };\n    Connection.prototype.sendData_ = function (data) {\n        if (this.state_ !== 1 /* CONNECTED */) {\n            throw 'Connection is not connected';\n        }\n        else {\n            this.tx_.send(data);\n        }\n    };\n    /**\n     * Cleans up this connection, calling the appropriate callbacks\n     */\n    Connection.prototype.close = function () {\n        if (this.state_ !== 2 /* DISCONNECTED */) {\n            this.log_('Closing realtime connection.');\n            this.state_ = 2 /* DISCONNECTED */;\n            this.closeConnections_();\n            if (this.onDisconnect_) {\n                this.onDisconnect_();\n                this.onDisconnect_ = null;\n            }\n        }\n    };\n    /**\n     *\n     * @private\n     */\n    Connection.prototype.closeConnections_ = function () {\n        this.log_('Shutting down all connections');\n        if (this.conn_) {\n            this.conn_.close();\n            this.conn_ = null;\n        }\n        if (this.secondaryConn_) {\n            this.secondaryConn_.close();\n            this.secondaryConn_ = null;\n        }\n        if (this.healthyTimeout_) {\n            clearTimeout(this.healthyTimeout_);\n            this.healthyTimeout_ = null;\n        }\n    };\n    return Connection;\n}());\nexports.Connection = Connection;\n\n//# sourceMappingURL=Connection.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nvar EventEmitter = /** @class */ (function () {\n    /**\n     * @param {!Array.<string>} allowedEvents_\n     */\n    function EventEmitter(allowedEvents_) {\n        this.allowedEvents_ = allowedEvents_;\n        this.listeners_ = {};\n        util_1.assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, 'Requires a non-empty array');\n    }\n    /**\n     * To be called by derived classes to trigger events.\n     * @param {!string} eventType\n     * @param {...*} var_args\n     */\n    EventEmitter.prototype.trigger = function (eventType) {\n        var var_args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            var_args[_i - 1] = arguments[_i];\n        }\n        if (Array.isArray(this.listeners_[eventType])) {\n            // Clone the list, since callbacks could add/remove listeners.\n            var listeners = this.listeners_[eventType].slice();\n            for (var i = 0; i < listeners.length; i++) {\n                listeners[i].callback.apply(listeners[i].context, var_args);\n            }\n        }\n    };\n    EventEmitter.prototype.on = function (eventType, callback, context) {\n        this.validateEventType_(eventType);\n        this.listeners_[eventType] = this.listeners_[eventType] || [];\n        this.listeners_[eventType].push({ callback: callback, context: context });\n        var eventData = this.getInitialEvent(eventType);\n        if (eventData) {\n            callback.apply(context, eventData);\n        }\n    };\n    EventEmitter.prototype.off = function (eventType, callback, context) {\n        this.validateEventType_(eventType);\n        var listeners = this.listeners_[eventType] || [];\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i].callback === callback &&\n                (!context || context === listeners[i].context)) {\n                listeners.splice(i, 1);\n                return;\n            }\n        }\n    };\n    EventEmitter.prototype.validateEventType_ = function (eventType) {\n        util_1.assert(this.allowedEvents_.find(function (et) {\n            return et === eventType;\n        }), 'Unknown event: ' + eventType);\n    };\n    return EventEmitter;\n}());\nexports.EventEmitter = EventEmitter;\n\n//# sourceMappingURL=EventEmitter.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar app_1 = require(\"@firebase/app\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar util_3 = require(\"@firebase/util\");\nvar util_4 = require(\"./util/util\");\nvar Path_1 = require(\"./util/Path\");\nvar VisibilityMonitor_1 = require(\"./util/VisibilityMonitor\");\nvar OnlineMonitor_1 = require(\"./util/OnlineMonitor\");\nvar util_5 = require(\"@firebase/util\");\nvar Connection_1 = require(\"../realtime/Connection\");\nvar util_6 = require(\"@firebase/util\");\nvar util_7 = require(\"@firebase/util\");\nvar ServerActions_1 = require(\"./ServerActions\");\nvar RECONNECT_MIN_DELAY = 1000;\nvar RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nvar RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nvar RECONNECT_DELAY_MULTIPLIER = 1.3;\nvar RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nvar SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nvar INVALID_AUTH_TOKEN_THRESHOLD = 3;\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nvar PersistentConnection = /** @class */ (function (_super) {\n    tslib_1.__extends(PersistentConnection, _super);\n    /**\n     * @implements {ServerActions}\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n     * @param onConnectStatus_\n     * @param onServerInfoUpdate_\n     * @param authTokenProvider_\n     * @param authOverride_\n     */\n    function PersistentConnection(repoInfo_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, authOverride_) {\n        var _this = _super.call(this) || this;\n        _this.repoInfo_ = repoInfo_;\n        _this.onDataUpdate_ = onDataUpdate_;\n        _this.onConnectStatus_ = onConnectStatus_;\n        _this.onServerInfoUpdate_ = onServerInfoUpdate_;\n        _this.authTokenProvider_ = authTokenProvider_;\n        _this.authOverride_ = authOverride_;\n        // Used for diagnostic logging.\n        _this.id = PersistentConnection.nextPersistentConnectionId_++;\n        _this.log_ = util_4.logWrapper('p:' + _this.id + ':');\n        /** @private {Object} */\n        _this.interruptReasons_ = {};\n        _this.listens_ = {};\n        _this.outstandingPuts_ = [];\n        _this.outstandingPutCount_ = 0;\n        _this.onDisconnectRequestQueue_ = [];\n        _this.connected_ = false;\n        _this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n        _this.securityDebugCallback_ = null;\n        _this.lastSessionId = null;\n        /** @private {number|null} */\n        _this.establishConnectionTimer_ = null;\n        /** @private {boolean} */\n        _this.visible_ = false;\n        // Before we get connected, we keep a queue of pending messages to send.\n        _this.requestCBHash_ = {};\n        _this.requestNumber_ = 0;\n        /** @private {?{\n         *   sendRequest(Object),\n         *   close()\n         * }} */\n        _this.realtime_ = null;\n        /** @private {string|null} */\n        _this.authToken_ = null;\n        _this.forceTokenRefresh_ = false;\n        _this.invalidAuthTokenCount_ = 0;\n        _this.firstConnection_ = true;\n        _this.lastConnectionAttemptTime_ = null;\n        _this.lastConnectionEstablishedTime_ = null;\n        if (authOverride_ && !util_7.isNodeSdk()) {\n            throw new Error('Auth override specified in options, but not supported on non Node.js platforms');\n        }\n        _this.scheduleConnect_(0);\n        VisibilityMonitor_1.VisibilityMonitor.getInstance().on('visible', _this.onVisible_, _this);\n        if (repoInfo_.host.indexOf('fblocal') === -1) {\n            OnlineMonitor_1.OnlineMonitor.getInstance().on('online', _this.onOnline_, _this);\n        }\n        return _this;\n    }\n    /**\n     * @param {!string} action\n     * @param {*} body\n     * @param {function(*)=} onResponse\n     * @protected\n     */\n    PersistentConnection.prototype.sendRequest = function (action, body, onResponse) {\n        var curReqNum = ++this.requestNumber_;\n        var msg = { r: curReqNum, a: action, b: body };\n        this.log_(util_2.stringify(msg));\n        util_3.assert(this.connected_, \"sendRequest call when we're not connected not allowed.\");\n        this.realtime_.sendRequest(msg);\n        if (onResponse) {\n            this.requestCBHash_[curReqNum] = onResponse;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n        var queryId = query.queryIdentifier();\n        var pathString = query.path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + queryId);\n        this.listens_[pathString] = this.listens_[pathString] || {};\n        util_3.assert(query.getQueryParams().isDefault() ||\n            !query.getQueryParams().loadsAllData(), 'listen() called for non-default but complete query');\n        util_3.assert(!this.listens_[pathString][queryId], 'listen() called twice for same path/queryId.');\n        var listenSpec = {\n            onComplete: onComplete,\n            hashFn: currentHashFn,\n            query: query,\n            tag: tag\n        };\n        this.listens_[pathString][queryId] = listenSpec;\n        if (this.connected_) {\n            this.sendListen_(listenSpec);\n        }\n    };\n    /**\n     * @param {!{onComplete(),\n     *           hashFn():!string,\n     *           query: !Query,\n     *           tag: ?number}} listenSpec\n     * @private\n     */\n    PersistentConnection.prototype.sendListen_ = function (listenSpec) {\n        var _this = this;\n        var query = listenSpec.query;\n        var pathString = query.path.toString();\n        var queryId = query.queryIdentifier();\n        this.log_('Listen on ' + pathString + ' for ' + queryId);\n        var req = { /*path*/ p: pathString };\n        var action = 'q';\n        // Only bother to send query if it's non-default.\n        if (listenSpec.tag) {\n            req['q'] = query.queryObject();\n            req['t'] = listenSpec.tag;\n        }\n        req['h'] = listenSpec.hashFn();\n        this.sendRequest(action, req, function (message) {\n            var payload = message['d'];\n            var status = message['s'];\n            // print warnings in any case...\n            PersistentConnection.warnOnListenWarnings_(payload, query);\n            var currentListenSpec = _this.listens_[pathString] && _this.listens_[pathString][queryId];\n            // only trigger actions if the listen hasn't been removed and readded\n            if (currentListenSpec === listenSpec) {\n                _this.log_('listen response', message);\n                if (status !== 'ok') {\n                    _this.removeListen_(pathString, queryId);\n                }\n                if (listenSpec.onComplete) {\n                    listenSpec.onComplete(status, payload);\n                }\n            }\n        });\n    };\n    /**\n     * @param {*} payload\n     * @param {!Query} query\n     * @private\n     */\n    PersistentConnection.warnOnListenWarnings_ = function (payload, query) {\n        if (payload && typeof payload === 'object' && util_1.contains(payload, 'w')) {\n            var warnings = util_1.safeGet(payload, 'w');\n            if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n                var indexSpec = '\".indexOn\": \"' +\n                    query\n                        .getQueryParams()\n                        .getIndex()\n                        .toString() +\n                    '\"';\n                var indexPath = query.path.toString();\n                util_4.warn(\"Using an unspecified index. Your data will be downloaded and \" +\n                    (\"filtered on the client. Consider adding \" + indexSpec + \" at \") +\n                    (indexPath + \" to your security rules for better performance.\"));\n            }\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.refreshAuthToken = function (token) {\n        this.authToken_ = token;\n        this.log_('Auth token refreshed');\n        if (this.authToken_) {\n            this.tryAuth();\n        }\n        else {\n            //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n            //the credential so we dont become authenticated next time we connect.\n            if (this.connected_) {\n                this.sendRequest('unauth', {}, function () { });\n            }\n        }\n        this.reduceReconnectDelayIfAdminCredential_(token);\n    };\n    /**\n     * @param {!string} credential\n     * @private\n     */\n    PersistentConnection.prototype.reduceReconnectDelayIfAdminCredential_ = function (credential) {\n        // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n        // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n        var isFirebaseSecret = credential && credential.length === 40;\n        if (isFirebaseSecret || util_5.isAdmin(credential)) {\n            this.log_('Admin auth credential detected.  Reducing max reconnect time.');\n            this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n        }\n    };\n    /**\n     * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n     * a auth revoked (the connection is closed).\n     */\n    PersistentConnection.prototype.tryAuth = function () {\n        var _this = this;\n        if (this.connected_ && this.authToken_) {\n            var token_1 = this.authToken_;\n            var authMethod = util_5.isValidFormat(token_1) ? 'auth' : 'gauth';\n            var requestData = { cred: token_1 };\n            if (this.authOverride_ === null) {\n                requestData['noauth'] = true;\n            }\n            else if (typeof this.authOverride_ === 'object') {\n                requestData['authvar'] = this.authOverride_;\n            }\n            this.sendRequest(authMethod, requestData, function (res) {\n                var status = res['s'];\n                var data = res['d'] || 'error';\n                if (_this.authToken_ === token_1) {\n                    if (status === 'ok') {\n                        _this.invalidAuthTokenCount_ = 0;\n                    }\n                    else {\n                        // Triggers reconnect and force refresh for auth token\n                        _this.onAuthRevoked_(status, data);\n                    }\n                }\n            });\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.unlisten = function (query, tag) {\n        var pathString = query.path.toString();\n        var queryId = query.queryIdentifier();\n        this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n        util_3.assert(query.getQueryParams().isDefault() ||\n            !query.getQueryParams().loadsAllData(), 'unlisten() called for non-default but complete query');\n        var listen = this.removeListen_(pathString, queryId);\n        if (listen && this.connected_) {\n            this.sendUnlisten_(pathString, queryId, query.queryObject(), tag);\n        }\n    };\n    PersistentConnection.prototype.sendUnlisten_ = function (pathString, queryId, queryObj, tag) {\n        this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n        var req = { /*path*/ p: pathString };\n        var action = 'n';\n        // Only bother sending queryId if it's non-default.\n        if (tag) {\n            req['q'] = queryObj;\n            req['t'] = tag;\n        }\n        this.sendRequest(action, req);\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.onDisconnectPut = function (pathString, data, onComplete) {\n        if (this.connected_) {\n            this.sendOnDisconnect_('o', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString: pathString,\n                action: 'o',\n                data: data,\n                onComplete: onComplete\n            });\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.onDisconnectMerge = function (pathString, data, onComplete) {\n        if (this.connected_) {\n            this.sendOnDisconnect_('om', pathString, data, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString: pathString,\n                action: 'om',\n                data: data,\n                onComplete: onComplete\n            });\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.onDisconnectCancel = function (pathString, onComplete) {\n        if (this.connected_) {\n            this.sendOnDisconnect_('oc', pathString, null, onComplete);\n        }\n        else {\n            this.onDisconnectRequestQueue_.push({\n                pathString: pathString,\n                action: 'oc',\n                data: null,\n                onComplete: onComplete\n            });\n        }\n    };\n    PersistentConnection.prototype.sendOnDisconnect_ = function (action, pathString, data, onComplete) {\n        var request = { /*path*/ p: pathString, /*data*/ d: data };\n        this.log_('onDisconnect ' + action, request);\n        this.sendRequest(action, request, function (response) {\n            if (onComplete) {\n                setTimeout(function () {\n                    onComplete(response['s'], response['d']);\n                }, Math.floor(0));\n            }\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.put = function (pathString, data, onComplete, hash) {\n        this.putInternal('p', pathString, data, onComplete, hash);\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.merge = function (pathString, data, onComplete, hash) {\n        this.putInternal('m', pathString, data, onComplete, hash);\n    };\n    PersistentConnection.prototype.putInternal = function (action, pathString, data, onComplete, hash) {\n        var request = {\n            /*path*/ p: pathString,\n            /*data*/ d: data\n        };\n        if (hash !== undefined)\n            request['h'] = hash;\n        // TODO: Only keep track of the most recent put for a given path?\n        this.outstandingPuts_.push({\n            action: action,\n            request: request,\n            onComplete: onComplete\n        });\n        this.outstandingPutCount_++;\n        var index = this.outstandingPuts_.length - 1;\n        if (this.connected_) {\n            this.sendPut_(index);\n        }\n        else {\n            this.log_('Buffering put: ' + pathString);\n        }\n    };\n    PersistentConnection.prototype.sendPut_ = function (index) {\n        var _this = this;\n        var action = this.outstandingPuts_[index].action;\n        var request = this.outstandingPuts_[index].request;\n        var onComplete = this.outstandingPuts_[index].onComplete;\n        this.outstandingPuts_[index].queued = this.connected_;\n        this.sendRequest(action, request, function (message) {\n            _this.log_(action + ' response', message);\n            delete _this.outstandingPuts_[index];\n            _this.outstandingPutCount_--;\n            // Clean up array occasionally.\n            if (_this.outstandingPutCount_ === 0) {\n                _this.outstandingPuts_ = [];\n            }\n            if (onComplete)\n                onComplete(message['s'], message['d']);\n        });\n    };\n    /**\n     * @inheritDoc\n     */\n    PersistentConnection.prototype.reportStats = function (stats) {\n        var _this = this;\n        // If we're not connected, we just drop the stats.\n        if (this.connected_) {\n            var request = { /*counters*/ c: stats };\n            this.log_('reportStats', request);\n            this.sendRequest(/*stats*/ 's', request, function (result) {\n                var status = result['s'];\n                if (status !== 'ok') {\n                    var errorReason = result['d'];\n                    _this.log_('reportStats', 'Error sending stats: ' + errorReason);\n                }\n            });\n        }\n    };\n    /**\n     * @param {*} message\n     * @private\n     */\n    PersistentConnection.prototype.onDataMessage_ = function (message) {\n        if ('r' in message) {\n            // this is a response\n            this.log_('from server: ' + util_2.stringify(message));\n            var reqNum = message['r'];\n            var onResponse = this.requestCBHash_[reqNum];\n            if (onResponse) {\n                delete this.requestCBHash_[reqNum];\n                onResponse(message['b']);\n            }\n        }\n        else if ('error' in message) {\n            throw 'A server-side error has occurred: ' + message['error'];\n        }\n        else if ('a' in message) {\n            // a and b are action and body, respectively\n            this.onDataPush_(message['a'], message['b']);\n        }\n    };\n    PersistentConnection.prototype.onDataPush_ = function (action, body) {\n        this.log_('handleServerMessage', action, body);\n        if (action === 'd')\n            this.onDataUpdate_(body['p'], body['d'], \n            /*isMerge*/ false, body['t']);\n        else if (action === 'm')\n            this.onDataUpdate_(body['p'], body['d'], \n            /*isMerge=*/ true, body['t']);\n        else if (action === 'c')\n            this.onListenRevoked_(body['p'], body['q']);\n        else if (action === 'ac')\n            this.onAuthRevoked_(body['s'], body['d']);\n        else if (action === 'sd')\n            this.onSecurityDebugPacket_(body);\n        else\n            util_4.error('Unrecognized action received from server: ' +\n                util_2.stringify(action) +\n                '\\nAre you using the latest client?');\n    };\n    PersistentConnection.prototype.onReady_ = function (timestamp, sessionId) {\n        this.log_('connection ready');\n        this.connected_ = true;\n        this.lastConnectionEstablishedTime_ = new Date().getTime();\n        this.handleTimestamp_(timestamp);\n        this.lastSessionId = sessionId;\n        if (this.firstConnection_) {\n            this.sendConnectStats_();\n        }\n        this.restoreState_();\n        this.firstConnection_ = false;\n        this.onConnectStatus_(true);\n    };\n    PersistentConnection.prototype.scheduleConnect_ = function (timeout) {\n        var _this = this;\n        util_3.assert(!this.realtime_, \"Scheduling a connect when we're already connected/ing?\");\n        if (this.establishConnectionTimer_) {\n            clearTimeout(this.establishConnectionTimer_);\n        }\n        // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n        // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n        this.establishConnectionTimer_ = setTimeout(function () {\n            _this.establishConnectionTimer_ = null;\n            _this.establishConnection_();\n        }, Math.floor(timeout));\n    };\n    /**\n     * @param {boolean} visible\n     * @private\n     */\n    PersistentConnection.prototype.onVisible_ = function (visible) {\n        // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n        if (visible &&\n            !this.visible_ &&\n            this.reconnectDelay_ === this.maxReconnectDelay_) {\n            this.log_('Window became visible.  Reducing delay.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        this.visible_ = visible;\n    };\n    PersistentConnection.prototype.onOnline_ = function (online) {\n        if (online) {\n            this.log_('Browser went online.');\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n        else {\n            this.log_('Browser went offline.  Killing connection.');\n            if (this.realtime_) {\n                this.realtime_.close();\n            }\n        }\n    };\n    PersistentConnection.prototype.onRealtimeDisconnect_ = function () {\n        this.log_('data client disconnected');\n        this.connected_ = false;\n        this.realtime_ = null;\n        // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n        this.cancelSentTransactions_();\n        // Clear out the pending requests.\n        this.requestCBHash_ = {};\n        if (this.shouldReconnect_()) {\n            if (!this.visible_) {\n                this.log_(\"Window isn't visible.  Delaying reconnect.\");\n                this.reconnectDelay_ = this.maxReconnectDelay_;\n                this.lastConnectionAttemptTime_ = new Date().getTime();\n            }\n            else if (this.lastConnectionEstablishedTime_) {\n                // If we've been connected long enough, reset reconnect delay to minimum.\n                var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;\n                if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT)\n                    this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n                this.lastConnectionEstablishedTime_ = null;\n            }\n            var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;\n            var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);\n            reconnectDelay = Math.random() * reconnectDelay;\n            this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n            this.scheduleConnect_(reconnectDelay);\n            // Adjust reconnect delay for next time.\n            this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);\n        }\n        this.onConnectStatus_(false);\n    };\n    PersistentConnection.prototype.establishConnection_ = function () {\n        if (this.shouldReconnect_()) {\n            this.log_('Making a connection attempt');\n            this.lastConnectionAttemptTime_ = new Date().getTime();\n            this.lastConnectionEstablishedTime_ = null;\n            var onDataMessage_1 = this.onDataMessage_.bind(this);\n            var onReady_1 = this.onReady_.bind(this);\n            var onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);\n            var connId_1 = this.id + ':' + PersistentConnection.nextConnectionId_++;\n            var self_1 = this;\n            var lastSessionId_1 = this.lastSessionId;\n            var canceled_1 = false;\n            var connection_1 = null;\n            var closeFn_1 = function () {\n                if (connection_1) {\n                    connection_1.close();\n                }\n                else {\n                    canceled_1 = true;\n                    onDisconnect_1();\n                }\n            };\n            var sendRequestFn = function (msg) {\n                util_3.assert(connection_1, \"sendRequest call when we're not connected not allowed.\");\n                connection_1.sendRequest(msg);\n            };\n            this.realtime_ = {\n                close: closeFn_1,\n                sendRequest: sendRequestFn\n            };\n            var forceRefresh = this.forceTokenRefresh_;\n            this.forceTokenRefresh_ = false;\n            // First fetch auth token, and establish connection after fetching the token was successful\n            this.authTokenProvider_\n                .getToken(forceRefresh)\n                .then(function (result) {\n                if (!canceled_1) {\n                    util_4.log('getToken() completed. Creating connection.');\n                    self_1.authToken_ = result && result.accessToken;\n                    connection_1 = new Connection_1.Connection(connId_1, self_1.repoInfo_, onDataMessage_1, onReady_1, onDisconnect_1, \n                    /* onKill= */ function (reason) {\n                        util_4.warn(reason + ' (' + self_1.repoInfo_.toString() + ')');\n                        self_1.interrupt(SERVER_KILL_INTERRUPT_REASON);\n                    }, lastSessionId_1);\n                }\n                else {\n                    util_4.log('getToken() completed but was canceled');\n                }\n            })\n                .then(null, function (error) {\n                self_1.log_('Failed to get token: ' + error);\n                if (!canceled_1) {\n                    if (util_6.CONSTANTS.NODE_ADMIN) {\n                        // This may be a critical error for the Admin Node.js SDK, so log a warning.\n                        // But getToken() may also just have temporarily failed, so we still want to\n                        // continue retrying.\n                        util_4.warn(error);\n                    }\n                    closeFn_1();\n                }\n            });\n        }\n    };\n    /**\n     * @param {string} reason\n     */\n    PersistentConnection.prototype.interrupt = function (reason) {\n        util_4.log('Interrupting connection for reason: ' + reason);\n        this.interruptReasons_[reason] = true;\n        if (this.realtime_) {\n            this.realtime_.close();\n        }\n        else {\n            if (this.establishConnectionTimer_) {\n                clearTimeout(this.establishConnectionTimer_);\n                this.establishConnectionTimer_ = null;\n            }\n            if (this.connected_) {\n                this.onRealtimeDisconnect_();\n            }\n        }\n    };\n    /**\n     * @param {string} reason\n     */\n    PersistentConnection.prototype.resume = function (reason) {\n        util_4.log('Resuming connection for reason: ' + reason);\n        delete this.interruptReasons_[reason];\n        if (util_1.isEmpty(this.interruptReasons_)) {\n            this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n            if (!this.realtime_) {\n                this.scheduleConnect_(0);\n            }\n        }\n    };\n    PersistentConnection.prototype.handleTimestamp_ = function (timestamp) {\n        var delta = timestamp - new Date().getTime();\n        this.onServerInfoUpdate_({ serverTimeOffset: delta });\n    };\n    PersistentConnection.prototype.cancelSentTransactions_ = function () {\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\n            var put = this.outstandingPuts_[i];\n            if (put && /*hash*/ 'h' in put.request && put.queued) {\n                if (put.onComplete)\n                    put.onComplete('disconnect');\n                delete this.outstandingPuts_[i];\n                this.outstandingPutCount_--;\n            }\n        }\n        // Clean up array occasionally.\n        if (this.outstandingPutCount_ === 0)\n            this.outstandingPuts_ = [];\n    };\n    /**\n     * @param {!string} pathString\n     * @param {Array.<*>=} query\n     * @private\n     */\n    PersistentConnection.prototype.onListenRevoked_ = function (pathString, query) {\n        // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n        var queryId;\n        if (!query) {\n            queryId = 'default';\n        }\n        else {\n            queryId = query.map(function (q) { return util_4.ObjectToUniqueKey(q); }).join('$');\n        }\n        var listen = this.removeListen_(pathString, queryId);\n        if (listen && listen.onComplete)\n            listen.onComplete('permission_denied');\n    };\n    /**\n     * @param {!string} pathString\n     * @param {!string} queryId\n     * @return {{queries:Array.<Query>, onComplete:function(string)}}\n     * @private\n     */\n    PersistentConnection.prototype.removeListen_ = function (pathString, queryId) {\n        var normalizedPathString = new Path_1.Path(pathString).toString(); // normalize path.\n        var listen;\n        if (this.listens_[normalizedPathString] !== undefined) {\n            listen = this.listens_[normalizedPathString][queryId];\n            delete this.listens_[normalizedPathString][queryId];\n            if (util_1.getCount(this.listens_[normalizedPathString]) === 0) {\n                delete this.listens_[normalizedPathString];\n            }\n        }\n        else {\n            // all listens for this path has already been removed\n            listen = undefined;\n        }\n        return listen;\n    };\n    PersistentConnection.prototype.onAuthRevoked_ = function (statusCode, explanation) {\n        util_4.log('Auth token revoked: ' + statusCode + '/' + explanation);\n        this.authToken_ = null;\n        this.forceTokenRefresh_ = true;\n        this.realtime_.close();\n        if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n            // We'll wait a couple times before logging the warning / increasing the\n            // retry period since oauth tokens will report as \"invalid\" if they're\n            // just expired. Plus there may be transient issues that resolve themselves.\n            this.invalidAuthTokenCount_++;\n            if (this.invalidAuthTokenCount_ >= INVALID_AUTH_TOKEN_THRESHOLD) {\n                // Set a long reconnect delay because recovery is unlikely\n                this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n                // Notify the auth token provider that the token is invalid, which will log\n                // a warning\n                this.authTokenProvider_.notifyForInvalidToken();\n            }\n        }\n    };\n    PersistentConnection.prototype.onSecurityDebugPacket_ = function (body) {\n        if (this.securityDebugCallback_) {\n            this.securityDebugCallback_(body);\n        }\n        else {\n            if ('msg' in body && typeof console !== 'undefined') {\n                console.log('FIREBASE: ' + body['msg'].replace('\\n', '\\nFIREBASE: '));\n            }\n        }\n    };\n    PersistentConnection.prototype.restoreState_ = function () {\n        var _this = this;\n        //Re-authenticate ourselves if we have a credential stored.\n        this.tryAuth();\n        // Puts depend on having received the corresponding data update from the server before they complete, so we must\n        // make sure to send listens before puts.\n        util_1.forEach(this.listens_, function (pathString, queries) {\n            util_1.forEach(queries, function (key, listenSpec) {\n                _this.sendListen_(listenSpec);\n            });\n        });\n        for (var i = 0; i < this.outstandingPuts_.length; i++) {\n            if (this.outstandingPuts_[i])\n                this.sendPut_(i);\n        }\n        while (this.onDisconnectRequestQueue_.length) {\n            var request = this.onDisconnectRequestQueue_.shift();\n            this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);\n        }\n    };\n    /**\n     * Sends client stats for first connection\n     * @private\n     */\n    PersistentConnection.prototype.sendConnectStats_ = function () {\n        var stats = {};\n        var clientName = 'js';\n        if (util_6.CONSTANTS.NODE_ADMIN) {\n            clientName = 'admin_node';\n        }\n        else if (util_6.CONSTANTS.NODE_CLIENT) {\n            clientName = 'node';\n        }\n        stats['sdk.' + clientName + '.' + app_1.default.SDK_VERSION.replace(/\\./g, '-')] = 1;\n        if (util_7.isMobileCordova()) {\n            stats['framework.cordova'] = 1;\n        }\n        else if (util_7.isReactNative()) {\n            stats['framework.reactnative'] = 1;\n        }\n        this.reportStats(stats);\n    };\n    /**\n     * @return {boolean}\n     * @private\n     */\n    PersistentConnection.prototype.shouldReconnect_ = function () {\n        var online = OnlineMonitor_1.OnlineMonitor.getInstance().currentlyOnline();\n        return util_1.isEmpty(this.interruptReasons_) && online;\n    };\n    /**\n     * @private\n     */\n    PersistentConnection.nextPersistentConnectionId_ = 0;\n    /**\n     * Counter for number of connections created. Mainly used for tagging in the logs\n     * @type {number}\n     * @private\n     */\n    PersistentConnection.nextConnectionId_ = 0;\n    return PersistentConnection;\n}(ServerActions_1.ServerActions));\nexports.PersistentConnection = PersistentConnection;\n\n//# sourceMappingURL=PersistentConnection.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ The collection to \"listen\" to.\n * @constructor\n */\nvar StatsListener = /** @class */ (function () {\n    function StatsListener(collection_) {\n        this.collection_ = collection_;\n        this.last_ = null;\n    }\n    StatsListener.prototype.get = function () {\n        var newStats = this.collection_.get();\n        var delta = util_1.clone(newStats);\n        if (this.last_) {\n            util_1.forEach(this.last_, function (stat, value) {\n                delta[stat] = delta[stat] - value;\n            });\n        }\n        this.last_ = newStats;\n        return delta;\n    };\n    return StatsListener;\n}());\nexports.StatsListener = StatsListener;\n\n//# sourceMappingURL=StatsListener.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChildrenNode_1 = require(\"../snap/ChildrenNode\");\nvar CacheNode_1 = require(\"./CacheNode\");\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n *\n * @constructor\n */\nvar ViewCache = /** @class */ (function () {\n    /**\n     *\n     * @param {!CacheNode} eventCache_\n     * @param {!CacheNode} serverCache_\n     */\n    function ViewCache(eventCache_, serverCache_) {\n        this.eventCache_ = eventCache_;\n        this.serverCache_ = serverCache_;\n    }\n    /**\n     * @param {!Node} eventSnap\n     * @param {boolean} complete\n     * @param {boolean} filtered\n     * @return {!ViewCache}\n     */\n    ViewCache.prototype.updateEventSnap = function (eventSnap, complete, filtered) {\n        return new ViewCache(new CacheNode_1.CacheNode(eventSnap, complete, filtered), this.serverCache_);\n    };\n    /**\n     * @param {!Node} serverSnap\n     * @param {boolean} complete\n     * @param {boolean} filtered\n     * @return {!ViewCache}\n     */\n    ViewCache.prototype.updateServerSnap = function (serverSnap, complete, filtered) {\n        return new ViewCache(this.eventCache_, new CacheNode_1.CacheNode(serverSnap, complete, filtered));\n    };\n    /**\n     * @return {!CacheNode}\n     */\n    ViewCache.prototype.getEventCache = function () {\n        return this.eventCache_;\n    };\n    /**\n     * @return {?Node}\n     */\n    ViewCache.prototype.getCompleteEventSnap = function () {\n        return this.eventCache_.isFullyInitialized()\n            ? this.eventCache_.getNode()\n            : null;\n    };\n    /**\n     * @return {!CacheNode}\n     */\n    ViewCache.prototype.getServerCache = function () {\n        return this.serverCache_;\n    };\n    /**\n     * @return {?Node}\n     */\n    ViewCache.prototype.getCompleteServerSnap = function () {\n        return this.serverCache_.isFullyInitialized()\n            ? this.serverCache_.getNode()\n            : null;\n    };\n    /**\n     * @const\n     * @type {ViewCache}\n     */\n    ViewCache.Empty = new ViewCache(new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, \n    /*fullyInitialized=*/ false, \n    /*filtered=*/ false), new CacheNode_1.CacheNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, \n    /*fullyInitialized=*/ false, \n    /*filtered=*/ false));\n    return ViewCache;\n}());\nexports.ViewCache = ViewCache;\n\n//# sourceMappingURL=ViewCache.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CacheNode_1 = require(\"./view/CacheNode\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar ViewCache_1 = require(\"./view/ViewCache\");\nvar View_1 = require(\"./view/View\");\nvar __referenceConstructor;\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nvar SyncPoint = /** @class */ (function () {\n    function SyncPoint() {\n        /**\n         * The Views being tracked at this location in the tree, stored as a map where the key is a\n         * queryId and the value is the View for that query.\n         *\n         * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n         *\n         * @type {!Object.<!string, !View>}\n         * @private\n         */\n        this.views_ = {};\n    }\n    Object.defineProperty(SyncPoint, \"__referenceConstructor\", {\n        get: function () {\n            util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');\n            return __referenceConstructor;\n        },\n        set: function (val) {\n            util_1.assert(!__referenceConstructor, '__referenceConstructor has already been defined');\n            __referenceConstructor = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {boolean}\n     */\n    SyncPoint.prototype.isEmpty = function () {\n        return util_2.isEmpty(this.views_);\n    };\n    /**\n     *\n     * @param {!Operation} operation\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} optCompleteServerCache\n     * @return {!Array.<!Event>}\n     */\n    SyncPoint.prototype.applyOperation = function (operation, writesCache, optCompleteServerCache) {\n        var queryId = operation.source.queryId;\n        if (queryId !== null) {\n            var view = util_2.safeGet(this.views_, queryId);\n            util_1.assert(view != null, 'SyncTree gave us an op for an invalid query.');\n            return view.applyOperation(operation, writesCache, optCompleteServerCache);\n        }\n        else {\n            var events_1 = [];\n            util_2.forEach(this.views_, function (key, view) {\n                events_1 = events_1.concat(view.applyOperation(operation, writesCache, optCompleteServerCache));\n            });\n            return events_1;\n        }\n    };\n    /**\n     * Add an event callback for the specified query.\n     *\n     * @param {!Query} query\n     * @param {!EventRegistration} eventRegistration\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} serverCache Complete server cache, if we have it.\n     * @param {boolean} serverCacheComplete\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncPoint.prototype.addEventRegistration = function (query, eventRegistration, writesCache, serverCache, serverCacheComplete) {\n        var queryId = query.queryIdentifier();\n        var view = util_2.safeGet(this.views_, queryId);\n        if (!view) {\n            // TODO: make writesCache take flag for complete server node\n            var eventCache = writesCache.calcCompleteEventCache(serverCacheComplete ? serverCache : null);\n            var eventCacheComplete = false;\n            if (eventCache) {\n                eventCacheComplete = true;\n            }\n            else if (serverCache instanceof ChildrenNode_1.ChildrenNode) {\n                eventCache = writesCache.calcCompleteEventChildren(serverCache);\n                eventCacheComplete = false;\n            }\n            else {\n                eventCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                eventCacheComplete = false;\n            }\n            var viewCache = new ViewCache_1.ViewCache(new CacheNode_1.CacheNode(\n            /** @type {!Node} */ (eventCache), eventCacheComplete, false), new CacheNode_1.CacheNode(\n            /** @type {!Node} */ (serverCache), serverCacheComplete, false));\n            view = new View_1.View(query, viewCache);\n            this.views_[queryId] = view;\n        }\n        // This is guaranteed to exist now, we just created anything that was missing\n        view.addEventRegistration(eventRegistration);\n        return view.getInitialEvents(eventRegistration);\n    };\n    /**\n     * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n     *\n     * If query is the default query, we'll check all views for the specified eventRegistration.\n     * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n     *\n     * @param {!Query} query\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n     * @return {{removed:!Array.<!Query>, events:!Array.<!Event>}} removed queries and any cancel events\n     */\n    SyncPoint.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n        var queryId = query.queryIdentifier();\n        var removed = [];\n        var cancelEvents = [];\n        var hadCompleteView = this.hasCompleteView();\n        if (queryId === 'default') {\n            // When you do ref.off(...), we search all views for the registration to remove.\n            var self_1 = this;\n            util_2.forEach(this.views_, function (viewQueryId, view) {\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n                if (view.isEmpty()) {\n                    delete self_1.views_[viewQueryId];\n                    // We'll deal with complete views later.\n                    if (!view\n                        .getQuery()\n                        .getQueryParams()\n                        .loadsAllData()) {\n                        removed.push(view.getQuery());\n                    }\n                }\n            });\n        }\n        else {\n            // remove the callback from the specific view.\n            var view = util_2.safeGet(this.views_, queryId);\n            if (view) {\n                cancelEvents = cancelEvents.concat(view.removeEventRegistration(eventRegistration, cancelError));\n                if (view.isEmpty()) {\n                    delete this.views_[queryId];\n                    // We'll deal with complete views later.\n                    if (!view\n                        .getQuery()\n                        .getQueryParams()\n                        .loadsAllData()) {\n                        removed.push(view.getQuery());\n                    }\n                }\n            }\n        }\n        if (hadCompleteView && !this.hasCompleteView()) {\n            // We removed our last complete view.\n            removed.push(new SyncPoint.__referenceConstructor(query.repo, query.path));\n        }\n        return { removed: removed, events: cancelEvents };\n    };\n    /**\n     * @return {!Array.<!View>}\n     */\n    SyncPoint.prototype.getQueryViews = function () {\n        var _this = this;\n        var values = Object.keys(this.views_).map(function (key) { return _this.views_[key]; });\n        return values.filter(function (view) {\n            return !view\n                .getQuery()\n                .getQueryParams()\n                .loadsAllData();\n        });\n    };\n    /**\n     *\n     * @param {!Path} path The path to the desired complete snapshot\n     * @return {?Node} A complete cache, if it exists\n     */\n    SyncPoint.prototype.getCompleteServerCache = function (path) {\n        var serverCache = null;\n        util_2.forEach(this.views_, function (key, view) {\n            serverCache = serverCache || view.getCompleteServerCache(path);\n        });\n        return serverCache;\n    };\n    /**\n     * @param {!Query} query\n     * @return {?View}\n     */\n    SyncPoint.prototype.viewForQuery = function (query) {\n        var params = query.getQueryParams();\n        if (params.loadsAllData()) {\n            return this.getCompleteView();\n        }\n        else {\n            var queryId = query.queryIdentifier();\n            return util_2.safeGet(this.views_, queryId);\n        }\n    };\n    /**\n     * @param {!Query} query\n     * @return {boolean}\n     */\n    SyncPoint.prototype.viewExistsForQuery = function (query) {\n        return this.viewForQuery(query) != null;\n    };\n    /**\n     * @return {boolean}\n     */\n    SyncPoint.prototype.hasCompleteView = function () {\n        return this.getCompleteView() != null;\n    };\n    /**\n     * @return {?View}\n     */\n    SyncPoint.prototype.getCompleteView = function () {\n        var completeView = util_2.findValue(this.views_, function (view) {\n            return view\n                .getQuery()\n                .getQueryParams()\n                .loadsAllData();\n        });\n        return completeView || null;\n    };\n    return SyncPoint;\n}());\nexports.SyncPoint = SyncPoint;\n\n//# sourceMappingURL=SyncPoint.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Operation_1 = require(\"./Operation\");\nvar Path_1 = require(\"../util/Path\");\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!Node} snap\n * @constructor\n * @implements {Operation}\n */\nvar Overwrite = /** @class */ (function () {\n    function Overwrite(source, path, snap) {\n        this.source = source;\n        this.path = path;\n        this.snap = snap;\n        /** @inheritDoc */\n        this.type = Operation_1.OperationType.OVERWRITE;\n    }\n    Overwrite.prototype.operationForChild = function (childName) {\n        if (this.path.isEmpty()) {\n            return new Overwrite(this.source, Path_1.Path.Empty, this.snap.getImmediateChild(childName));\n        }\n        else {\n            return new Overwrite(this.source, this.path.popFront(), this.snap);\n        }\n    };\n    return Overwrite;\n}());\nexports.Overwrite = Overwrite;\n\n//# sourceMappingURL=Overwrite.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Implements a set with a count of elements.\n *\n * @template K, V\n */\nvar CountedSet = /** @class */ (function () {\n    function CountedSet() {\n        this.set = {};\n    }\n    /**\n     * @param {!K} item\n     * @param {V} val\n     */\n    CountedSet.prototype.add = function (item, val) {\n        this.set[item] = val !== null ? val : true;\n    };\n    /**\n     * @param {!K} key\n     * @return {boolean}\n     */\n    CountedSet.prototype.contains = function (key) {\n        return util_1.contains(this.set, key);\n    };\n    /**\n     * @param {!K} item\n     * @return {V}\n     */\n    CountedSet.prototype.get = function (item) {\n        return this.contains(item) ? this.set[item] : undefined;\n    };\n    /**\n     * @param {!K} item\n     */\n    CountedSet.prototype.remove = function (item) {\n        delete this.set[item];\n    };\n    /**\n     * Deletes everything in the set\n     */\n    CountedSet.prototype.clear = function () {\n        this.set = {};\n    };\n    /**\n     * True if there's nothing in the set\n     * @return {boolean}\n     */\n    CountedSet.prototype.isEmpty = function () {\n        return util_1.isEmpty(this.set);\n    };\n    /**\n     * @return {number} The number of items in the set\n     */\n    CountedSet.prototype.count = function () {\n        return util_1.getCount(this.set);\n    };\n    /**\n     * Run a function on each k,v pair in the set\n     * @param {function(K, V)} fn\n     */\n    CountedSet.prototype.each = function (fn) {\n        util_1.forEach(this.set, function (k, v) { return fn(k, v); });\n    };\n    /**\n     * Mostly for debugging\n     * @return {Array.<K>} The keys present in this CountedSet\n     */\n    CountedSet.prototype.keys = function () {\n        var keys = [];\n        util_1.forEach(this.set, function (k) {\n            keys.push(k);\n        });\n        return keys;\n    };\n    return CountedSet;\n}());\nexports.CountedSet = CountedSet;\n\n//# sourceMappingURL=CountedSet.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Path_1 = require(\"./util/Path\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar CountedSet_1 = require(\"./util/CountedSet\");\n/**\n * Helper class to store a sparse set of snapshots.\n *\n * @constructor\n */\nvar SparseSnapshotTree = /** @class */ (function () {\n    function SparseSnapshotTree() {\n        /**\n         * @private\n         * @type {Node}\n         */\n        this.value_ = null;\n        /**\n         * @private\n         * @type {CountedSet}\n         */\n        this.children_ = null;\n    }\n    /**\n     * Gets the node stored at the given path if one exists.\n     *\n     * @param {!Path} path Path to look up snapshot for.\n     * @return {?Node} The retrieved node, or null.\n     */\n    SparseSnapshotTree.prototype.find = function (path) {\n        if (this.value_ != null) {\n            return this.value_.getChild(path);\n        }\n        else if (!path.isEmpty() && this.children_ != null) {\n            var childKey = path.getFront();\n            path = path.popFront();\n            if (this.children_.contains(childKey)) {\n                var childTree = this.children_.get(childKey);\n                return childTree.find(path);\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Stores the given node at the specified path. If there is already a node\n     * at a shallower path, it merges the new data into that snapshot node.\n     *\n     * @param {!Path} path Path to look up snapshot for.\n     * @param {!Node} data The new data, or null.\n     */\n    SparseSnapshotTree.prototype.remember = function (path, data) {\n        if (path.isEmpty()) {\n            this.value_ = data;\n            this.children_ = null;\n        }\n        else if (this.value_ !== null) {\n            this.value_ = this.value_.updateChild(path, data);\n        }\n        else {\n            if (this.children_ == null) {\n                this.children_ = new CountedSet_1.CountedSet();\n            }\n            var childKey = path.getFront();\n            if (!this.children_.contains(childKey)) {\n                this.children_.add(childKey, new SparseSnapshotTree());\n            }\n            var child = this.children_.get(childKey);\n            path = path.popFront();\n            child.remember(path, data);\n        }\n    };\n    /**\n     * Purge the data at path from the cache.\n     *\n     * @param {!Path} path Path to look up snapshot for.\n     * @return {boolean} True if this node should now be removed.\n     */\n    SparseSnapshotTree.prototype.forget = function (path) {\n        if (path.isEmpty()) {\n            this.value_ = null;\n            this.children_ = null;\n            return true;\n        }\n        else {\n            if (this.value_ !== null) {\n                if (this.value_.isLeafNode()) {\n                    // We're trying to forget a node that doesn't exist\n                    return false;\n                }\n                else {\n                    var value = this.value_;\n                    this.value_ = null;\n                    var self_1 = this;\n                    value.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, tree) {\n                        self_1.remember(new Path_1.Path(key), tree);\n                    });\n                    return this.forget(path);\n                }\n            }\n            else if (this.children_ !== null) {\n                var childKey = path.getFront();\n                path = path.popFront();\n                if (this.children_.contains(childKey)) {\n                    var safeToRemove = this.children_.get(childKey).forget(path);\n                    if (safeToRemove) {\n                        this.children_.remove(childKey);\n                    }\n                }\n                if (this.children_.isEmpty()) {\n                    this.children_ = null;\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return true;\n            }\n        }\n    };\n    /**\n     * Recursively iterates through all of the stored tree and calls the\n     * callback on each one.\n     *\n     * @param {!Path} prefixPath Path to look up node for.\n     * @param {!Function} func The function to invoke for each tree.\n     */\n    SparseSnapshotTree.prototype.forEachTree = function (prefixPath, func) {\n        if (this.value_ !== null) {\n            func(prefixPath, this.value_);\n        }\n        else {\n            this.forEachChild(function (key, tree) {\n                var path = new Path_1.Path(prefixPath.toString() + '/' + key);\n                tree.forEachTree(path, func);\n            });\n        }\n    };\n    /**\n     * Iterates through each immediate child and triggers the callback.\n     *\n     * @param {!Function} func The function to invoke for each child.\n     */\n    SparseSnapshotTree.prototype.forEachChild = function (func) {\n        if (this.children_ !== null) {\n            this.children_.each(function (key, tree) {\n                func(key, tree);\n            });\n        }\n    };\n    return SparseSnapshotTree;\n}());\nexports.SparseSnapshotTree = SparseSnapshotTree;\n\n//# sourceMappingURL=SparseSnapshotTree.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Path_1 = require(\"./Path\");\nvar SparseSnapshotTree_1 = require(\"../SparseSnapshotTree\");\nvar LeafNode_1 = require(\"../snap/LeafNode\");\nvar nodeFromJSON_1 = require(\"../snap/nodeFromJSON\");\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\n/**\n * Generate placeholders for deferred values.\n * @param {?Object} values\n * @return {!Object}\n */\nexports.generateWithValues = function (values) {\n    values = values || {};\n    values['timestamp'] = values['timestamp'] || new Date().getTime();\n    return values;\n};\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n * @param {(Object|string|number|boolean)} value\n * @param {!Object} serverValues\n * @return {!(string|number|boolean)}\n */\nexports.resolveDeferredValue = function (value, serverValues) {\n    if (!value || typeof value !== 'object') {\n        return value;\n    }\n    else {\n        util_1.assert('.sv' in value, 'Unexpected leaf node or priority contents');\n        return serverValues[value['.sv']];\n    }\n};\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param {!SparseSnapshotTree} tree\n * @param {!Object} serverValues\n * @return {!SparseSnapshotTree}\n */\nexports.resolveDeferredValueTree = function (tree, serverValues) {\n    var resolvedTree = new SparseSnapshotTree_1.SparseSnapshotTree();\n    tree.forEachTree(new Path_1.Path(''), function (path, node) {\n        resolvedTree.remember(path, exports.resolveDeferredValueSnapshot(node, serverValues));\n    });\n    return resolvedTree;\n};\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n * @param {!Node} node\n * @param {!Object} serverValues\n * @return {!Node}\n */\nexports.resolveDeferredValueSnapshot = function (node, serverValues) {\n    var rawPri = node.getPriority().val();\n    var priority = exports.resolveDeferredValue(rawPri, serverValues);\n    var newNode;\n    if (node.isLeafNode()) {\n        var leafNode = node;\n        var value = exports.resolveDeferredValue(leafNode.getValue(), serverValues);\n        if (value !== leafNode.getValue() ||\n            priority !== leafNode.getPriority().val()) {\n            return new LeafNode_1.LeafNode(value, nodeFromJSON_1.nodeFromJSON(priority));\n        }\n        else {\n            return node;\n        }\n    }\n    else {\n        var childrenNode = node;\n        newNode = childrenNode;\n        if (priority !== childrenNode.getPriority().val()) {\n            newNode = newNode.updatePriority(new LeafNode_1.LeafNode(priority));\n        }\n        childrenNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n            var newChildNode = exports.resolveDeferredValueSnapshot(childNode, serverValues);\n            if (newChildNode !== childNode) {\n                newNode = newNode.updateImmediateChild(childName, newChildNode);\n            }\n        });\n        return newNode;\n    }\n};\n\n//# sourceMappingURL=ServerValues.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../../util/util\");\nvar Index_1 = require(\"./Index\");\nvar ChildrenNode_1 = require(\"../ChildrenNode\");\nvar Node_1 = require(\"../Node\");\nvar nodeFromJSON_1 = require(\"../nodeFromJSON\");\n/**\n * @param {!Path} indexPath\n * @constructor\n * @extends {Index}\n */\nvar PathIndex = /** @class */ (function (_super) {\n    tslib_1.__extends(PathIndex, _super);\n    function PathIndex(indexPath_) {\n        var _this = _super.call(this) || this;\n        _this.indexPath_ = indexPath_;\n        util_1.assert(!indexPath_.isEmpty() && indexPath_.getFront() !== '.priority', \"Can't create PathIndex with empty path or .priority key\");\n        return _this;\n    }\n    /**\n     * @param {!Node} snap\n     * @return {!Node}\n     * @protected\n     */\n    PathIndex.prototype.extractChild = function (snap) {\n        return snap.getChild(this.indexPath_);\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.isDefinedOn = function (node) {\n        return !node.getChild(this.indexPath_).isEmpty();\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.compare = function (a, b) {\n        var aChild = this.extractChild(a.node);\n        var bChild = this.extractChild(b.node);\n        var indexCmp = aChild.compareTo(bChild);\n        if (indexCmp === 0) {\n            return util_2.nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.makePost = function (indexValue, name) {\n        var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);\n        var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);\n        return new Node_1.NamedNode(name, node);\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.maxPost = function () {\n        var node = ChildrenNode_1.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, ChildrenNode_1.MAX_NODE);\n        return new Node_1.NamedNode(util_2.MAX_NAME, node);\n    };\n    /**\n     * @inheritDoc\n     */\n    PathIndex.prototype.toString = function () {\n        return this.indexPath_.slice().join('/');\n    };\n    return PathIndex;\n}(Index_1.Index));\nexports.PathIndex = PathIndex;\n\n//# sourceMappingURL=PathIndex.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../util/util\");\nfunction NAME_ONLY_COMPARATOR(left, right) {\n    return util_1.nameCompare(left.name, right.name);\n}\nexports.NAME_ONLY_COMPARATOR = NAME_ONLY_COMPARATOR;\nfunction NAME_COMPARATOR(left, right) {\n    return util_1.nameCompare(left, right);\n}\nexports.NAME_COMPARATOR = NAME_COMPARATOR;\n\n//# sourceMappingURL=comparators.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SortedMap_1 = require(\"../util/SortedMap\");\nvar SortedMap_2 = require(\"../util/SortedMap\");\nvar LOG_2 = Math.log(2);\n/**\n * @constructor\n */\nvar Base12Num = /** @class */ (function () {\n    /**\n     * @param {number} length\n     */\n    function Base12Num(length) {\n        var logBase2 = function (num) {\n            return parseInt((Math.log(num) / LOG_2), 10);\n        };\n        var bitMask = function (bits) { return parseInt(Array(bits + 1).join('1'), 2); };\n        this.count = logBase2(length + 1);\n        this.current_ = this.count - 1;\n        var mask = bitMask(this.count);\n        this.bits_ = (length + 1) & mask;\n    }\n    /**\n     * @return {boolean}\n     */\n    Base12Num.prototype.nextBitIsOne = function () {\n        //noinspection JSBitwiseOperatorUsage\n        var result = !(this.bits_ & (0x1 << this.current_));\n        this.current_--;\n        return result;\n    };\n    return Base12Num;\n}());\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @template K, V\n * @param {Array.<!NamedNode>} childList Unsorted list of children\n * @param {function(!NamedNode, !NamedNode):number} cmp The comparison method to be used\n * @param {(function(NamedNode):K)=} keyFn An optional function to extract K from a node wrapper, if K's\n *                                                        type is not NamedNode\n * @param {(function(K, K):number)=} mapSortFn An optional override for comparator used by the generated sorted map\n * @return {SortedMap.<K, V>}\n */\nexports.buildChildSet = function (childList, cmp, keyFn, mapSortFn) {\n    childList.sort(cmp);\n    var buildBalancedTree = function (low, high) {\n        var length = high - low;\n        var namedNode;\n        var key;\n        if (length == 0) {\n            return null;\n        }\n        else if (length == 1) {\n            namedNode = childList[low];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, null, null);\n        }\n        else {\n            var middle = parseInt((length / 2), 10) + low;\n            var left = buildBalancedTree(low, middle);\n            var right = buildBalancedTree(middle + 1, high);\n            namedNode = childList[middle];\n            key = keyFn ? keyFn(namedNode) : namedNode;\n            return new SortedMap_1.LLRBNode(key, namedNode.node, SortedMap_1.LLRBNode.BLACK, left, right);\n        }\n    };\n    var buildFrom12Array = function (base12) {\n        var node = null;\n        var root = null;\n        var index = childList.length;\n        var buildPennant = function (chunkSize, color) {\n            var low = index - chunkSize;\n            var high = index;\n            index -= chunkSize;\n            var childTree = buildBalancedTree(low + 1, high);\n            var namedNode = childList[low];\n            var key = keyFn ? keyFn(namedNode) : namedNode;\n            attachPennant(new SortedMap_1.LLRBNode(key, namedNode.node, color, null, childTree));\n        };\n        var attachPennant = function (pennant) {\n            if (node) {\n                node.left = pennant;\n                node = pennant;\n            }\n            else {\n                root = pennant;\n                node = pennant;\n            }\n        };\n        for (var i = 0; i < base12.count; ++i) {\n            var isOne = base12.nextBitIsOne();\n            // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n            var chunkSize = Math.pow(2, base12.count - (i + 1));\n            if (isOne) {\n                buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);\n            }\n            else {\n                // current == 2\n                buildPennant(chunkSize, SortedMap_1.LLRBNode.BLACK);\n                buildPennant(chunkSize, SortedMap_1.LLRBNode.RED);\n            }\n        }\n        return root;\n    };\n    var base12 = new Base12Num(childList.length);\n    var root = buildFrom12Array(base12);\n    return new SortedMap_2.SortedMap(mapSortFn || cmp, root);\n};\n\n//# sourceMappingURL=childSet.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar childSet_1 = require(\"./childSet\");\nvar util_2 = require(\"@firebase/util\");\nvar Node_1 = require(\"./Node\");\nvar PriorityIndex_1 = require(\"./indexes/PriorityIndex\");\nvar KeyIndex_1 = require(\"./indexes/KeyIndex\");\nvar _defaultIndexMap;\nvar fallbackObject = {};\n/**\n *\n * @param {Object.<string, FallbackType|SortedMap.<NamedNode, Node>>} indexes\n * @param {Object.<string, Index>} indexSet\n * @constructor\n */\nvar IndexMap = /** @class */ (function () {\n    function IndexMap(indexes_, indexSet_) {\n        this.indexes_ = indexes_;\n        this.indexSet_ = indexSet_;\n    }\n    Object.defineProperty(IndexMap, \"Default\", {\n        /**\n         * The default IndexMap for nodes without a priority\n         * @type {!IndexMap}\n         * @const\n         */\n        get: function () {\n            util_1.assert(fallbackObject && PriorityIndex_1.PRIORITY_INDEX, 'ChildrenNode.ts has not been loaded');\n            _defaultIndexMap =\n                _defaultIndexMap ||\n                    new IndexMap({ '.priority': fallbackObject }, { '.priority': PriorityIndex_1.PRIORITY_INDEX });\n            return _defaultIndexMap;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     *\n     * @param {!string} indexKey\n     * @return {?SortedMap.<NamedNode, Node>}\n     */\n    IndexMap.prototype.get = function (indexKey) {\n        var sortedMap = util_2.safeGet(this.indexes_, indexKey);\n        if (!sortedMap)\n            throw new Error('No index defined for ' + indexKey);\n        if (sortedMap === fallbackObject) {\n            // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n            // regular child map\n            return null;\n        }\n        else {\n            return sortedMap;\n        }\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @return {boolean}\n     */\n    IndexMap.prototype.hasIndex = function (indexDefinition) {\n        return util_2.contains(this.indexSet_, indexDefinition.toString());\n    };\n    /**\n     * @param {!Index} indexDefinition\n     * @param {!SortedMap.<string, !Node>} existingChildren\n     * @return {!IndexMap}\n     */\n    IndexMap.prototype.addIndex = function (indexDefinition, existingChildren) {\n        util_1.assert(indexDefinition !== KeyIndex_1.KEY_INDEX, \"KeyIndex always exists and isn't meant to be added to the IndexMap.\");\n        var childList = [];\n        var sawIndexedValue = false;\n        var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);\n        var next = iter.getNext();\n        while (next) {\n            sawIndexedValue =\n                sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n            childList.push(next);\n            next = iter.getNext();\n        }\n        var newIndex;\n        if (sawIndexedValue) {\n            newIndex = childSet_1.buildChildSet(childList, indexDefinition.getCompare());\n        }\n        else {\n            newIndex = fallbackObject;\n        }\n        var indexName = indexDefinition.toString();\n        var newIndexSet = util_2.clone(this.indexSet_);\n        newIndexSet[indexName] = indexDefinition;\n        var newIndexes = util_2.clone(this.indexes_);\n        newIndexes[indexName] = newIndex;\n        return new IndexMap(newIndexes, newIndexSet);\n    };\n    /**\n     * Ensure that this node is properly tracked in any indexes that we're maintaining\n     * @param {!NamedNode} namedNode\n     * @param {!SortedMap.<string, !Node>} existingChildren\n     * @return {!IndexMap}\n     */\n    IndexMap.prototype.addToIndexes = function (namedNode, existingChildren) {\n        var _this = this;\n        var newIndexes = util_2.map(this.indexes_, function (indexedChildren, indexName) {\n            var index = util_2.safeGet(_this.indexSet_, indexName);\n            util_1.assert(index, 'Missing index implementation for ' + indexName);\n            if (indexedChildren === fallbackObject) {\n                // Check to see if we need to index everything\n                if (index.isDefinedOn(namedNode.node)) {\n                    // We need to build this index\n                    var childList = [];\n                    var iter = existingChildren.getIterator(Node_1.NamedNode.Wrap);\n                    var next = iter.getNext();\n                    while (next) {\n                        if (next.name != namedNode.name) {\n                            childList.push(next);\n                        }\n                        next = iter.getNext();\n                    }\n                    childList.push(namedNode);\n                    return childSet_1.buildChildSet(childList, index.getCompare());\n                }\n                else {\n                    // No change, this remains a fallback\n                    return fallbackObject;\n                }\n            }\n            else {\n                var existingSnap = existingChildren.get(namedNode.name);\n                var newChildren = indexedChildren;\n                if (existingSnap) {\n                    newChildren = newChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));\n                }\n                return newChildren.insert(namedNode, namedNode.node);\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    };\n    /**\n     * Create a new IndexMap instance with the given value removed\n     * @param {!NamedNode} namedNode\n     * @param {!SortedMap.<string, !Node>} existingChildren\n     * @return {!IndexMap}\n     */\n    IndexMap.prototype.removeFromIndexes = function (namedNode, existingChildren) {\n        var newIndexes = util_2.map(this.indexes_, function (indexedChildren) {\n            if (indexedChildren === fallbackObject) {\n                // This is the fallback. Just return it, nothing to do in this case\n                return indexedChildren;\n            }\n            else {\n                var existingSnap = existingChildren.get(namedNode.name);\n                if (existingSnap) {\n                    return indexedChildren.remove(new Node_1.NamedNode(namedNode.name, existingSnap));\n                }\n                else {\n                    // No record of this child\n                    return indexedChildren;\n                }\n            }\n        });\n        return new IndexMap(newIndexes, this.indexSet_);\n    };\n    return IndexMap;\n}());\nexports.IndexMap = IndexMap;\n\n//# sourceMappingURL=IndexMap.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar Index_1 = require(\"./Index\");\nvar Node_1 = require(\"../Node\");\nvar util_1 = require(\"../../util/util\");\nvar nodeFromJSON_1 = require(\"../nodeFromJSON\");\n/**\n * @constructor\n * @extends {Index}\n * @private\n */\nvar ValueIndex = /** @class */ (function (_super) {\n    tslib_1.__extends(ValueIndex, _super);\n    function ValueIndex() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.compare = function (a, b) {\n        var indexCmp = a.node.compareTo(b.node);\n        if (indexCmp === 0) {\n            return util_1.nameCompare(a.name, b.name);\n        }\n        else {\n            return indexCmp;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.isDefinedOn = function (node) {\n        return true;\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.indexedValueChanged = function (oldNode, newNode) {\n        return !oldNode.equals(newNode);\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.minPost = function () {\n        return Node_1.NamedNode.MIN;\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueIndex.prototype.maxPost = function () {\n        return Node_1.NamedNode.MAX;\n    };\n    /**\n     * @param {*} indexValue\n     * @param {string} name\n     * @return {!NamedNode}\n     */\n    ValueIndex.prototype.makePost = function (indexValue, name) {\n        var valueNode = nodeFromJSON_1.nodeFromJSON(indexValue);\n        return new Node_1.NamedNode(name, valueNode);\n    };\n    /**\n     * @return {!string} String representation for inclusion in a query spec\n     */\n    ValueIndex.prototype.toString = function () {\n        return '.value';\n    };\n    return ValueIndex;\n}(Index_1.Index));\nexports.ValueIndex = ValueIndex;\nexports.VALUE_INDEX = new ValueIndex();\n\n//# sourceMappingURL=ValueIndex.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar util_3 = require(\"@firebase/util\");\nvar MAX_NODE;\nfunction setMaxNode(val) {\n    MAX_NODE = val;\n}\nexports.setMaxNode = setMaxNode;\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\nexports.priorityHashText = function (priority) {\n    if (typeof priority === 'number')\n        return 'number:' + util_2.doubleToIEEE754String(priority);\n    else\n        return 'string:' + priority;\n};\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\nexports.validatePriorityNode = function (priorityNode) {\n    if (priorityNode.isLeafNode()) {\n        var val = priorityNode.val();\n        util_1.assert(typeof val === 'string' ||\n            typeof val === 'number' ||\n            (typeof val === 'object' && util_3.contains(val, '.sv')), 'Priority must be a string or number.');\n    }\n    else {\n        util_1.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n    }\n    // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n    util_1.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};\n\n//# sourceMappingURL=snap.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar KeyIndex_1 = require(\"../core/snap/indexes/KeyIndex\");\nvar PriorityIndex_1 = require(\"../core/snap/indexes/PriorityIndex\");\nvar ValueIndex_1 = require(\"../core/snap/indexes/ValueIndex\");\nvar PathIndex_1 = require(\"../core/snap/indexes/PathIndex\");\nvar util_2 = require(\"../core/util/util\");\nvar Path_1 = require(\"../core/util/Path\");\nvar validation_1 = require(\"../core/util/validation\");\nvar util_3 = require(\"@firebase/util\");\nvar EventRegistration_1 = require(\"../core/view/EventRegistration\");\nvar util_4 = require(\"@firebase/util\");\nvar __referenceConstructor;\n/**\n * A Query represents a filter to be applied to a firebase location.  This object purely represents the\n * query expression (and exposes our public API to build the query).  The actual query logic is in ViewBase.js.\n *\n * Since every Firebase reference is a query, Firebase inherits from this object.\n */\nvar Query = /** @class */ (function () {\n    function Query(repo, path, queryParams_, orderByCalled_) {\n        this.repo = repo;\n        this.path = path;\n        this.queryParams_ = queryParams_;\n        this.orderByCalled_ = orderByCalled_;\n    }\n    Object.defineProperty(Query, \"__referenceConstructor\", {\n        get: function () {\n            util_1.assert(__referenceConstructor, 'Reference.ts has not been loaded');\n            return __referenceConstructor;\n        },\n        set: function (val) {\n            __referenceConstructor = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Validates start/end values for queries.\n     * @param {!QueryParams} params\n     * @private\n     */\n    Query.validateQueryEndpoints_ = function (params) {\n        var startNode = null;\n        var endNode = null;\n        if (params.hasStart()) {\n            startNode = params.getIndexStartValue();\n        }\n        if (params.hasEnd()) {\n            endNode = params.getIndexEndValue();\n        }\n        if (params.getIndex() === KeyIndex_1.KEY_INDEX) {\n            var tooManyArgsError = 'Query: When ordering by key, you may only pass one argument to ' +\n                'startAt(), endAt(), or equalTo().';\n            var wrongArgTypeError = 'Query: When ordering by key, the argument passed to startAt(), endAt(),' +\n                'or equalTo() must be a string.';\n            if (params.hasStart()) {\n                var startName = params.getIndexStartName();\n                if (startName != util_2.MIN_NAME) {\n                    throw new Error(tooManyArgsError);\n                }\n                else if (typeof startNode !== 'string') {\n                    throw new Error(wrongArgTypeError);\n                }\n            }\n            if (params.hasEnd()) {\n                var endName = params.getIndexEndName();\n                if (endName != util_2.MAX_NAME) {\n                    throw new Error(tooManyArgsError);\n                }\n                else if (typeof endNode !== 'string') {\n                    throw new Error(wrongArgTypeError);\n                }\n            }\n        }\n        else if (params.getIndex() === PriorityIndex_1.PRIORITY_INDEX) {\n            if ((startNode != null && !validation_1.isValidPriority(startNode)) ||\n                (endNode != null && !validation_1.isValidPriority(endNode))) {\n                throw new Error('Query: When ordering by priority, the first argument passed to startAt(), ' +\n                    'endAt(), or equalTo() must be a valid priority value (null, a number, or a string).');\n            }\n        }\n        else {\n            util_1.assert(params.getIndex() instanceof PathIndex_1.PathIndex ||\n                params.getIndex() === ValueIndex_1.VALUE_INDEX, 'unknown index type.');\n            if ((startNode != null && typeof startNode === 'object') ||\n                (endNode != null && typeof endNode === 'object')) {\n                throw new Error('Query: First argument passed to startAt(), endAt(), or equalTo() cannot be ' +\n                    'an object.');\n            }\n        }\n    };\n    /**\n     * Validates that limit* has been called with the correct combination of parameters\n     * @param {!QueryParams} params\n     * @private\n     */\n    Query.validateLimit_ = function (params) {\n        if (params.hasStart() &&\n            params.hasEnd() &&\n            params.hasLimit() &&\n            !params.hasAnchoredLimit()) {\n            throw new Error(\"Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.\");\n        }\n    };\n    /**\n     * Validates that no other order by call has been made\n     * @param {!string} fnName\n     * @private\n     */\n    Query.prototype.validateNoPreviousOrderByCall_ = function (fnName) {\n        if (this.orderByCalled_ === true) {\n            throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n        }\n    };\n    /**\n     * @return {!QueryParams}\n     */\n    Query.prototype.getQueryParams = function () {\n        return this.queryParams_;\n    };\n    /**\n     * @return {!Reference}\n     */\n    Query.prototype.getRef = function () {\n        util_3.validateArgCount('Query.ref', 0, 0, arguments.length);\n        // This is a slight hack. We cannot goog.require('fb.api.Firebase'), since Firebase requires fb.api.Query.\n        // However, we will always export 'Firebase' to the global namespace, so it's guaranteed to exist by the time this\n        // method gets called.\n        return new Query.__referenceConstructor(this.repo, this.path);\n    };\n    /**\n     * @param {!string} eventType\n     * @param {!function(DataSnapshot, string=)} callback\n     * @param {(function(Error)|Object)=} cancelCallbackOrContext\n     * @param {Object=} context\n     * @return {!function(DataSnapshot, string=)}\n     */\n    Query.prototype.on = function (eventType, callback, cancelCallbackOrContext, context) {\n        util_3.validateArgCount('Query.on', 2, 4, arguments.length);\n        validation_1.validateEventType('Query.on', 1, eventType, false);\n        util_3.validateCallback('Query.on', 2, callback, false);\n        var ret = Query.getCancelAndContextArgs_('Query.on', cancelCallbackOrContext, context);\n        if (eventType === 'value') {\n            this.onValueEvent(callback, ret.cancel, ret.context);\n        }\n        else {\n            var callbacks = {};\n            callbacks[eventType] = callback;\n            this.onChildEvent(callbacks, ret.cancel, ret.context);\n        }\n        return callback;\n    };\n    /**\n     * @param {!function(!DataSnapshot)} callback\n     * @param {?function(Error)} cancelCallback\n     * @param {?Object} context\n     * @protected\n     */\n    Query.prototype.onValueEvent = function (callback, cancelCallback, context) {\n        var container = new EventRegistration_1.ValueEventRegistration(callback, cancelCallback || null, context || null);\n        this.repo.addEventCallbackForQuery(this, container);\n    };\n    /**\n     * @param {!Object.<string, !function(!DataSnapshot, ?string)>} callbacks\n     * @param {?function(Error)} cancelCallback\n     * @param {?Object} context\n     * @protected\n     */\n    Query.prototype.onChildEvent = function (callbacks, cancelCallback, context) {\n        var container = new EventRegistration_1.ChildEventRegistration(callbacks, cancelCallback, context);\n        this.repo.addEventCallbackForQuery(this, container);\n    };\n    /**\n     * @param {string=} eventType\n     * @param {(function(!DataSnapshot, ?string=))=} callback\n     * @param {Object=} context\n     */\n    Query.prototype.off = function (eventType, callback, context) {\n        util_3.validateArgCount('Query.off', 0, 3, arguments.length);\n        validation_1.validateEventType('Query.off', 1, eventType, true);\n        util_3.validateCallback('Query.off', 2, callback, true);\n        util_3.validateContextObject('Query.off', 3, context, true);\n        var container = null;\n        var callbacks = null;\n        if (eventType === 'value') {\n            var valueCallback = callback || null;\n            container = new EventRegistration_1.ValueEventRegistration(valueCallback, null, context || null);\n        }\n        else if (eventType) {\n            if (callback) {\n                callbacks = {};\n                callbacks[eventType] = callback;\n            }\n            container = new EventRegistration_1.ChildEventRegistration(callbacks, null, context || null);\n        }\n        this.repo.removeEventCallbackForQuery(this, container);\n    };\n    /**\n     * Attaches a listener, waits for the first event, and then removes the listener\n     * @param {!string} eventType\n     * @param {!function(!DataSnapshot, string=)} userCallback\n     * @param cancelOrContext\n     * @param context\n     * @return {!firebase.Promise}\n     */\n    Query.prototype.once = function (eventType, userCallback, cancelOrContext, context) {\n        var _this = this;\n        util_3.validateArgCount('Query.once', 1, 4, arguments.length);\n        validation_1.validateEventType('Query.once', 1, eventType, false);\n        util_3.validateCallback('Query.once', 2, userCallback, true);\n        var ret = Query.getCancelAndContextArgs_('Query.once', cancelOrContext, context);\n        // TODO: Implement this more efficiently (in particular, use 'get' wire protocol for 'value' event)\n        // TODO: consider actually wiring the callbacks into the promise. We cannot do this without a breaking change\n        // because the API currently expects callbacks will be called synchronously if the data is cached, but this is\n        // against the Promise specification.\n        var firstCall = true;\n        var deferred = new util_4.Deferred();\n        // A dummy error handler in case a user wasn't expecting promises\n        deferred.promise.catch(function () { });\n        var onceCallback = function (snapshot) {\n            // NOTE: Even though we unsubscribe, we may get called multiple times if a single action (e.g. set() with JSON)\n            // triggers multiple events (e.g. child_added or child_changed).\n            if (firstCall) {\n                firstCall = false;\n                _this.off(eventType, onceCallback);\n                if (userCallback) {\n                    userCallback.bind(ret.context)(snapshot);\n                }\n                deferred.resolve(snapshot);\n            }\n        };\n        this.on(eventType, onceCallback, \n        /*cancel=*/ function (err) {\n            _this.off(eventType, onceCallback);\n            if (ret.cancel)\n                ret.cancel.bind(ret.context)(err);\n            deferred.reject(err);\n        });\n        return deferred.promise;\n    };\n    /**\n     * Set a limit and anchor it to the start of the window.\n     * @param {!number} limit\n     * @return {!Query}\n     */\n    Query.prototype.limitToFirst = function (limit) {\n        util_3.validateArgCount('Query.limitToFirst', 1, 1, arguments.length);\n        if (typeof limit !== 'number' ||\n            Math.floor(limit) !== limit ||\n            limit <= 0) {\n            throw new Error('Query.limitToFirst: First argument must be a positive integer.');\n        }\n        if (this.queryParams_.hasLimit()) {\n            throw new Error('Query.limitToFirst: Limit was already set (by another call to limit, ' +\n                'limitToFirst, or limitToLast).');\n        }\n        return new Query(this.repo, this.path, this.queryParams_.limitToFirst(limit), this.orderByCalled_);\n    };\n    /**\n     * Set a limit and anchor it to the end of the window.\n     * @param {!number} limit\n     * @return {!Query}\n     */\n    Query.prototype.limitToLast = function (limit) {\n        util_3.validateArgCount('Query.limitToLast', 1, 1, arguments.length);\n        if (typeof limit !== 'number' ||\n            Math.floor(limit) !== limit ||\n            limit <= 0) {\n            throw new Error('Query.limitToLast: First argument must be a positive integer.');\n        }\n        if (this.queryParams_.hasLimit()) {\n            throw new Error('Query.limitToLast: Limit was already set (by another call to limit, ' +\n                'limitToFirst, or limitToLast).');\n        }\n        return new Query(this.repo, this.path, this.queryParams_.limitToLast(limit), this.orderByCalled_);\n    };\n    /**\n     * Given a child path, return a new query ordered by the specified grandchild path.\n     * @param {!string} path\n     * @return {!Query}\n     */\n    Query.prototype.orderByChild = function (path) {\n        util_3.validateArgCount('Query.orderByChild', 1, 1, arguments.length);\n        if (path === '$key') {\n            throw new Error('Query.orderByChild: \"$key\" is invalid.  Use Query.orderByKey() instead.');\n        }\n        else if (path === '$priority') {\n            throw new Error('Query.orderByChild: \"$priority\" is invalid.  Use Query.orderByPriority() instead.');\n        }\n        else if (path === '$value') {\n            throw new Error('Query.orderByChild: \"$value\" is invalid.  Use Query.orderByValue() instead.');\n        }\n        validation_1.validatePathString('Query.orderByChild', 1, path, false);\n        this.validateNoPreviousOrderByCall_('Query.orderByChild');\n        var parsedPath = new Path_1.Path(path);\n        if (parsedPath.isEmpty()) {\n            throw new Error('Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.');\n        }\n        var index = new PathIndex_1.PathIndex(parsedPath);\n        var newParams = this.queryParams_.orderBy(index);\n        Query.validateQueryEndpoints_(newParams);\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n    };\n    /**\n     * Return a new query ordered by the KeyIndex\n     * @return {!Query}\n     */\n    Query.prototype.orderByKey = function () {\n        util_3.validateArgCount('Query.orderByKey', 0, 0, arguments.length);\n        this.validateNoPreviousOrderByCall_('Query.orderByKey');\n        var newParams = this.queryParams_.orderBy(KeyIndex_1.KEY_INDEX);\n        Query.validateQueryEndpoints_(newParams);\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n    };\n    /**\n     * Return a new query ordered by the PriorityIndex\n     * @return {!Query}\n     */\n    Query.prototype.orderByPriority = function () {\n        util_3.validateArgCount('Query.orderByPriority', 0, 0, arguments.length);\n        this.validateNoPreviousOrderByCall_('Query.orderByPriority');\n        var newParams = this.queryParams_.orderBy(PriorityIndex_1.PRIORITY_INDEX);\n        Query.validateQueryEndpoints_(newParams);\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n    };\n    /**\n     * Return a new query ordered by the ValueIndex\n     * @return {!Query}\n     */\n    Query.prototype.orderByValue = function () {\n        util_3.validateArgCount('Query.orderByValue', 0, 0, arguments.length);\n        this.validateNoPreviousOrderByCall_('Query.orderByValue');\n        var newParams = this.queryParams_.orderBy(ValueIndex_1.VALUE_INDEX);\n        Query.validateQueryEndpoints_(newParams);\n        return new Query(this.repo, this.path, newParams, /*orderByCalled=*/ true);\n    };\n    /**\n     * @param {number|string|boolean|null} value\n     * @param {?string=} name\n     * @return {!Query}\n     */\n    Query.prototype.startAt = function (value, name) {\n        if (value === void 0) { value = null; }\n        util_3.validateArgCount('Query.startAt', 0, 2, arguments.length);\n        validation_1.validateFirebaseDataArg('Query.startAt', 1, value, this.path, true);\n        validation_1.validateKey('Query.startAt', 2, name, true);\n        var newParams = this.queryParams_.startAt(value, name);\n        Query.validateLimit_(newParams);\n        Query.validateQueryEndpoints_(newParams);\n        if (this.queryParams_.hasStart()) {\n            throw new Error('Query.startAt: Starting point was already set (by another call to startAt ' +\n                'or equalTo).');\n        }\n        // Calling with no params tells us to start at the beginning.\n        if (value === undefined) {\n            value = null;\n            name = null;\n        }\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n    };\n    /**\n     * @param {number|string|boolean|null} value\n     * @param {?string=} name\n     * @return {!Query}\n     */\n    Query.prototype.endAt = function (value, name) {\n        if (value === void 0) { value = null; }\n        util_3.validateArgCount('Query.endAt', 0, 2, arguments.length);\n        validation_1.validateFirebaseDataArg('Query.endAt', 1, value, this.path, true);\n        validation_1.validateKey('Query.endAt', 2, name, true);\n        var newParams = this.queryParams_.endAt(value, name);\n        Query.validateLimit_(newParams);\n        Query.validateQueryEndpoints_(newParams);\n        if (this.queryParams_.hasEnd()) {\n            throw new Error('Query.endAt: Ending point was already set (by another call to endAt or ' +\n                'equalTo).');\n        }\n        return new Query(this.repo, this.path, newParams, this.orderByCalled_);\n    };\n    /**\n     * Load the selection of children with exactly the specified value, and, optionally,\n     * the specified name.\n     * @param {number|string|boolean|null} value\n     * @param {string=} name\n     * @return {!Query}\n     */\n    Query.prototype.equalTo = function (value, name) {\n        util_3.validateArgCount('Query.equalTo', 1, 2, arguments.length);\n        validation_1.validateFirebaseDataArg('Query.equalTo', 1, value, this.path, false);\n        validation_1.validateKey('Query.equalTo', 2, name, true);\n        if (this.queryParams_.hasStart()) {\n            throw new Error('Query.equalTo: Starting point was already set (by another call to startAt or ' +\n                'equalTo).');\n        }\n        if (this.queryParams_.hasEnd()) {\n            throw new Error('Query.equalTo: Ending point was already set (by another call to endAt or ' +\n                'equalTo).');\n        }\n        return this.startAt(value, name).endAt(value, name);\n    };\n    /**\n     * @return {!string} URL for this location.\n     */\n    Query.prototype.toString = function () {\n        util_3.validateArgCount('Query.toString', 0, 0, arguments.length);\n        return this.repo.toString() + this.path.toUrlEncodedString();\n    };\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n    // for end-users.\n    Query.prototype.toJSON = function () {\n        // An optional spacer argument is unnecessary for a string.\n        util_3.validateArgCount('Query.toJSON', 0, 1, arguments.length);\n        return this.toString();\n    };\n    /**\n     * An object representation of the query parameters used by this Query.\n     * @return {!Object}\n     */\n    Query.prototype.queryObject = function () {\n        return this.queryParams_.getQueryObject();\n    };\n    /**\n     * @return {!string}\n     */\n    Query.prototype.queryIdentifier = function () {\n        var obj = this.queryObject();\n        var id = util_2.ObjectToUniqueKey(obj);\n        return id === '{}' ? 'default' : id;\n    };\n    /**\n     * Return true if this query and the provided query are equivalent; otherwise, return false.\n     * @param {Query} other\n     * @return {boolean}\n     */\n    Query.prototype.isEqual = function (other) {\n        util_3.validateArgCount('Query.isEqual', 1, 1, arguments.length);\n        if (!(other instanceof Query)) {\n            var error = 'Query.isEqual failed: First argument must be an instance of firebase.database.Query.';\n            throw new Error(error);\n        }\n        var sameRepo = this.repo === other.repo;\n        var samePath = this.path.equals(other.path);\n        var sameQueryIdentifier = this.queryIdentifier() === other.queryIdentifier();\n        return sameRepo && samePath && sameQueryIdentifier;\n    };\n    /**\n     * Helper used by .on and .once to extract the context and or cancel arguments.\n     * @param {!string} fnName The function name (on or once)\n     * @param {(function(Error)|Object)=} cancelOrContext\n     * @param {Object=} context\n     * @return {{cancel: ?function(Error), context: ?Object}}\n     * @private\n     */\n    Query.getCancelAndContextArgs_ = function (fnName, cancelOrContext, context) {\n        var ret = { cancel: null, context: null };\n        if (cancelOrContext && context) {\n            ret.cancel = cancelOrContext;\n            util_3.validateCallback(fnName, 3, ret.cancel, true);\n            ret.context = context;\n            util_3.validateContextObject(fnName, 4, ret.context, true);\n        }\n        else if (cancelOrContext) {\n            // we have either a cancel callback or a context.\n            if (typeof cancelOrContext === 'object' && cancelOrContext !== null) {\n                // it's a context!\n                ret.context = cancelOrContext;\n            }\n            else if (typeof cancelOrContext === 'function') {\n                ret.cancel = cancelOrContext;\n            }\n            else {\n                throw new Error(util_3.errorPrefix(fnName, 3, true) +\n                    ' must either be a cancel callback or a context object.');\n            }\n        }\n        return ret;\n    };\n    Object.defineProperty(Query.prototype, \"ref\", {\n        get: function () {\n            return this.getRef();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Query;\n}());\nexports.Query = Query;\n\n//# sourceMappingURL=Query.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar validation_1 = require(\"../core/util/validation\");\nvar util_2 = require(\"../core/util/util\");\nvar util_3 = require(\"@firebase/util\");\n/**\n * @constructor\n */\nvar OnDisconnect = /** @class */ (function () {\n    /**\n     * @param {!Repo} repo_\n     * @param {!Path} path_\n     */\n    function OnDisconnect(repo_, path_) {\n        this.repo_ = repo_;\n        this.path_ = path_;\n    }\n    /**\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.cancel = function (onComplete) {\n        util_1.validateArgCount('OnDisconnect.cancel', 0, 1, arguments.length);\n        util_1.validateCallback('OnDisconnect.cancel', 1, onComplete, true);\n        var deferred = new util_3.Deferred();\n        this.repo_.onDisconnectCancel(this.path_, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.remove = function (onComplete) {\n        util_1.validateArgCount('OnDisconnect.remove', 0, 1, arguments.length);\n        validation_1.validateWritablePath('OnDisconnect.remove', this.path_);\n        util_1.validateCallback('OnDisconnect.remove', 1, onComplete, true);\n        var deferred = new util_3.Deferred();\n        this.repo_.onDisconnectSet(this.path_, null, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {*} value\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.set = function (value, onComplete) {\n        util_1.validateArgCount('OnDisconnect.set', 1, 2, arguments.length);\n        validation_1.validateWritablePath('OnDisconnect.set', this.path_);\n        validation_1.validateFirebaseDataArg('OnDisconnect.set', 1, value, this.path_, false);\n        util_1.validateCallback('OnDisconnect.set', 2, onComplete, true);\n        var deferred = new util_3.Deferred();\n        this.repo_.onDisconnectSet(this.path_, value, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {*} value\n     * @param {number|string|null} priority\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.setWithPriority = function (value, priority, onComplete) {\n        util_1.validateArgCount('OnDisconnect.setWithPriority', 2, 3, arguments.length);\n        validation_1.validateWritablePath('OnDisconnect.setWithPriority', this.path_);\n        validation_1.validateFirebaseDataArg('OnDisconnect.setWithPriority', 1, value, this.path_, false);\n        validation_1.validatePriority('OnDisconnect.setWithPriority', 2, priority, false);\n        util_1.validateCallback('OnDisconnect.setWithPriority', 3, onComplete, true);\n        var deferred = new util_3.Deferred();\n        this.repo_.onDisconnectSetWithPriority(this.path_, value, priority, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    /**\n     * @param {!Object} objectToMerge\n     * @param {function(?Error)=} onComplete\n     * @return {!firebase.Promise}\n     */\n    OnDisconnect.prototype.update = function (objectToMerge, onComplete) {\n        util_1.validateArgCount('OnDisconnect.update', 1, 2, arguments.length);\n        validation_1.validateWritablePath('OnDisconnect.update', this.path_);\n        if (Array.isArray(objectToMerge)) {\n            var newObjectToMerge = {};\n            for (var i = 0; i < objectToMerge.length; ++i) {\n                newObjectToMerge['' + i] = objectToMerge[i];\n            }\n            objectToMerge = newObjectToMerge;\n            util_2.warn('Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the ' +\n                'existing data, or an Object with integer keys if you really do want to only update some of the children.');\n        }\n        validation_1.validateFirebaseMergeDataArg('OnDisconnect.update', 1, objectToMerge, this.path_, false);\n        util_1.validateCallback('OnDisconnect.update', 2, onComplete, true);\n        var deferred = new util_3.Deferred();\n        this.repo_.onDisconnectUpdate(this.path_, objectToMerge, deferred.wrapCallback(onComplete));\n        return deferred.promise;\n    };\n    return OnDisconnect;\n}());\nexports.OnDisconnect = OnDisconnect;\n\n//# sourceMappingURL=onDisconnect.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar storage_1 = require(\"./storage/storage\");\nvar Constants_1 = require(\"../realtime/Constants\");\n/**\n * A class that holds metadata about a Repo object\n *\n * @constructor\n */\nvar RepoInfo = /** @class */ (function () {\n    /**\n     * @param {string} host Hostname portion of the url for the repo\n     * @param {boolean} secure Whether or not this repo is accessed over ssl\n     * @param {string} namespace The namespace represented by the repo\n     * @param {boolean} webSocketOnly Whether to prefer websockets over all other transports (used by Nest).\n     * @param {string=} persistenceKey Override the default session persistence storage key\n     */\n    function RepoInfo(host, secure, namespace, webSocketOnly, persistenceKey) {\n        if (persistenceKey === void 0) { persistenceKey = ''; }\n        this.secure = secure;\n        this.namespace = namespace;\n        this.webSocketOnly = webSocketOnly;\n        this.persistenceKey = persistenceKey;\n        this.host = host.toLowerCase();\n        this.domain = this.host.substr(this.host.indexOf('.') + 1);\n        this.internalHost = storage_1.PersistentStorage.get('host:' + host) || this.host;\n    }\n    RepoInfo.prototype.needsQueryParam = function () {\n        return this.host !== this.internalHost || this.isCustomHost();\n    };\n    RepoInfo.prototype.isCacheableHost = function () {\n        return this.internalHost.substr(0, 2) === 's-';\n    };\n    RepoInfo.prototype.isDemoHost = function () {\n        return this.domain === 'firebaseio-demo.com';\n    };\n    RepoInfo.prototype.isCustomHost = function () {\n        return (this.domain !== 'firebaseio.com' && this.domain !== 'firebaseio-demo.com');\n    };\n    RepoInfo.prototype.updateHost = function (newHost) {\n        if (newHost !== this.internalHost) {\n            this.internalHost = newHost;\n            if (this.isCacheableHost()) {\n                storage_1.PersistentStorage.set('host:' + this.host, this.internalHost);\n            }\n        }\n    };\n    /**\n     * Returns the websocket URL for this repo\n     * @param {string} type of connection\n     * @param {Object} params list\n     * @return {string} The URL for this repo\n     */\n    RepoInfo.prototype.connectionURL = function (type, params) {\n        util_1.assert(typeof type === 'string', 'typeof type must == string');\n        util_1.assert(typeof params === 'object', 'typeof params must == object');\n        var connURL;\n        if (type === Constants_1.WEBSOCKET) {\n            connURL =\n                (this.secure ? 'wss://' : 'ws://') + this.internalHost + '/.ws?';\n        }\n        else if (type === Constants_1.LONG_POLLING) {\n            connURL =\n                (this.secure ? 'https://' : 'http://') + this.internalHost + '/.lp?';\n        }\n        else {\n            throw new Error('Unknown connection type: ' + type);\n        }\n        if (this.needsQueryParam()) {\n            params['ns'] = this.namespace;\n        }\n        var pairs = [];\n        util_2.forEach(params, function (key, value) {\n            pairs.push(key + '=' + value);\n        });\n        return connURL + pairs.join('&');\n    };\n    /** @return {string} */\n    RepoInfo.prototype.toString = function () {\n        var str = this.toURLString();\n        if (this.persistenceKey) {\n            str += '<' + this.persistenceKey + '>';\n        }\n        return str;\n    };\n    /** @return {string} */\n    RepoInfo.prototype.toURLString = function () {\n        return (this.secure ? 'https://' : 'http://') + this.host;\n    };\n    return RepoInfo;\n}());\nexports.RepoInfo = RepoInfo;\n\n//# sourceMappingURL=RepoInfo.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Path_1 = require(\"../Path\");\nvar RepoInfo_1 = require(\"../../RepoInfo\");\nvar util_1 = require(\"../util\");\n/**\n * @param {!string} pathString\n * @return {string}\n */\nfunction decodePath(pathString) {\n    var pathStringDecoded = '';\n    var pieces = pathString.split('/');\n    for (var i = 0; i < pieces.length; i++) {\n        if (pieces[i].length > 0) {\n            var piece = pieces[i];\n            try {\n                piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n            }\n            catch (e) { }\n            pathStringDecoded += '/' + piece;\n        }\n    }\n    return pathStringDecoded;\n}\n/**\n * @param {!string} queryString\n * @return {!{[key:string]:string}} key value hash\n */\nfunction decodeQuery(queryString) {\n    var results = {};\n    if (queryString.startsWith('?')) {\n        queryString = queryString.substring(1);\n    }\n    for (var _i = 0, _a = queryString.split('&'); _i < _a.length; _i++) {\n        var segment = _a[_i];\n        if (segment.length === 0) {\n            continue;\n        }\n        var kv = segment.split('=');\n        if (kv.length === 2) {\n            results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n        }\n        else {\n            util_1.warn(\"Invalid query segment '\" + segment + \"' in query '\" + queryString + \"'\");\n        }\n    }\n    return results;\n}\n/**\n *\n * @param {!string} dataURL\n * @return {{repoInfo: !RepoInfo, path: !Path}}\n */\nexports.parseRepoInfo = function (dataURL) {\n    var parsedUrl = exports.parseURL(dataURL), namespace = parsedUrl.subdomain;\n    if (parsedUrl.domain === 'firebase') {\n        util_1.fatal(parsedUrl.host +\n            ' is no longer supported. ' +\n            'Please use <YOUR FIREBASE>.firebaseio.com instead');\n    }\n    // Catch common error of uninitialized namespace value.\n    if ((!namespace || namespace == 'undefined') &&\n        parsedUrl.domain !== 'localhost') {\n        util_1.fatal('Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com');\n    }\n    if (!parsedUrl.secure) {\n        util_1.warnIfPageIsSecure();\n    }\n    var webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n    return {\n        repoInfo: new RepoInfo_1.RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, webSocketOnly),\n        path: new Path_1.Path(parsedUrl.pathString)\n    };\n};\n/**\n *\n * @param {!string} dataURL\n * @return {{host: string, port: number, domain: string, subdomain: string, secure: boolean, scheme: string, pathString: string}}\n */\nexports.parseURL = function (dataURL) {\n    // Default to empty strings in the event of a malformed string.\n    var host = '', domain = '', subdomain = '', pathString = '';\n    // Always default to SSL, unless otherwise specified.\n    var secure = true, scheme = 'https', port = 443;\n    // Don't do any validation here. The caller is responsible for validating the result of parsing.\n    if (typeof dataURL === 'string') {\n        // Parse scheme.\n        var colonInd = dataURL.indexOf('//');\n        if (colonInd >= 0) {\n            scheme = dataURL.substring(0, colonInd - 1);\n            dataURL = dataURL.substring(colonInd + 2);\n        }\n        // Parse host, path, and query string.\n        var slashInd = dataURL.indexOf('/');\n        if (slashInd === -1) {\n            slashInd = dataURL.length;\n        }\n        var questionMarkInd = dataURL.indexOf('?');\n        if (questionMarkInd === -1) {\n            questionMarkInd = dataURL.length;\n        }\n        host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n        if (slashInd < questionMarkInd) {\n            // For pathString, questionMarkInd will always come after slashInd\n            pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n        }\n        var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));\n        // If we have a port, use scheme for determining if it's secure.\n        colonInd = host.indexOf(':');\n        if (colonInd >= 0) {\n            secure = scheme === 'https' || scheme === 'wss';\n            port = parseInt(host.substring(colonInd + 1), 10);\n        }\n        else {\n            colonInd = dataURL.length;\n        }\n        var parts = host.split('.');\n        if (parts.length === 3) {\n            // Normalize namespaces to lowercase to share storage / connection.\n            domain = parts[1];\n            subdomain = parts[0].toLowerCase();\n        }\n        else if (parts.length === 2) {\n            domain = parts[0];\n        }\n        else if (parts[0].slice(0, colonInd).toLowerCase() === 'localhost') {\n            domain = 'localhost';\n        }\n        // Support `ns` query param if subdomain not already set\n        if (subdomain === '' && 'ns' in queryParams) {\n            subdomain = queryParams['ns'];\n        }\n    }\n    return {\n        host: host,\n        port: port,\n        domain: domain,\n        subdomain: subdomain,\n        secure: secure,\n        scheme: scheme,\n        pathString: pathString\n    };\n};\n\n//# sourceMappingURL=parser.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"../core/util/util\");\nvar parser_1 = require(\"../core/util/libs/parser\");\nvar Path_1 = require(\"../core/util/Path\");\nvar Reference_1 = require(\"./Reference\");\nvar Repo_1 = require(\"../core/Repo\");\nvar RepoManager_1 = require(\"../core/RepoManager\");\nvar util_2 = require(\"@firebase/util\");\nvar validation_1 = require(\"../core/util/validation\");\n/**\n * Class representing a firebase database.\n * @implements {FirebaseService}\n */\nvar Database = /** @class */ (function () {\n    /**\n     * The constructor should not be called by users of our public API.\n     * @param {!Repo} repo_\n     */\n    function Database(repo_) {\n        this.repo_ = repo_;\n        if (!(repo_ instanceof Repo_1.Repo)) {\n            util_1.fatal(\"Don't call new Database() directly - please use firebase.database().\");\n        }\n        /** @type {Reference} */\n        this.root_ = new Reference_1.Reference(repo_, Path_1.Path.Empty);\n        this.INTERNAL = new DatabaseInternals(this);\n    }\n    Object.defineProperty(Database.prototype, \"app\", {\n        get: function () {\n            return this.repo_.app;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns a reference to the root or the path specified in opt_pathString.\n     * @param {string=} pathString\n     * @return {!Reference} Firebase reference.\n     */\n    Database.prototype.ref = function (pathString) {\n        this.checkDeleted_('ref');\n        util_2.validateArgCount('database.ref', 0, 1, arguments.length);\n        return pathString !== undefined ? this.root_.child(pathString) : this.root_;\n    };\n    /**\n     * Returns a reference to the root or the path specified in url.\n     * We throw a exception if the url is not in the same domain as the\n     * current repo.\n     * @param {string} url\n     * @return {!Reference} Firebase reference.\n     */\n    Database.prototype.refFromURL = function (url) {\n        /** @const {string} */\n        var apiName = 'database.refFromURL';\n        this.checkDeleted_(apiName);\n        util_2.validateArgCount(apiName, 1, 1, arguments.length);\n        var parsedURL = parser_1.parseRepoInfo(url);\n        validation_1.validateUrl(apiName, 1, parsedURL);\n        var repoInfo = parsedURL.repoInfo;\n        if (repoInfo.host !== this.repo_.repoInfo_.host) {\n            util_1.fatal(apiName +\n                ': Host name does not match the current database: ' +\n                '(found ' +\n                repoInfo.host +\n                ' but expected ' +\n                this.repo_.repoInfo_.host +\n                ')');\n        }\n        return this.ref(parsedURL.path.toString());\n    };\n    /**\n     * @param {string} apiName\n     */\n    Database.prototype.checkDeleted_ = function (apiName) {\n        if (this.repo_ === null) {\n            util_1.fatal('Cannot call ' + apiName + ' on a deleted database.');\n        }\n    };\n    // Make individual repo go offline.\n    Database.prototype.goOffline = function () {\n        util_2.validateArgCount('database.goOffline', 0, 0, arguments.length);\n        this.checkDeleted_('goOffline');\n        this.repo_.interrupt();\n    };\n    Database.prototype.goOnline = function () {\n        util_2.validateArgCount('database.goOnline', 0, 0, arguments.length);\n        this.checkDeleted_('goOnline');\n        this.repo_.resume();\n    };\n    Database.ServerValue = {\n        TIMESTAMP: {\n            '.sv': 'timestamp'\n        }\n    };\n    return Database;\n}());\nexports.Database = Database;\nvar DatabaseInternals = /** @class */ (function () {\n    /** @param {!Database} database */\n    function DatabaseInternals(database) {\n        this.database = database;\n    }\n    /** @return {Promise<void>} */\n    DatabaseInternals.prototype.delete = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            return tslib_1.__generator(this, function (_a) {\n                this.database.checkDeleted_('delete');\n                RepoManager_1.RepoManager.getInstance().deleteRepo(this.database.repo_);\n                this.database.repo_ = null;\n                this.database.root_ = null;\n                this.database.INTERNAL = null;\n                this.database = null;\n                return [2 /*return*/];\n            });\n        });\n    };\n    return DatabaseInternals;\n}());\nexports.DatabaseInternals = DatabaseInternals;\n\n//# sourceMappingURL=Database.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/\nexports.contains = function (obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n};\nexports.safeGet = function (obj, key) {\n    if (Object.prototype.hasOwnProperty.call(obj, key))\n        return obj[key];\n    // else return undefined.\n};\n/**\n * Enumerates the keys/values in an object, excluding keys defined on the prototype.\n *\n * @param {?Object.<K,V>} obj Object to enumerate.\n * @param {!function(K, V)} fn Function to call for each key and value.\n * @template K,V\n */\nexports.forEach = function (obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn(key, obj[key]);\n        }\n    }\n};\n/**\n * Copies all the (own) properties from one object to another.\n * @param {!Object} objTo\n * @param {!Object} objFrom\n * @return {!Object} objTo\n */\nexports.extend = function (objTo, objFrom) {\n    exports.forEach(objFrom, function (key, value) {\n        objTo[key] = value;\n    });\n    return objTo;\n};\n/**\n * Returns a clone of the specified object.\n * @param {!Object} obj\n * @return {!Object} cloned obj.\n */\nexports.clone = function (obj) {\n    return exports.extend({}, obj);\n};\n/**\n * Returns true if obj has typeof \"object\" and is not null.  Unlike goog.isObject(), does not return true\n * for functions.\n *\n * @param obj {*} A potential object.\n * @returns {boolean} True if it's an object.\n */\nexports.isNonNullObject = function (obj) {\n    return typeof obj === 'object' && obj !== null;\n};\nexports.isEmpty = function (obj) {\n    for (var key in obj) {\n        return false;\n    }\n    return true;\n};\nexports.getCount = function (obj) {\n    var rv = 0;\n    for (var key in obj) {\n        rv++;\n    }\n    return rv;\n};\nexports.map = function (obj, f, opt_obj) {\n    var res = {};\n    for (var key in obj) {\n        res[key] = f.call(opt_obj, obj[key], key, obj);\n    }\n    return res;\n};\nexports.findKey = function (obj, fn, opt_this) {\n    for (var key in obj) {\n        if (fn.call(opt_this, obj[key], key, obj)) {\n            return key;\n        }\n    }\n    return undefined;\n};\nexports.findValue = function (obj, fn, opt_this) {\n    var key = exports.findKey(obj, fn, opt_this);\n    return key && obj[key];\n};\nexports.getAnyKey = function (obj) {\n    for (var key in obj) {\n        return key;\n    }\n};\nexports.getValues = function (obj) {\n    var res = [];\n    var i = 0;\n    for (var key in obj) {\n        res[i++] = obj[key];\n    }\n    return res;\n};\n/**\n * Tests whether every key/value pair in an object pass the test implemented\n * by the provided function\n *\n * @param {?Object.<K,V>} obj Object to test.\n * @param {!function(K, V)} fn Function to call for each key and value.\n * @template K,V\n */\nexports.every = function (obj, fn) {\n    for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            if (!fn(key, obj[key])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\n\n//# sourceMappingURL=obj.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nfunction jsonEval(str) {\n    return JSON.parse(str);\n}\nexports.jsonEval = jsonEval;\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nfunction stringify(data) {\n    return JSON.stringify(data);\n}\nexports.stringify = stringify;\n\n//# sourceMappingURL=json.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar stringToByteArray = function (str) {\n    // TODO(user): Use native implementations if/when available\n    var out = [], p = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            out[p++] = c;\n        }\n        else if (c < 2048) {\n            out[p++] = (c >> 6) | 192;\n            out[p++] = (c & 63) | 128;\n        }\n        else if ((c & 0xfc00) == 0xd800 &&\n            i + 1 < str.length &&\n            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n            out[p++] = (c >> 18) | 240;\n            out[p++] = ((c >> 12) & 63) | 128;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n        else {\n            out[p++] = (c >> 12) | 224;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n    }\n    return out;\n};\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param {Array<number>} bytes Array of numbers representing characters.\n * @return {string} Stringification of the array.\n */\nvar byteArrayToString = function (bytes) {\n    // TODO(user): Use native implementations if/when available\n    var out = [], pos = 0, c = 0;\n    while (pos < bytes.length) {\n        var c1 = bytes[pos++];\n        if (c1 < 128) {\n            out[c++] = String.fromCharCode(c1);\n        }\n        else if (c1 > 191 && c1 < 224) {\n            var c2 = bytes[pos++];\n            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n        }\n        else if (c1 > 239 && c1 < 365) {\n            // Surrogate Pair\n            var c2 = bytes[pos++];\n            var c3 = bytes[pos++];\n            var c4 = bytes[pos++];\n            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n                0x10000;\n            out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n        }\n        else {\n            var c2 = bytes[pos++];\n            var c3 = bytes[pos++];\n            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n        }\n    }\n    return out.join('');\n};\n// Static lookup maps, lazily populated by init_()\nexports.base64 = {\n    /**\n     * Maps bytes to characters.\n     * @type {Object}\n     * @private\n     */\n    byteToCharMap_: null,\n    /**\n     * Maps characters to bytes.\n     * @type {Object}\n     * @private\n     */\n    charToByteMap_: null,\n    /**\n     * Maps bytes to websafe characters.\n     * @type {Object}\n     * @private\n     */\n    byteToCharMapWebSafe_: null,\n    /**\n     * Maps websafe characters to bytes.\n     * @type {Object}\n     * @private\n     */\n    charToByteMapWebSafe_: null,\n    /**\n     * Our default alphabet, shared between\n     * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n     * @type {string}\n     */\n    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n    /**\n     * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n     * @type {string}\n     */\n    get ENCODED_VALS() {\n        return this.ENCODED_VALS_BASE + '+/=';\n    },\n    /**\n     * Our websafe alphabet.\n     * @type {string}\n     */\n    get ENCODED_VALS_WEBSAFE() {\n        return this.ENCODED_VALS_BASE + '-_.';\n    },\n    /**\n     * Whether this browser supports the atob and btoa functions. This extension\n     * started at Mozilla but is now implemented by many browsers. We use the\n     * ASSUME_* variables to avoid pulling in the full useragent detection library\n     * but still allowing the standard per-browser compilations.\n     *\n     * @type {boolean}\n     */\n    HAS_NATIVE_SUPPORT: typeof atob === 'function',\n    /**\n     * Base64-encode an array of bytes.\n     *\n     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with\n     *     value in [0, 255]) to encode.\n     * @param {boolean=} opt_webSafe Boolean indicating we should use the\n     *     alternative alphabet.\n     * @return {string} The base64 encoded string.\n     */\n    encodeByteArray: function (input, opt_webSafe) {\n        if (!Array.isArray(input)) {\n            throw Error('encodeByteArray takes an array as a parameter');\n        }\n        this.init_();\n        var byteToCharMap = opt_webSafe\n            ? this.byteToCharMapWebSafe_\n            : this.byteToCharMap_;\n        var output = [];\n        for (var i = 0; i < input.length; i += 3) {\n            var byte1 = input[i];\n            var haveByte2 = i + 1 < input.length;\n            var byte2 = haveByte2 ? input[i + 1] : 0;\n            var haveByte3 = i + 2 < input.length;\n            var byte3 = haveByte3 ? input[i + 2] : 0;\n            var outByte1 = byte1 >> 2;\n            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n            var outByte4 = byte3 & 0x3f;\n            if (!haveByte3) {\n                outByte4 = 64;\n                if (!haveByte2) {\n                    outByte3 = 64;\n                }\n            }\n            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);\n        }\n        return output.join('');\n    },\n    /**\n     * Base64-encode a string.\n     *\n     * @param {string} input A string to encode.\n     * @param {boolean=} opt_webSafe If true, we should use the\n     *     alternative alphabet.\n     * @return {string} The base64 encoded string.\n     */\n    encodeString: function (input, opt_webSafe) {\n        // Shortcut for Mozilla browsers that implement\n        // a native base64 encoder in the form of \"btoa/atob\"\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n            return btoa(input);\n        }\n        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);\n    },\n    /**\n     * Base64-decode a string.\n     *\n     * @param {string} input to decode.\n     * @param {boolean=} opt_webSafe True if we should use the\n     *     alternative alphabet.\n     * @return {string} string representing the decoded value.\n     */\n    decodeString: function (input, opt_webSafe) {\n        // Shortcut for Mozilla browsers that implement\n        // a native base64 encoder in the form of \"btoa/atob\"\n        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {\n            return atob(input);\n        }\n        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));\n    },\n    /**\n     * Base64-decode a string.\n     *\n     * In base-64 decoding, groups of four characters are converted into three\n     * bytes.  If the encoder did not apply padding, the input length may not\n     * be a multiple of 4.\n     *\n     * In this case, the last group will have fewer than 4 characters, and\n     * padding will be inferred.  If the group has one or two characters, it decodes\n     * to one byte.  If the group has three characters, it decodes to two bytes.\n     *\n     * @param {string} input Input to decode.\n     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.\n     * @return {!Array<number>} bytes representing the decoded value.\n     */\n    decodeStringToByteArray: function (input, opt_webSafe) {\n        this.init_();\n        var charToByteMap = opt_webSafe\n            ? this.charToByteMapWebSafe_\n            : this.charToByteMap_;\n        var output = [];\n        for (var i = 0; i < input.length;) {\n            var byte1 = charToByteMap[input.charAt(i++)];\n            var haveByte2 = i < input.length;\n            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n            ++i;\n            var haveByte3 = i < input.length;\n            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n            ++i;\n            var haveByte4 = i < input.length;\n            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n            ++i;\n            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n                throw Error();\n            }\n            var outByte1 = (byte1 << 2) | (byte2 >> 4);\n            output.push(outByte1);\n            if (byte3 != 64) {\n                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n                output.push(outByte2);\n                if (byte4 != 64) {\n                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n                    output.push(outByte3);\n                }\n            }\n        }\n        return output;\n    },\n    /**\n     * Lazy static initialization function. Called before\n     * accessing any of the static map variables.\n     * @private\n     */\n    init_: function () {\n        if (!this.byteToCharMap_) {\n            this.byteToCharMap_ = {};\n            this.charToByteMap_ = {};\n            this.byteToCharMapWebSafe_ = {};\n            this.charToByteMapWebSafe_ = {};\n            // We want quick mappings back and forth, so we precompute two maps.\n            for (var i = 0; i < this.ENCODED_VALS.length; i++) {\n                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n                this.charToByteMap_[this.byteToCharMap_[i]] = i;\n                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n                // Be forgiving when decoding and correctly decode both encodings.\n                if (i >= this.ENCODED_VALS_BASE.length) {\n                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n                }\n            }\n        }\n    }\n};\n/**\n * URL-safe base64 encoding\n * @param {!string} str\n * @return {!string}\n */\nexports.base64Encode = function (str) {\n    var utf8Bytes = stringToByteArray(str);\n    return exports.base64.encodeByteArray(utf8Bytes, true);\n};\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param {string} str To be decoded\n * @return {?string} Decoded result, if possible\n */\nexports.base64Decode = function (str) {\n    try {\n        return exports.base64.decodeString(str, true);\n    }\n    catch (e) {\n        console.error('base64Decode failed: ', e);\n    }\n    return null;\n};\n\n//# sourceMappingURL=crypt.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"./constants\");\n/**\n * Throws an error if the provided assertion is falsy\n * @param {*} assertion The assertion to be tested for falsiness\n * @param {!string} message The message to display if the check fails\n */\nexports.assert = function (assertion, message) {\n    if (!assertion) {\n        throw exports.assertionError(message);\n    }\n};\n/**\n * Returns an Error object suitable for throwing.\n * @param {string} message\n * @return {!Error}\n */\nexports.assertionError = function (message) {\n    return new Error('Firebase Database (' +\n        constants_1.CONSTANTS.SDK_VERSION +\n        ') INTERNAL ASSERT FAILED: ' +\n        message);\n};\n\n//# sourceMappingURL=assert.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RepoInfo_1 = require(\"../core/RepoInfo\");\nvar PersistentConnection_1 = require(\"../core/PersistentConnection\");\nvar RepoManager_1 = require(\"../core/RepoManager\");\nvar Connection_1 = require(\"../realtime/Connection\");\nexports.DataConnection = PersistentConnection_1.PersistentConnection;\n/**\n * @param {!string} pathString\n * @param {function(*)} onComplete\n */\nPersistentConnection_1.PersistentConnection.prototype.simpleListen = function (pathString, onComplete) {\n    this.sendRequest('q', { p: pathString }, onComplete);\n};\n/**\n * @param {*} data\n * @param {function(*)} onEcho\n */\nPersistentConnection_1.PersistentConnection.prototype.echo = function (data, onEcho) {\n    this.sendRequest('echo', { d: data }, onEcho);\n};\n// RealTimeConnection properties that we use in tests.\nexports.RealTimeConnection = Connection_1.Connection;\n/**\n * @param {function(): string} newHash\n * @return {function()}\n */\nexports.hijackHash = function (newHash) {\n    var oldPut = PersistentConnection_1.PersistentConnection.prototype.put;\n    PersistentConnection_1.PersistentConnection.prototype.put = function (pathString, data, opt_onComplete, opt_hash) {\n        if (opt_hash !== undefined) {\n            opt_hash = newHash();\n        }\n        oldPut.call(this, pathString, data, opt_onComplete, opt_hash);\n    };\n    return function () {\n        PersistentConnection_1.PersistentConnection.prototype.put = oldPut;\n    };\n};\n/**\n * @type {function(new:RepoInfo, !string, boolean, !string, boolean): undefined}\n */\nexports.ConnectionTarget = RepoInfo_1.RepoInfo;\n/**\n * @param {!Query} query\n * @return {!string}\n */\nexports.queryIdentifier = function (query) {\n    return query.queryIdentifier();\n};\n/**\n * @param {!Query} firebaseRef\n * @return {!Object}\n */\nexports.listens = function (firebaseRef) {\n    return firebaseRef.repo.persistentConnection_.listens_;\n};\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n *\n * @param {boolean} forceRestClient\n */\nexports.forceRestClient = function (forceRestClient) {\n    RepoManager_1.RepoManager.getInstance().forceRestClient(forceRestClient);\n};\n\n//# sourceMappingURL=test_access.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar WebSocketConnection_1 = require(\"../realtime/WebSocketConnection\");\nvar BrowserPollConnection_1 = require(\"../realtime/BrowserPollConnection\");\n/**\n * INTERNAL methods for internal-use only (tests, etc.).\n *\n * Customers shouldn't use these or else should be aware that they could break at any time.\n *\n * @const\n */\nexports.forceLongPolling = function () {\n    WebSocketConnection_1.WebSocketConnection.forceDisallow();\n    BrowserPollConnection_1.BrowserPollConnection.forceAllow();\n};\nexports.forceWebSockets = function () {\n    BrowserPollConnection_1.BrowserPollConnection.forceDisallow();\n};\n/* Used by App Manager */\nexports.isWebSocketsAvailable = function () {\n    return WebSocketConnection_1.WebSocketConnection['isAvailable']();\n};\nexports.setSecurityDebugCallback = function (ref, callback) {\n    ref.repo.persistentConnection_.securityDebugCallback_ = callback;\n};\nexports.stats = function (ref, showDelta) {\n    ref.repo.stats(showDelta);\n};\nexports.statsIncrementCounter = function (ref, metric) {\n    ref.repo.statsIncrementCounter(metric);\n};\nexports.dataUpdateCount = function (ref) {\n    return ref.repo.dataUpdateCount;\n};\nexports.interceptServerData = function (ref, callback) {\n    return ref.repo.interceptServerData_(callback);\n};\n\n//# sourceMappingURL=internal.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Path_1 = require(\"./Path\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * Node in a Tree.\n */\nvar TreeNode = /** @class */ (function () {\n    function TreeNode() {\n        // TODO: Consider making accessors that create children and value lazily or\n        // separate Internal / Leaf 'types'.\n        this.children = {};\n        this.childCount = 0;\n        this.value = null;\n    }\n    return TreeNode;\n}());\nexports.TreeNode = TreeNode;\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nvar Tree = /** @class */ (function () {\n    /**\n     * @template T\n     * @param {string=} name_ Optional name of the node.\n     * @param {Tree=} parent_ Optional parent node.\n     * @param {TreeNode=} node_ Optional node to wrap.\n     */\n    function Tree(name_, parent_, node_) {\n        if (name_ === void 0) { name_ = ''; }\n        if (parent_ === void 0) { parent_ = null; }\n        if (node_ === void 0) { node_ = new TreeNode(); }\n        this.name_ = name_;\n        this.parent_ = parent_;\n        this.node_ = node_;\n    }\n    /**\n     * Returns a sub-Tree for the given path.\n     *\n     * @param {!(string|Path)} pathObj Path to look up.\n     * @return {!Tree.<T>} Tree for path.\n     */\n    Tree.prototype.subTree = function (pathObj) {\n        // TODO: Require pathObj to be Path?\n        var path = pathObj instanceof Path_1.Path ? pathObj : new Path_1.Path(pathObj);\n        var child = this, next;\n        while ((next = path.getFront()) !== null) {\n            var childNode = util_2.safeGet(child.node_.children, next) || new TreeNode();\n            child = new Tree(next, child, childNode);\n            path = path.popFront();\n        }\n        return child;\n    };\n    /**\n     * Returns the data associated with this tree node.\n     *\n     * @return {?T} The data or null if no data exists.\n     */\n    Tree.prototype.getValue = function () {\n        return this.node_.value;\n    };\n    /**\n     * Sets data to this tree node.\n     *\n     * @param {!T} value Value to set.\n     */\n    Tree.prototype.setValue = function (value) {\n        util_1.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n        this.node_.value = value;\n        this.updateParents_();\n    };\n    /**\n     * Clears the contents of the tree node (its value and all children).\n     */\n    Tree.prototype.clear = function () {\n        this.node_.value = null;\n        this.node_.children = {};\n        this.node_.childCount = 0;\n        this.updateParents_();\n    };\n    /**\n     * @return {boolean} Whether the tree has any children.\n     */\n    Tree.prototype.hasChildren = function () {\n        return this.node_.childCount > 0;\n    };\n    /**\n     * @return {boolean} Whether the tree is empty (no value or children).\n     */\n    Tree.prototype.isEmpty = function () {\n        return this.getValue() === null && !this.hasChildren();\n    };\n    /**\n     * Calls action for each child of this tree node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     */\n    Tree.prototype.forEachChild = function (action) {\n        var _this = this;\n        util_2.forEach(this.node_.children, function (child, childTree) {\n            action(new Tree(child, _this, childTree));\n        });\n    };\n    /**\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n     *   false.\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n     *   parent.\n     */\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n        if (includeSelf && !childrenFirst)\n            action(this);\n        this.forEachChild(function (child) {\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n        });\n        if (includeSelf && childrenFirst)\n            action(this);\n    };\n    /**\n     * Calls action on each ancestor node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n     *   true to abort.\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\n     * @return {boolean} true if the action callback returned true.\n     */\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\n        var node = includeSelf ? this : this.parent();\n        while (node !== null) {\n            if (action(node)) {\n                return true;\n            }\n            node = node.parent();\n        }\n        return false;\n    };\n    /**\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n     * is found, action is called on it and traversal does not continue inside the node.\n     * Action is *not* called on this node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     */\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n        this.forEachChild(function (child) {\n            if (child.getValue() !== null)\n                action(child);\n            else\n                child.forEachImmediateDescendantWithValue(action);\n        });\n    };\n    /**\n     * @return {!Path} The path of this tree node, as a Path.\n     */\n    Tree.prototype.path = function () {\n        return new Path_1.Path(this.parent_ === null\n            ? this.name_\n            : this.parent_.path() + '/' + this.name_);\n    };\n    /**\n     * @return {string} The name of the tree node.\n     */\n    Tree.prototype.name = function () {\n        return this.name_;\n    };\n    /**\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n     */\n    Tree.prototype.parent = function () {\n        return this.parent_;\n    };\n    /**\n     * Adds or removes this child from its parent based on whether it's empty or not.\n     *\n     * @private\n     */\n    Tree.prototype.updateParents_ = function () {\n        if (this.parent_ !== null)\n            this.parent_.updateChild_(this.name_, this);\n    };\n    /**\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\n     *\n     * @param {string} childName The name of the child to update.\n     * @param {!Tree.<T>} child The child to update.\n     * @private\n     */\n    Tree.prototype.updateChild_ = function (childName, child) {\n        var childEmpty = child.isEmpty();\n        var childExists = util_2.contains(this.node_.children, childName);\n        if (childEmpty && childExists) {\n            delete this.node_.children[childName];\n            this.node_.childCount--;\n            this.updateParents_();\n        }\n        else if (!childEmpty && !childExists) {\n            this.node_.children[childName] = child.node_;\n            this.node_.childCount++;\n            this.updateParents_();\n        }\n    };\n    return Tree;\n}());\nexports.Tree = Tree;\n\n//# sourceMappingURL=Tree.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Reference_1 = require(\"../api/Reference\");\nvar DataSnapshot_1 = require(\"../api/DataSnapshot\");\nvar Path_1 = require(\"./util/Path\");\nvar Tree_1 = require(\"./util/Tree\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar util_2 = require(\"./util/util\");\nvar ServerValues_1 = require(\"./util/ServerValues\");\nvar validation_1 = require(\"./util/validation\");\nvar util_3 = require(\"@firebase/util\");\nvar nodeFromJSON_1 = require(\"./snap/nodeFromJSON\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\nvar Repo_1 = require(\"./Repo\");\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n/**\n * @enum {number}\n */\nvar TransactionStatus;\n(function (TransactionStatus) {\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n    // mismatched hash.\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n    // or rejected yet).\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n    // removed when we get a chance to prune completed ones.\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n    // If it comes back as unsuccessful, we'll abort it.\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\n    // Temporary state used to mark transactions that need to be aborted.\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\nRepo_1.Repo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\n * Setup the transaction data structures\n * @private\n */\nRepo_1.Repo.prototype.transactions_init_ = function () {\n    /**\n     * Stores queues of outstanding transactions for Firebase locations.\n     *\n     * @type {!Tree.<Array.<!Transaction>>}\n     * @private\n     */\n    this.transactionQueueTree_ = new Tree_1.Tree();\n};\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo_1.Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n    this.log_('transaction on ' + path);\n    // Add a watch to make sure we get server updates.\n    var valueCallback = function () { };\n    var watchRef = new Reference_1.Reference(this, path);\n    watchRef.on('value', valueCallback);\n    var unwatcher = function () {\n        watchRef.off('value', valueCallback);\n    };\n    // Initialize transaction.\n    var transaction = {\n        path: path,\n        update: transactionUpdate,\n        onComplete: onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out which one goes first.\n        order: util_2.LUIDGenerator(),\n        // Whether to raise local events for this transaction.\n        applyLocally: applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher: unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    var currentState = this.getLatestState_(path);\n    transaction.currentInputSnapshot = currentState;\n    var newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            // We just set the input snapshot, so this cast should be safe\n            var snapshot = new DataSnapshot_1.DataSnapshot(transaction.currentInputSnapshot, new Reference_1.Reference(this, transaction.path), PriorityIndex_1.PRIORITY_INDEX);\n            transaction.onComplete(null, false, snapshot);\n        }\n    }\n    else {\n        validation_1.validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = TransactionStatus.RUN;\n        var queueNode = this.transactionQueueTree_.subTree(path);\n        var nodeQueue = queueNode.getValue() || [];\n        nodeQueue.push(transaction);\n        queueNode.setValue(nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\n        // start new transactions from the event callbacks.\n        var priorityForNode = void 0;\n        if (typeof newVal === 'object' &&\n            newVal !== null &&\n            util_3.contains(newVal, '.priority')) {\n            priorityForNode = util_3.safeGet(newVal, '.priority');\n            util_1.assert(validation_1.isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\n                'Priority must be a valid string, finite number, server value, or null.');\n        }\n        else {\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\n                ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\n        var serverValues = this.generateServerValues();\n        var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, priorityForNode);\n        var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = this.getNextWriteId_();\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n        this.sendReadyTransactions_();\n    }\n};\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\nRepo_1.Repo.prototype.getLatestState_ = function (path, excludeSets) {\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n        ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n};\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\nRepo_1.Repo.prototype.sendReadyTransactions_ = function (node) {\n    var _this = this;\n    if (node === void 0) { node = this.transactionQueueTree_; }\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        this.pruneCompletedTransactionsBelowNode_(node);\n    }\n    if (node.getValue() !== null) {\n        var queue = this.buildTransactionQueue_(node);\n        util_1.assert(queue.length > 0, 'Sending zero length transaction queue');\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            this.sendTransactionQueue_(node.path(), queue);\n        }\n    }\n    else if (node.hasChildren()) {\n        node.forEachChild(function (childNode) {\n            _this.sendReadyTransactions_(childNode);\n        });\n    }\n};\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\nRepo_1.Repo.prototype.sendTransactionQueue_ = function (path, queue) {\n    var _this = this;\n    // Mark transactions as sent and increment retry count!\n    var setsToIgnore = queue.map(function (txn) {\n        return txn.currentWriteId;\n    });\n    var latestState = this.getLatestState_(path, setsToIgnore);\n    var snapToSend = latestState;\n    var latestHash = latestState.hash();\n    for (var i = 0; i < queue.length; i++) {\n        var txn = queue[i];\n        util_1.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = TransactionStatus.SENT;\n        txn.retryCount++;\n        var relativePath = Path_1.Path.relativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    var dataToSend = snapToSend.val(true);\n    var pathToSend = path;\n    // Send the put.\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n        _this.log_('transaction put response', {\n            path: pathToSend.toString(),\n            status: status\n        });\n        var events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n            // the callback could trigger more transactions or sets.\n            var callbacks = [];\n            for (var i = 0; i < queue.length; i++) {\n                queue[i].status = TransactionStatus.COMPLETED;\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\n                    var node = queue[i].currentOutputSnapshotResolved;\n                    var ref = new Reference_1.Reference(_this, queue[i].path);\n                    var snapshot = new DataSnapshot_1.DataSnapshot(node, ref, PriorityIndex_1.PRIORITY_INDEX);\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\n            // There may be pending transactions that we can now send.\n            _this.sendReadyTransactions_();\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\n            // Finally, trigger onComplete callbacks.\n            for (var i = 0; i < callbacks.length; i++) {\n                util_2.exceptionGuard(callbacks[i]);\n            }\n        }\n        else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (var i = 0; i < queue.length; i++) {\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\n                    else\n                        queue[i].status = TransactionStatus.RUN;\n                }\n            }\n            else {\n                util_2.warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (var i = 0; i < queue.length; i++) {\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\n                    queue[i].abortReason = status;\n                }\n            }\n            _this.rerunTransactions_(path);\n        }\n    }, latestHash);\n};\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\nRepo_1.Repo.prototype.rerunTransactions_ = function (changedPath) {\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n    var path = rootMostTransactionNode.path();\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n    this.rerunTransactionQueue_(queue, path);\n    return path;\n};\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\nRepo_1.Repo.prototype.rerunTransactionQueue_ = function (queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = [];\n    var events = [];\n    // Ignore all of the sets we're going to re-run.\n    var txnsToRerun = queue.filter(function (q) {\n        return q.status === TransactionStatus.RUN;\n    });\n    var setsToIgnore = txnsToRerun.map(function (q) {\n        return q.currentWriteId;\n    });\n    for (var i = 0; i < queue.length; i++) {\n        var transaction = queue[i];\n        var relativePath = Path_1.Path.relativePath(path, transaction.path);\n        var abortTransaction = false, abortReason = void 0;\n        util_1.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n        else if (transaction.status === TransactionStatus.RUN) {\n            if (transaction.retryCount >= Repo_1.Repo.MAX_TRANSACTION_RETRIES_) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n            }\n            else {\n                // This code reruns a transaction\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                var newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validation_1.validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    var newDataNode = nodeFromJSON_1.nodeFromJSON(newData);\n                    var hasExplicitPriority = typeof newData === 'object' &&\n                        newData != null &&\n                        util_3.contains(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    var oldWriteId = transaction.currentWriteId;\n                    var serverValues = this.generateServerValues();\n                    var newNodeResolved = ServerValues_1.resolveDeferredValueSnapshot(newDataNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = this.getNextWriteId_();\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n                }\n                else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n                }\n            }\n        }\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = TransactionStatus.COMPLETED;\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n            // So defer the unwatcher until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    var ref = new Reference_1.Reference(this, queue[i].path);\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n                    var snapshot = new DataSnapshot_1.DataSnapshot(lastInput, ref, PriorityIndex_1.PRIORITY_INDEX);\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n                }\n                else {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (var i = 0; i < callbacks.length; i++) {\n        util_2.exceptionGuard(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    this.sendReadyTransactions_();\n};\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\nRepo_1.Repo.prototype.getAncestorTransactionNode_ = function (path) {\n    var front;\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n    var transactionNode = this.transactionQueueTree_;\n    while ((front = path.getFront()) !== null &&\n        transactionNode.getValue() === null) {\n        transactionNode = transactionNode.subTree(front);\n        path = path.popFront();\n    }\n    return transactionNode;\n};\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\nRepo_1.Repo.prototype.buildTransactionQueue_ = function (transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    var transactionQueue = [];\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort(function (a, b) {\n        return a.order - b.order;\n    });\n    return transactionQueue;\n};\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\nRepo_1.Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n    var _this = this;\n    var nodeQueue = node.getValue();\n    if (nodeQueue !== null) {\n        for (var i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    node.forEachChild(function (child) {\n        _this.aggregateTransactionQueuesForNode_(child, queue);\n    });\n};\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\nRepo_1.Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n    var _this = this;\n    var queue = node.getValue();\n    if (queue) {\n        var to = 0;\n        for (var from = 0; from < queue.length; from++) {\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        node.setValue(queue.length > 0 ? queue : null);\n    }\n    node.forEachChild(function (childNode) {\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\n    });\n};\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\nRepo_1.Repo.prototype.abortTransactions_ = function (path) {\n    var _this = this;\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\n    var transactionNode = this.transactionQueueTree_.subTree(path);\n    transactionNode.forEachAncestor(function (node) {\n        _this.abortTransactionsOnNode_(node);\n    });\n    this.abortTransactionsOnNode_(transactionNode);\n    transactionNode.forEachDescendant(function (node) {\n        _this.abortTransactionsOnNode_(node);\n    });\n    return affectedPath;\n};\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\nRepo_1.Repo.prototype.abortTransactionsOnNode_ = function (node) {\n    var queue = node.getValue();\n    if (queue !== null) {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        var callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n        // can be immediately aborted and removed.\n        var events = [];\n        var lastSent = -1;\n        for (var i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n                // Already marked.  No action needed.\n            }\n            else if (queue[i].status === TransactionStatus.SENT) {\n                util_1.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n                queue[i].abortReason = 'set';\n            }\n            else {\n                util_1.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    var snapshot = null;\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            node.setValue(null);\n        }\n        else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n        for (var i = 0; i < callbacks.length; i++) {\n            util_2.exceptionGuard(callbacks[i]);\n        }\n    }\n};\n\n//# sourceMappingURL=Repo_transaction.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar RangedFilter_1 = require(\"./RangedFilter\");\nvar ChildrenNode_1 = require(\"../../snap/ChildrenNode\");\nvar Node_1 = require(\"../../snap/Node\");\nvar util_1 = require(\"@firebase/util\");\nvar Change_1 = require(\"../Change\");\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n *\n * @constructor\n * @implements {NodeFilter}\n */\nvar LimitedFilter = /** @class */ (function () {\n    /**\n     * @param {!QueryParams} params\n     */\n    function LimitedFilter(params) {\n        this.rangedFilter_ = new RangedFilter_1.RangedFilter(params);\n        this.index_ = params.getIndex();\n        this.limit_ = params.getLimit();\n        this.reverse_ = !params.isViewFromLeft();\n    }\n    /**\n     * @inheritDoc\n     */\n    LimitedFilter.prototype.updateChild = function (snap, key, newChild, affectedPath, source, optChangeAccumulator) {\n        if (!this.rangedFilter_.matches(new Node_1.NamedNode(key, newChild))) {\n            newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        }\n        if (snap.getImmediateChild(key).equals(newChild)) {\n            // No change\n            return snap;\n        }\n        else if (snap.numChildren() < this.limit_) {\n            return this.rangedFilter_\n                .getIndexedFilter()\n                .updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);\n        }\n        else {\n            return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    LimitedFilter.prototype.updateFullNode = function (oldSnap, newSnap, optChangeAccumulator) {\n        var filtered;\n        if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n            // Make sure we have a children node with the correct index, not a leaf node;\n            filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        }\n        else {\n            if (this.limit_ * 2 < newSnap.numChildren() &&\n                newSnap.isIndexed(this.index_)) {\n                // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n                filtered = ChildrenNode_1.ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n                // anchor to the startPost, endPost, or last element as appropriate\n                var iterator = void 0;\n                if (this.reverse_) {\n                    iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);\n                }\n                else {\n                    iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);\n                }\n                var count = 0;\n                while (iterator.hasNext() && count < this.limit_) {\n                    var next = iterator.getNext();\n                    var inRange = void 0;\n                    if (this.reverse_) {\n                        inRange =\n                            this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n                    }\n                    else {\n                        inRange =\n                            this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n                    }\n                    if (inRange) {\n                        filtered = filtered.updateImmediateChild(next.name, next.node);\n                        count++;\n                    }\n                    else {\n                        // if we have reached the end post, we cannot keep adding elemments\n                        break;\n                    }\n                }\n            }\n            else {\n                // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n                filtered = newSnap.withIndex(this.index_);\n                // Don't support priorities on queries\n                filtered = filtered.updatePriority(ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n                var startPost = void 0;\n                var endPost = void 0;\n                var cmp = void 0;\n                var iterator = void 0;\n                if (this.reverse_) {\n                    iterator = filtered.getReverseIterator(this.index_);\n                    startPost = this.rangedFilter_.getEndPost();\n                    endPost = this.rangedFilter_.getStartPost();\n                    var indexCompare_1 = this.index_.getCompare();\n                    cmp = function (a, b) { return indexCompare_1(b, a); };\n                }\n                else {\n                    iterator = filtered.getIterator(this.index_);\n                    startPost = this.rangedFilter_.getStartPost();\n                    endPost = this.rangedFilter_.getEndPost();\n                    cmp = this.index_.getCompare();\n                }\n                var count = 0;\n                var foundStartPost = false;\n                while (iterator.hasNext()) {\n                    var next = iterator.getNext();\n                    if (!foundStartPost && cmp(startPost, next) <= 0) {\n                        // start adding\n                        foundStartPost = true;\n                    }\n                    var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n                    if (inRange) {\n                        count++;\n                    }\n                    else {\n                        filtered = filtered.updateImmediateChild(next.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n                    }\n                }\n            }\n        }\n        return this.rangedFilter_\n            .getIndexedFilter()\n            .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n    };\n    /**\n     * @inheritDoc\n     */\n    LimitedFilter.prototype.updatePriority = function (oldSnap, newPriority) {\n        // Don't support priorities on queries\n        return oldSnap;\n    };\n    /**\n     * @inheritDoc\n     */\n    LimitedFilter.prototype.filtersNodes = function () {\n        return true;\n    };\n    /**\n     * @inheritDoc\n     */\n    LimitedFilter.prototype.getIndexedFilter = function () {\n        return this.rangedFilter_.getIndexedFilter();\n    };\n    /**\n     * @inheritDoc\n     */\n    LimitedFilter.prototype.getIndex = function () {\n        return this.index_;\n    };\n    /**\n     * @param {!Node} snap\n     * @param {string} childKey\n     * @param {!Node} childSnap\n     * @param {!CompleteChildSource} source\n     * @param {?ChildChangeAccumulator} changeAccumulator\n     * @return {!Node}\n     * @private\n     */\n    LimitedFilter.prototype.fullLimitUpdateChild_ = function (snap, childKey, childSnap, source, changeAccumulator) {\n        // TODO: rename all cache stuff etc to general snap terminology\n        var cmp;\n        if (this.reverse_) {\n            var indexCmp_1 = this.index_.getCompare();\n            cmp = function (a, b) { return indexCmp_1(b, a); };\n        }\n        else {\n            cmp = this.index_.getCompare();\n        }\n        var oldEventCache = snap;\n        util_1.assert(oldEventCache.numChildren() == this.limit_, '');\n        var newChildNamedNode = new Node_1.NamedNode(childKey, childSnap);\n        var windowBoundary = this.reverse_\n            ? oldEventCache.getFirstChild(this.index_)\n            : oldEventCache.getLastChild(this.index_);\n        var inRange = this.rangedFilter_.matches(newChildNamedNode);\n        if (oldEventCache.hasChild(childKey)) {\n            var oldChildSnap = oldEventCache.getImmediateChild(childKey);\n            var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);\n            while (nextChild != null &&\n                (nextChild.name == childKey || oldEventCache.hasChild(nextChild.name))) {\n                // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n                // been applied to the limited filter yet. Ignore this next child which will be updated later in\n                // the limited filter...\n                nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);\n            }\n            var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n            var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;\n            if (remainsInWindow) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(Change_1.Change.childChangedChange(childKey, childSnap, oldChildSnap));\n                }\n                return oldEventCache.updateImmediateChild(childKey, childSnap);\n            }\n            else {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(childKey, oldChildSnap));\n                }\n                var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n                var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);\n                if (nextChildInRange) {\n                    if (changeAccumulator != null) {\n                        changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(nextChild.name, nextChild.node));\n                    }\n                    return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);\n                }\n                else {\n                    return newEventCache;\n                }\n            }\n        }\n        else if (childSnap.isEmpty()) {\n            // we're deleting a node, but it was not in the window, so ignore it\n            return snap;\n        }\n        else if (inRange) {\n            if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n                if (changeAccumulator != null) {\n                    changeAccumulator.trackChildChange(Change_1.Change.childRemovedChange(windowBoundary.name, windowBoundary.node));\n                    changeAccumulator.trackChildChange(Change_1.Change.childAddedChange(childKey, childSnap));\n                }\n                return oldEventCache\n                    .updateImmediateChild(childKey, childSnap)\n                    .updateImmediateChild(windowBoundary.name, ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n            }\n            else {\n                return snap;\n            }\n        }\n        else {\n            return snap;\n        }\n    };\n    return LimitedFilter;\n}());\nexports.LimitedFilter = LimitedFilter;\n\n//# sourceMappingURL=LimitedFilter.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar KeyIndex_1 = require(\"../snap/indexes/KeyIndex\");\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\nvar ValueIndex_1 = require(\"../snap/indexes/ValueIndex\");\nvar PathIndex_1 = require(\"../snap/indexes/PathIndex\");\nvar IndexedFilter_1 = require(\"./filter/IndexedFilter\");\nvar LimitedFilter_1 = require(\"./filter/LimitedFilter\");\nvar RangedFilter_1 = require(\"./filter/RangedFilter\");\nvar util_3 = require(\"@firebase/util\");\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n * @constructor\n */\nvar QueryParams = /** @class */ (function () {\n    function QueryParams() {\n        this.limitSet_ = false;\n        this.startSet_ = false;\n        this.startNameSet_ = false;\n        this.endSet_ = false;\n        this.endNameSet_ = false;\n        this.limit_ = 0;\n        this.viewFrom_ = '';\n        this.indexStartValue_ = null;\n        this.indexStartName_ = '';\n        this.indexEndValue_ = null;\n        this.indexEndName_ = '';\n        this.index_ = PriorityIndex_1.PRIORITY_INDEX;\n    }\n    /**\n     * @return {boolean}\n     */\n    QueryParams.prototype.hasStart = function () {\n        return this.startSet_;\n    };\n    /**\n     * @return {boolean} True if it would return from left.\n     */\n    QueryParams.prototype.isViewFromLeft = function () {\n        if (this.viewFrom_ === '') {\n            // limit(), rather than limitToFirst or limitToLast was called.\n            // This means that only one of startSet_ and endSet_ is true. Use them\n            // to calculate which side of the view to anchor to. If neither is set,\n            // anchor to the end.\n            return this.startSet_;\n        }\n        else {\n            return (this.viewFrom_ === QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT);\n        }\n    };\n    /**\n     * Only valid to call if hasStart() returns true\n     * @return {*}\n     */\n    QueryParams.prototype.getIndexStartValue = function () {\n        util_1.assert(this.startSet_, 'Only valid if start has been set');\n        return this.indexStartValue_;\n    };\n    /**\n     * Only valid to call if hasStart() returns true.\n     * Returns the starting key name for the range defined by these query parameters\n     * @return {!string}\n     */\n    QueryParams.prototype.getIndexStartName = function () {\n        util_1.assert(this.startSet_, 'Only valid if start has been set');\n        if (this.startNameSet_) {\n            return this.indexStartName_;\n        }\n        else {\n            return util_2.MIN_NAME;\n        }\n    };\n    /**\n     * @return {boolean}\n     */\n    QueryParams.prototype.hasEnd = function () {\n        return this.endSet_;\n    };\n    /**\n     * Only valid to call if hasEnd() returns true.\n     * @return {*}\n     */\n    QueryParams.prototype.getIndexEndValue = function () {\n        util_1.assert(this.endSet_, 'Only valid if end has been set');\n        return this.indexEndValue_;\n    };\n    /**\n     * Only valid to call if hasEnd() returns true.\n     * Returns the end key name for the range defined by these query parameters\n     * @return {!string}\n     */\n    QueryParams.prototype.getIndexEndName = function () {\n        util_1.assert(this.endSet_, 'Only valid if end has been set');\n        if (this.endNameSet_) {\n            return this.indexEndName_;\n        }\n        else {\n            return util_2.MAX_NAME;\n        }\n    };\n    /**\n     * @return {boolean}\n     */\n    QueryParams.prototype.hasLimit = function () {\n        return this.limitSet_;\n    };\n    /**\n     * @return {boolean} True if a limit has been set and it has been explicitly anchored\n     */\n    QueryParams.prototype.hasAnchoredLimit = function () {\n        return this.limitSet_ && this.viewFrom_ !== '';\n    };\n    /**\n     * Only valid to call if hasLimit() returns true\n     * @return {!number}\n     */\n    QueryParams.prototype.getLimit = function () {\n        util_1.assert(this.limitSet_, 'Only valid if limit has been set');\n        return this.limit_;\n    };\n    /**\n     * @return {!Index}\n     */\n    QueryParams.prototype.getIndex = function () {\n        return this.index_;\n    };\n    /**\n     * @return {!QueryParams}\n     * @private\n     */\n    QueryParams.prototype.copy_ = function () {\n        var copy = new QueryParams();\n        copy.limitSet_ = this.limitSet_;\n        copy.limit_ = this.limit_;\n        copy.startSet_ = this.startSet_;\n        copy.indexStartValue_ = this.indexStartValue_;\n        copy.startNameSet_ = this.startNameSet_;\n        copy.indexStartName_ = this.indexStartName_;\n        copy.endSet_ = this.endSet_;\n        copy.indexEndValue_ = this.indexEndValue_;\n        copy.endNameSet_ = this.endNameSet_;\n        copy.indexEndName_ = this.indexEndName_;\n        copy.index_ = this.index_;\n        copy.viewFrom_ = this.viewFrom_;\n        return copy;\n    };\n    /**\n     * @param {!number} newLimit\n     * @return {!QueryParams}\n     */\n    QueryParams.prototype.limit = function (newLimit) {\n        var newParams = this.copy_();\n        newParams.limitSet_ = true;\n        newParams.limit_ = newLimit;\n        newParams.viewFrom_ = '';\n        return newParams;\n    };\n    /**\n     * @param {!number} newLimit\n     * @return {!QueryParams}\n     */\n    QueryParams.prototype.limitToFirst = function (newLimit) {\n        var newParams = this.copy_();\n        newParams.limitSet_ = true;\n        newParams.limit_ = newLimit;\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT;\n        return newParams;\n    };\n    /**\n     * @param {!number} newLimit\n     * @return {!QueryParams}\n     */\n    QueryParams.prototype.limitToLast = function (newLimit) {\n        var newParams = this.copy_();\n        newParams.limitSet_ = true;\n        newParams.limit_ = newLimit;\n        newParams.viewFrom_ = QueryParams.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT;\n        return newParams;\n    };\n    /**\n     * @param {*} indexValue\n     * @param {?string=} key\n     * @return {!QueryParams}\n     */\n    QueryParams.prototype.startAt = function (indexValue, key) {\n        var newParams = this.copy_();\n        newParams.startSet_ = true;\n        if (!(indexValue !== undefined)) {\n            indexValue = null;\n        }\n        newParams.indexStartValue_ = indexValue;\n        if (key != null) {\n            newParams.startNameSet_ = true;\n            newParams.indexStartName_ = key;\n        }\n        else {\n            newParams.startNameSet_ = false;\n            newParams.indexStartName_ = '';\n        }\n        return newParams;\n    };\n    /**\n     * @param {*} indexValue\n     * @param {?string=} key\n     * @return {!QueryParams}\n     */\n    QueryParams.prototype.endAt = function (indexValue, key) {\n        var newParams = this.copy_();\n        newParams.endSet_ = true;\n        if (!(indexValue !== undefined)) {\n            indexValue = null;\n        }\n        newParams.indexEndValue_ = indexValue;\n        if (key !== undefined) {\n            newParams.endNameSet_ = true;\n            newParams.indexEndName_ = key;\n        }\n        else {\n            newParams.endNameSet_ = false;\n            newParams.indexEndName_ = '';\n        }\n        return newParams;\n    };\n    /**\n     * @param {!Index} index\n     * @return {!QueryParams}\n     */\n    QueryParams.prototype.orderBy = function (index) {\n        var newParams = this.copy_();\n        newParams.index_ = index;\n        return newParams;\n    };\n    /**\n     * @return {!Object}\n     */\n    QueryParams.prototype.getQueryObject = function () {\n        var WIRE_PROTOCOL_CONSTANTS = QueryParams.WIRE_PROTOCOL_CONSTANTS_;\n        var obj = {};\n        if (this.startSet_) {\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] = this.indexStartValue_;\n            if (this.startNameSet_) {\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] = this.indexStartName_;\n            }\n        }\n        if (this.endSet_) {\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = this.indexEndValue_;\n            if (this.endNameSet_) {\n                obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = this.indexEndName_;\n            }\n        }\n        if (this.limitSet_) {\n            obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = this.limit_;\n            var viewFrom = this.viewFrom_;\n            if (viewFrom === '') {\n                if (this.isViewFromLeft()) {\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n                }\n                else {\n                    viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n                }\n            }\n            obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n        }\n        // For now, priority index is the default, so we only specify if it's some other index\n        if (this.index_ !== PriorityIndex_1.PRIORITY_INDEX) {\n            obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = this.index_.toString();\n        }\n        return obj;\n    };\n    /**\n     * @return {boolean}\n     */\n    QueryParams.prototype.loadsAllData = function () {\n        return !(this.startSet_ || this.endSet_ || this.limitSet_);\n    };\n    /**\n     * @return {boolean}\n     */\n    QueryParams.prototype.isDefault = function () {\n        return this.loadsAllData() && this.index_ == PriorityIndex_1.PRIORITY_INDEX;\n    };\n    /**\n     * @return {!NodeFilter}\n     */\n    QueryParams.prototype.getNodeFilter = function () {\n        if (this.loadsAllData()) {\n            return new IndexedFilter_1.IndexedFilter(this.getIndex());\n        }\n        else if (this.hasLimit()) {\n            return new LimitedFilter_1.LimitedFilter(this);\n        }\n        else {\n            return new RangedFilter_1.RangedFilter(this);\n        }\n    };\n    /**\n     * Returns a set of REST query string parameters representing this query.\n     *\n     * @return {!Object.<string,*>} query string parameters\n     */\n    QueryParams.prototype.toRestQueryStringParameters = function () {\n        var REST_CONSTANTS = QueryParams.REST_QUERY_CONSTANTS_;\n        var qs = {};\n        if (this.isDefault()) {\n            return qs;\n        }\n        var orderBy;\n        if (this.index_ === PriorityIndex_1.PRIORITY_INDEX) {\n            orderBy = REST_CONSTANTS.PRIORITY_INDEX;\n        }\n        else if (this.index_ === ValueIndex_1.VALUE_INDEX) {\n            orderBy = REST_CONSTANTS.VALUE_INDEX;\n        }\n        else if (this.index_ === KeyIndex_1.KEY_INDEX) {\n            orderBy = REST_CONSTANTS.KEY_INDEX;\n        }\n        else {\n            util_1.assert(this.index_ instanceof PathIndex_1.PathIndex, 'Unrecognized index type!');\n            orderBy = this.index_.toString();\n        }\n        qs[REST_CONSTANTS.ORDER_BY] = util_3.stringify(orderBy);\n        if (this.startSet_) {\n            qs[REST_CONSTANTS.START_AT] = util_3.stringify(this.indexStartValue_);\n            if (this.startNameSet_) {\n                qs[REST_CONSTANTS.START_AT] += ',' + util_3.stringify(this.indexStartName_);\n            }\n        }\n        if (this.endSet_) {\n            qs[REST_CONSTANTS.END_AT] = util_3.stringify(this.indexEndValue_);\n            if (this.endNameSet_) {\n                qs[REST_CONSTANTS.END_AT] += ',' + util_3.stringify(this.indexEndName_);\n            }\n        }\n        if (this.limitSet_) {\n            if (this.isViewFromLeft()) {\n                qs[REST_CONSTANTS.LIMIT_TO_FIRST] = this.limit_;\n            }\n            else {\n                qs[REST_CONSTANTS.LIMIT_TO_LAST] = this.limit_;\n            }\n        }\n        return qs;\n    };\n    /**\n     * Wire Protocol Constants\n     * @const\n     * @enum {string}\n     * @private\n     */\n    QueryParams.WIRE_PROTOCOL_CONSTANTS_ = {\n        INDEX_START_VALUE: 'sp',\n        INDEX_START_NAME: 'sn',\n        INDEX_END_VALUE: 'ep',\n        INDEX_END_NAME: 'en',\n        LIMIT: 'l',\n        VIEW_FROM: 'vf',\n        VIEW_FROM_LEFT: 'l',\n        VIEW_FROM_RIGHT: 'r',\n        INDEX: 'i'\n    };\n    /**\n     * REST Query Constants\n     * @const\n     * @enum {string}\n     * @private\n     */\n    QueryParams.REST_QUERY_CONSTANTS_ = {\n        ORDER_BY: 'orderBy',\n        PRIORITY_INDEX: '$priority',\n        VALUE_INDEX: '$value',\n        KEY_INDEX: '$key',\n        START_AT: 'startAt',\n        END_AT: 'endAt',\n        LIMIT_TO_FIRST: 'limitToFirst',\n        LIMIT_TO_LAST: 'limitToLast'\n    };\n    /**\n     * Default, empty query parameters\n     * @type {!QueryParams}\n     * @const\n     */\n    QueryParams.DEFAULT = new QueryParams();\n    return QueryParams;\n}());\nexports.QueryParams = QueryParams;\n\n//# sourceMappingURL=QueryParams.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"./util/util\");\nvar util_3 = require(\"@firebase/util\");\nvar util_4 = require(\"@firebase/util\");\nvar util_5 = require(\"@firebase/util\");\nvar ServerActions_1 = require(\"./ServerActions\");\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nvar ReadonlyRestClient = /** @class */ (function (_super) {\n    tslib_1.__extends(ReadonlyRestClient, _super);\n    /**\n     * @param {!RepoInfo} repoInfo_ Data about the namespace we are connecting to\n     * @param {function(string, *, boolean, ?number)} onDataUpdate_ A callback for new data from the server\n     * @param {AuthTokenProvider} authTokenProvider_\n     * @implements {ServerActions}\n     */\n    function ReadonlyRestClient(repoInfo_, onDataUpdate_, authTokenProvider_) {\n        var _this = _super.call(this) || this;\n        _this.repoInfo_ = repoInfo_;\n        _this.onDataUpdate_ = onDataUpdate_;\n        _this.authTokenProvider_ = authTokenProvider_;\n        /** @private {function(...[*])} */\n        _this.log_ = util_2.logWrapper('p:rest:');\n        /**\n         * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n         * that's been removed. :-/\n         *\n         * @private {!Object.<string, !Object>}\n         */\n        _this.listens_ = {};\n        return _this;\n    }\n    ReadonlyRestClient.prototype.reportStats = function (stats) {\n        throw new Error('Method not implemented.');\n    };\n    /**\n     * @param {!Query} query\n     * @param {?number=} tag\n     * @return {string}\n     * @private\n     */\n    ReadonlyRestClient.getListenId_ = function (query, tag) {\n        if (tag !== undefined) {\n            return 'tag$' + tag;\n        }\n        else {\n            util_1.assert(query.getQueryParams().isDefault(), \"should have a tag if it's not a default query.\");\n            return query.path.toString();\n        }\n    };\n    /** @inheritDoc */\n    ReadonlyRestClient.prototype.listen = function (query, currentHashFn, tag, onComplete) {\n        var _this = this;\n        var pathString = query.path.toString();\n        this.log_('Listen called for ' + pathString + ' ' + query.queryIdentifier());\n        // Mark this listener so we can tell if it's removed.\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\n        var thisListen = {};\n        this.listens_[listenId] = thisListen;\n        var queryStringParamaters = query\n            .getQueryParams()\n            .toRestQueryStringParameters();\n        this.restRequest_(pathString + '.json', queryStringParamaters, function (error, result) {\n            var data = result;\n            if (error === 404) {\n                data = null;\n                error = null;\n            }\n            if (error === null) {\n                _this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n            }\n            if (util_4.safeGet(_this.listens_, listenId) === thisListen) {\n                var status_1;\n                if (!error) {\n                    status_1 = 'ok';\n                }\n                else if (error == 401) {\n                    status_1 = 'permission_denied';\n                }\n                else {\n                    status_1 = 'rest_error:' + error;\n                }\n                onComplete(status_1, null);\n            }\n        });\n    };\n    /** @inheritDoc */\n    ReadonlyRestClient.prototype.unlisten = function (query, tag) {\n        var listenId = ReadonlyRestClient.getListenId_(query, tag);\n        delete this.listens_[listenId];\n    };\n    /** @inheritDoc */\n    ReadonlyRestClient.prototype.refreshAuthToken = function (token) {\n        // no-op since we just always call getToken.\n    };\n    /**\n     * Performs a REST request to the given path, with the provided query string parameters,\n     * and any auth credentials we have.\n     *\n     * @param {!string} pathString\n     * @param {!Object.<string, *>} queryStringParameters\n     * @param {?function(?number, *=)} callback\n     * @private\n     */\n    ReadonlyRestClient.prototype.restRequest_ = function (pathString, queryStringParameters, callback) {\n        var _this = this;\n        if (queryStringParameters === void 0) { queryStringParameters = {}; }\n        queryStringParameters['format'] = 'export';\n        this.authTokenProvider_\n            .getToken(/*forceRefresh=*/ false)\n            .then(function (authTokenData) {\n            var authToken = authTokenData && authTokenData.accessToken;\n            if (authToken) {\n                queryStringParameters['auth'] = authToken;\n            }\n            var url = (_this.repoInfo_.secure ? 'https://' : 'http://') +\n                _this.repoInfo_.host +\n                pathString +\n                '?' +\n                util_5.querystring(queryStringParameters);\n            _this.log_('Sending REST request for ' + url);\n            var xhr = new XMLHttpRequest();\n            xhr.onreadystatechange = function () {\n                if (callback && xhr.readyState === 4) {\n                    _this.log_('REST Response for ' + url + ' received. status:', xhr.status, 'response:', xhr.responseText);\n                    var res = null;\n                    if (xhr.status >= 200 && xhr.status < 300) {\n                        try {\n                            res = util_3.jsonEval(xhr.responseText);\n                        }\n                        catch (e) {\n                            util_2.warn('Failed to parse JSON response for ' +\n                                url +\n                                ': ' +\n                                xhr.responseText);\n                        }\n                        callback(null, res);\n                    }\n                    else {\n                        // 401 and 404 are expected.\n                        if (xhr.status !== 401 && xhr.status !== 404) {\n                            util_2.warn('Got unsuccessful REST response for ' +\n                                url +\n                                ' Status: ' +\n                                xhr.status);\n                        }\n                        callback(xhr.status);\n                    }\n                    callback = null;\n                }\n            };\n            xhr.open('GET', url, /*asynchronous=*/ true);\n            xhr.send();\n        });\n    };\n    return ReadonlyRestClient;\n}(ServerActions_1.ServerActions));\nexports.ReadonlyRestClient = ReadonlyRestClient;\n\n//# sourceMappingURL=ReadonlyRestClient.js.map\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../../core/util/util\");\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n * @constructor\n */\nvar PacketReceiver = /** @class */ (function () {\n    /**\n     * @param onMessage_\n     */\n    function PacketReceiver(onMessage_) {\n        this.onMessage_ = onMessage_;\n        this.pendingResponses = [];\n        this.currentResponseNum = 0;\n        this.closeAfterResponse = -1;\n        this.onClose = null;\n    }\n    PacketReceiver.prototype.closeAfter = function (responseNum, callback) {\n        this.closeAfterResponse = responseNum;\n        this.onClose = callback;\n        if (this.closeAfterResponse < this.currentResponseNum) {\n            this.onClose();\n            this.onClose = null;\n        }\n    };\n    /**\n     * Each message from the server comes with a response number, and an array of data. The responseNumber\n     * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n     * browsers will respond in the same order as the requests we sent\n     * @param {number} requestNum\n     * @param {Array} data\n     */\n    PacketReceiver.prototype.handleResponse = function (requestNum, data) {\n        var _this = this;\n        this.pendingResponses[requestNum] = data;\n        var _loop_1 = function () {\n            var toProcess = this_1.pendingResponses[this_1.currentResponseNum];\n            delete this_1.pendingResponses[this_1.currentResponseNum];\n            var _loop_2 = function (i) {\n                if (toProcess[i]) {\n                    util_1.exceptionGuard(function () {\n                        _this.onMessage_(toProcess[i]);\n                    });\n                }\n            };\n            for (var i = 0; i < toProcess.length; ++i) {\n                _loop_2(i);\n            }\n            if (this_1.currentResponseNum === this_1.closeAfterResponse) {\n                if (this_1.onClose) {\n                    this_1.onClose();\n                    this_1.onClose = null;\n                }\n                return \"break\";\n            }\n            this_1.currentResponseNum++;\n        };\n        var this_1 = this;\n        while (this.pendingResponses[this.currentResponseNum]) {\n            var state_1 = _loop_1();\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    return PacketReceiver;\n}());\nexports.PacketReceiver = PacketReceiver;\n\n//# sourceMappingURL=PacketReceiver.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BrowserPollConnection_1 = require(\"./BrowserPollConnection\");\nvar WebSocketConnection_1 = require(\"./WebSocketConnection\");\nvar util_1 = require(\"../core/util/util\");\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n * @constructor\n */\nvar TransportManager = /** @class */ (function () {\n    /**\n     * @param {!RepoInfo} repoInfo Metadata around the namespace we're connecting to\n     */\n    function TransportManager(repoInfo) {\n        this.initTransports_(repoInfo);\n    }\n    Object.defineProperty(TransportManager, \"ALL_TRANSPORTS\", {\n        /**\n         * @const\n         * @type {!Array.<function(new:Transport, string, RepoInfo, string=)>}\n         */\n        get: function () {\n            return [BrowserPollConnection_1.BrowserPollConnection, WebSocketConnection_1.WebSocketConnection];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {!RepoInfo} repoInfo\n     * @private\n     */\n    TransportManager.prototype.initTransports_ = function (repoInfo) {\n        var isWebSocketsAvailable = WebSocketConnection_1.WebSocketConnection && WebSocketConnection_1.WebSocketConnection['isAvailable']();\n        var isSkipPollConnection = isWebSocketsAvailable && !WebSocketConnection_1.WebSocketConnection.previouslyFailed();\n        if (repoInfo.webSocketOnly) {\n            if (!isWebSocketsAvailable)\n                util_1.warn(\"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\");\n            isSkipPollConnection = true;\n        }\n        if (isSkipPollConnection) {\n            this.transports_ = [WebSocketConnection_1.WebSocketConnection];\n        }\n        else {\n            var transports_1 = (this.transports_ = []);\n            util_1.each(TransportManager.ALL_TRANSPORTS, function (i, transport) {\n                if (transport && transport['isAvailable']()) {\n                    transports_1.push(transport);\n                }\n            });\n        }\n    };\n    /**\n     * @return {function(new:Transport, !string, !RepoInfo, string=, string=)} The constructor for the\n     * initial transport to use\n     */\n    TransportManager.prototype.initialTransport = function () {\n        if (this.transports_.length > 0) {\n            return this.transports_[0];\n        }\n        else {\n            throw new Error('No transports available');\n        }\n    };\n    /**\n     * @return {?function(new:Transport, function(),function(), string=)} The constructor for the next\n     * transport, or null\n     */\n    TransportManager.prototype.upgradeTransport = function () {\n        if (this.transports_.length > 1) {\n            return this.transports_[1];\n        }\n        else {\n            return null;\n        }\n    };\n    return TransportManager;\n}());\nexports.TransportManager = TransportManager;\n\n//# sourceMappingURL=TransportManager.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar util_1 = require(\"@firebase/util\");\nvar EventEmitter_1 = require(\"./EventEmitter\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n *\n * @extends {EventEmitter}\n */\nvar OnlineMonitor = /** @class */ (function (_super) {\n    tslib_1.__extends(OnlineMonitor, _super);\n    function OnlineMonitor() {\n        var _this = _super.call(this, ['online']) || this;\n        _this.online_ = true;\n        // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n        // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n        // It would seem that the 'online' event does not always fire consistently. So we disable it\n        // for Cordova.\n        if (typeof window !== 'undefined' &&\n            typeof window.addEventListener !== 'undefined' &&\n            !util_2.isMobileCordova()) {\n            window.addEventListener('online', function () {\n                if (!_this.online_) {\n                    _this.online_ = true;\n                    _this.trigger('online', true);\n                }\n            }, false);\n            window.addEventListener('offline', function () {\n                if (_this.online_) {\n                    _this.online_ = false;\n                    _this.trigger('online', false);\n                }\n            }, false);\n        }\n        return _this;\n    }\n    OnlineMonitor.getInstance = function () {\n        return new OnlineMonitor();\n    };\n    /**\n     * @param {!string} eventType\n     * @return {Array.<boolean>}\n     */\n    OnlineMonitor.prototype.getInitialEvent = function (eventType) {\n        util_1.assert(eventType === 'online', 'Unknown event type: ' + eventType);\n        return [this.online_];\n    };\n    /**\n     * @return {boolean}\n     */\n    OnlineMonitor.prototype.currentlyOnline = function () {\n        return this.online_;\n    };\n    return OnlineMonitor;\n}(EventEmitter_1.EventEmitter));\nexports.OnlineMonitor = OnlineMonitor;\n\n//# sourceMappingURL=OnlineMonitor.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar EventEmitter_1 = require(\"./EventEmitter\");\nvar util_1 = require(\"@firebase/util\");\n/**\n * @extends {EventEmitter}\n */\nvar VisibilityMonitor = /** @class */ (function (_super) {\n    tslib_1.__extends(VisibilityMonitor, _super);\n    function VisibilityMonitor() {\n        var _this = _super.call(this, ['visible']) || this;\n        var hidden;\n        var visibilityChange;\n        if (typeof document !== 'undefined' &&\n            typeof document.addEventListener !== 'undefined') {\n            if (typeof document['hidden'] !== 'undefined') {\n                // Opera 12.10 and Firefox 18 and later support\n                visibilityChange = 'visibilitychange';\n                hidden = 'hidden';\n            }\n            else if (typeof document['mozHidden'] !== 'undefined') {\n                visibilityChange = 'mozvisibilitychange';\n                hidden = 'mozHidden';\n            }\n            else if (typeof document['msHidden'] !== 'undefined') {\n                visibilityChange = 'msvisibilitychange';\n                hidden = 'msHidden';\n            }\n            else if (typeof document['webkitHidden'] !== 'undefined') {\n                visibilityChange = 'webkitvisibilitychange';\n                hidden = 'webkitHidden';\n            }\n        }\n        // Initially, we always assume we are visible. This ensures that in browsers\n        // without page visibility support or in cases where we are never visible\n        // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n        // reconnects\n        _this.visible_ = true;\n        if (visibilityChange) {\n            document.addEventListener(visibilityChange, function () {\n                var visible = !document[hidden];\n                if (visible !== _this.visible_) {\n                    _this.visible_ = visible;\n                    _this.trigger('visible', visible);\n                }\n            }, false);\n        }\n        return _this;\n    }\n    VisibilityMonitor.getInstance = function () {\n        return new VisibilityMonitor();\n    };\n    /**\n     * @param {!string} eventType\n     * @return {Array.<boolean>}\n     */\n    VisibilityMonitor.prototype.getInitialEvent = function (eventType) {\n        util_1.assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n        return [this.visible_];\n    };\n    return VisibilityMonitor;\n}(EventEmitter_1.EventEmitter));\nexports.VisibilityMonitor = VisibilityMonitor;\n\n//# sourceMappingURL=VisibilityMonitor.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"../util/util\");\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n * @constructor\n */\nvar EventQueue = /** @class */ (function () {\n    function EventQueue() {\n        /**\n         * @private\n         * @type {!Array.<EventList>}\n         */\n        this.eventLists_ = [];\n        /**\n         * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n         * @private\n         * @type {!number}\n         */\n        this.recursionDepth_ = 0;\n    }\n    /**\n     * @param {!Array.<Event>} eventDataList The new events to queue.\n     */\n    EventQueue.prototype.queueEvents = function (eventDataList) {\n        // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n        var currList = null;\n        for (var i = 0; i < eventDataList.length; i++) {\n            var eventData = eventDataList[i];\n            var eventPath = eventData.getPath();\n            if (currList !== null && !eventPath.equals(currList.getPath())) {\n                this.eventLists_.push(currList);\n                currList = null;\n            }\n            if (currList === null) {\n                currList = new EventList(eventPath);\n            }\n            currList.add(eventData);\n        }\n        if (currList) {\n            this.eventLists_.push(currList);\n        }\n    };\n    /**\n     * Queues the specified events and synchronously raises all events (including previously queued ones)\n     * for the specified path.\n     *\n     * It is assumed that the new events are all for the specified path.\n     *\n     * @param {!Path} path The path to raise events for.\n     * @param {!Array.<Event>} eventDataList The new events to raise.\n     */\n    EventQueue.prototype.raiseEventsAtPath = function (path, eventDataList) {\n        this.queueEvents(eventDataList);\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n            return eventPath.equals(path);\n        });\n    };\n    /**\n     * Queues the specified events and synchronously raises all events (including previously queued ones) for\n     * locations related to the specified change path (i.e. all ancestors and descendants).\n     *\n     * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n     *\n     * @param {!Path} changedPath The path to raise events for.\n     * @param {!Array.<!Event>} eventDataList The events to raise\n     */\n    EventQueue.prototype.raiseEventsForChangedPath = function (changedPath, eventDataList) {\n        this.queueEvents(eventDataList);\n        this.raiseQueuedEventsMatchingPredicate_(function (eventPath) {\n            return eventPath.contains(changedPath) || changedPath.contains(eventPath);\n        });\n    };\n    /**\n     * @param {!function(!Path):boolean} predicate\n     * @private\n     */\n    EventQueue.prototype.raiseQueuedEventsMatchingPredicate_ = function (predicate) {\n        this.recursionDepth_++;\n        var sentAll = true;\n        for (var i = 0; i < this.eventLists_.length; i++) {\n            var eventList = this.eventLists_[i];\n            if (eventList) {\n                var eventPath = eventList.getPath();\n                if (predicate(eventPath)) {\n                    this.eventLists_[i].raise();\n                    this.eventLists_[i] = null;\n                }\n                else {\n                    sentAll = false;\n                }\n            }\n        }\n        if (sentAll) {\n            this.eventLists_ = [];\n        }\n        this.recursionDepth_--;\n    };\n    return EventQueue;\n}());\nexports.EventQueue = EventQueue;\n/**\n * @param {!Path} path\n * @constructor\n */\nvar EventList = /** @class */ (function () {\n    function EventList(path_) {\n        this.path_ = path_;\n        /**\n         * @type {!Array.<Event>}\n         * @private\n         */\n        this.events_ = [];\n    }\n    /**\n     * @param {!Event} eventData\n     */\n    EventList.prototype.add = function (eventData) {\n        this.events_.push(eventData);\n    };\n    /**\n     * Iterates through the list and raises each event\n     */\n    EventList.prototype.raise = function () {\n        for (var i = 0; i < this.events_.length; i++) {\n            var eventData = this.events_[i];\n            if (eventData !== null) {\n                this.events_[i] = null;\n                var eventFn = eventData.getEventRunner();\n                if (util_1.logger) {\n                    util_1.log('event: ' + eventData.toString());\n                }\n                util_1.exceptionGuard(eventFn);\n            }\n        }\n    };\n    /**\n     * @return {!Path}\n     */\n    EventList.prototype.getPath = function () {\n        return this.path_;\n    };\n    return EventList;\n}());\nexports.EventList = EventList;\n\n//# sourceMappingURL=EventQueue.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"../util/util\");\nvar StatsListener_1 = require(\"./StatsListener\");\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nvar FIRST_STATS_MIN_TIME = 10 * 1000;\nvar FIRST_STATS_MAX_TIME = 30 * 1000;\n// We'll continue to report stats on average every 5 minutes.\nvar REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n/**\n * @constructor\n */\nvar StatsReporter = /** @class */ (function () {\n    /**\n     * @param collection\n     * @param server_\n     */\n    function StatsReporter(collection, server_) {\n        this.server_ = server_;\n        this.statsToReport_ = {};\n        this.statsListener_ = new StatsListener_1.StatsListener(collection);\n        var timeout = FIRST_STATS_MIN_TIME +\n            (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n        util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n    }\n    StatsReporter.prototype.includeStat = function (stat) {\n        this.statsToReport_[stat] = true;\n    };\n    StatsReporter.prototype.reportStats_ = function () {\n        var _this = this;\n        var stats = this.statsListener_.get();\n        var reportedStats = {};\n        var haveStatsToReport = false;\n        util_1.forEach(stats, function (stat, value) {\n            if (value > 0 && util_1.contains(_this.statsToReport_, stat)) {\n                reportedStats[stat] = value;\n                haveStatsToReport = true;\n            }\n        });\n        if (haveStatsToReport) {\n            this.server_.reportStats(reportedStats);\n        }\n        // queue our next run.\n        util_2.setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));\n    };\n    return StatsReporter;\n}());\nexports.StatsReporter = StatsReporter;\n\n//# sourceMappingURL=StatsReporter.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * Tracks a collection of stats.\n *\n * @constructor\n */\nvar StatsCollection = /** @class */ (function () {\n    function StatsCollection() {\n        this.counters_ = {};\n    }\n    StatsCollection.prototype.incrementCounter = function (name, amount) {\n        if (amount === void 0) { amount = 1; }\n        if (!util_2.contains(this.counters_, name))\n            this.counters_[name] = 0;\n        this.counters_[name] += amount;\n    };\n    StatsCollection.prototype.get = function () {\n        return util_1.deepCopy(this.counters_);\n    };\n    return StatsCollection;\n}());\nexports.StatsCollection = StatsCollection;\n\n//# sourceMappingURL=StatsCollection.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"./util/util\");\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nvar AuthTokenProvider = /** @class */ (function () {\n    /**\n     * @param {!FirebaseApp} app_\n     */\n    function AuthTokenProvider(app_) {\n        this.app_ = app_;\n    }\n    /**\n     * @param {boolean} forceRefresh\n     * @return {!Promise<FirebaseAuthTokenData>}\n     */\n    AuthTokenProvider.prototype.getToken = function (forceRefresh) {\n        return this.app_['INTERNAL']['getToken'](forceRefresh).then(null, \n        // .catch\n        function (error) {\n            // TODO: Need to figure out all the cases this is raised and whether\n            // this makes sense.\n            if (error && error.code === 'auth/token-not-initialized') {\n                util_1.log('Got auth/token-not-initialized error.  Treating as null token.');\n                return null;\n            }\n            else {\n                return Promise.reject(error);\n            }\n        });\n    };\n    AuthTokenProvider.prototype.addTokenChangeListener = function (listener) {\n        // TODO: We might want to wrap the listener and call it with no args to\n        // avoid a leaky abstraction, but that makes removing the listener harder.\n        this.app_['INTERNAL']['addAuthTokenListener'](listener);\n    };\n    AuthTokenProvider.prototype.removeTokenChangeListener = function (listener) {\n        this.app_['INTERNAL']['removeAuthTokenListener'](listener);\n    };\n    AuthTokenProvider.prototype.notifyForInvalidToken = function () {\n        var errorMessage = 'Provided authentication credentials for the app named \"' +\n            this.app_.name +\n            '\" are invalid. This usually indicates your app was not ' +\n            'initialized correctly. ';\n        if ('credential' in this.app_.options) {\n            errorMessage +=\n                'Make sure the \"credential\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else if ('serviceAccount' in this.app_.options) {\n            errorMessage +=\n                'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n                    'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n                    'project.';\n        }\n        else {\n            errorMessage +=\n                'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n                    'initializeApp() match the values provided for your app at ' +\n                    'https://console.firebase.google.com/.';\n        }\n        util_1.warn(errorMessage);\n    };\n    return AuthTokenProvider;\n}());\nexports.AuthTokenProvider = AuthTokenProvider;\n\n//# sourceMappingURL=AuthTokenProvider.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n *\n * @constructor\n */\nvar SnapshotHolder = /** @class */ (function () {\n    function SnapshotHolder() {\n        this.rootNode_ = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n    }\n    SnapshotHolder.prototype.getNode = function (path) {\n        return this.rootNode_.getChild(path);\n    };\n    SnapshotHolder.prototype.updateSnapshot = function (path, newSnapshotNode) {\n        this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n    };\n    return SnapshotHolder;\n}());\nexports.SnapshotHolder = SnapshotHolder;\n\n//# sourceMappingURL=SnapshotHolder.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ImmutableTree_1 = require(\"./util/ImmutableTree\");\nvar Path_1 = require(\"./util/Path\");\nvar util_1 = require(\"@firebase/util\");\nvar Node_1 = require(\"./snap/Node\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n *\n * @constructor\n * @param {!ImmutableTree.<!Node>} writeTree\n */\nvar CompoundWrite = /** @class */ (function () {\n    function CompoundWrite(writeTree_) {\n        this.writeTree_ = writeTree_;\n    }\n    /**\n     * @param {!Path} path\n     * @param {!Node} node\n     * @return {!CompoundWrite}\n     */\n    CompoundWrite.prototype.addWrite = function (path, node) {\n        if (path.isEmpty()) {\n            return new CompoundWrite(new ImmutableTree_1.ImmutableTree(node));\n        }\n        else {\n            var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n            if (rootmost != null) {\n                var rootMostPath = rootmost.path;\n                var value = rootmost.value;\n                var relativePath = Path_1.Path.relativePath(rootMostPath, path);\n                value = value.updateChild(relativePath, node);\n                return new CompoundWrite(this.writeTree_.set(rootMostPath, value));\n            }\n            else {\n                var subtree = new ImmutableTree_1.ImmutableTree(node);\n                var newWriteTree = this.writeTree_.setTree(path, subtree);\n                return new CompoundWrite(newWriteTree);\n            }\n        }\n    };\n    /**\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} updates\n     * @return {!CompoundWrite}\n     */\n    CompoundWrite.prototype.addWrites = function (path, updates) {\n        var newWrite = this;\n        util_1.forEach(updates, function (childKey, node) {\n            newWrite = newWrite.addWrite(path.child(childKey), node);\n        });\n        return newWrite;\n    };\n    /**\n     * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n     * location, which must be removed by calling this method with that path.\n     *\n     * @param {!Path} path The path at which a write and all deeper writes should be removed\n     * @return {!CompoundWrite} The new CompoundWrite with the removed path\n     */\n    CompoundWrite.prototype.removeWrite = function (path) {\n        if (path.isEmpty()) {\n            return CompoundWrite.Empty;\n        }\n        else {\n            var newWriteTree = this.writeTree_.setTree(path, ImmutableTree_1.ImmutableTree.Empty);\n            return new CompoundWrite(newWriteTree);\n        }\n    };\n    /**\n     * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n     * considered \"complete\".\n     *\n     * @param {!Path} path The path to check for\n     * @return {boolean} Whether there is a complete write at that path\n     */\n    CompoundWrite.prototype.hasCompleteWrite = function (path) {\n        return this.getCompleteNode(path) != null;\n    };\n    /**\n     * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n     * writes from deeper paths, but will return child nodes from a more shallow path.\n     *\n     * @param {!Path} path The path to get a complete write\n     * @return {?Node} The node if complete at that path, or null otherwise.\n     */\n    CompoundWrite.prototype.getCompleteNode = function (path) {\n        var rootmost = this.writeTree_.findRootMostValueAndPath(path);\n        if (rootmost != null) {\n            return this.writeTree_\n                .get(rootmost.path)\n                .getChild(Path_1.Path.relativePath(rootmost.path, path));\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Returns all children that are guaranteed to be a complete overwrite.\n     *\n     * @return {!Array.<NamedNode>} A list of all complete children.\n     */\n    CompoundWrite.prototype.getCompleteChildren = function () {\n        var children = [];\n        var node = this.writeTree_.value;\n        if (node != null) {\n            // If it's a leaf node, it has no children; so nothing to do.\n            if (!node.isLeafNode()) {\n                node.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n                    children.push(new Node_1.NamedNode(childName, childNode));\n                });\n            }\n        }\n        else {\n            this.writeTree_.children.inorderTraversal(function (childName, childTree) {\n                if (childTree.value != null) {\n                    children.push(new Node_1.NamedNode(childName, childTree.value));\n                }\n            });\n        }\n        return children;\n    };\n    /**\n     * @param {!Path} path\n     * @return {!CompoundWrite}\n     */\n    CompoundWrite.prototype.childCompoundWrite = function (path) {\n        if (path.isEmpty()) {\n            return this;\n        }\n        else {\n            var shadowingNode = this.getCompleteNode(path);\n            if (shadowingNode != null) {\n                return new CompoundWrite(new ImmutableTree_1.ImmutableTree(shadowingNode));\n            }\n            else {\n                return new CompoundWrite(this.writeTree_.subtree(path));\n            }\n        }\n    };\n    /**\n     * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n     * @return {boolean} Whether this CompoundWrite is empty\n     */\n    CompoundWrite.prototype.isEmpty = function () {\n        return this.writeTree_.isEmpty();\n    };\n    /**\n     * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n     * node\n     * @param {!Node} node The node to apply this CompoundWrite to\n     * @return {!Node} The node with all writes applied\n     */\n    CompoundWrite.prototype.apply = function (node) {\n        return CompoundWrite.applySubtreeWrite_(Path_1.Path.Empty, this.writeTree_, node);\n    };\n    /**\n     * @type {!CompoundWrite}\n     */\n    CompoundWrite.Empty = new CompoundWrite(new ImmutableTree_1.ImmutableTree(null));\n    /**\n     * @param {!Path} relativePath\n     * @param {!ImmutableTree.<!Node>} writeTree\n     * @param {!Node} node\n     * @return {!Node}\n     * @private\n     */\n    CompoundWrite.applySubtreeWrite_ = function (relativePath, writeTree, node) {\n        if (writeTree.value != null) {\n            // Since there a write is always a leaf, we're done here\n            return node.updateChild(relativePath, writeTree.value);\n        }\n        else {\n            var priorityWrite_1 = null;\n            writeTree.children.inorderTraversal(function (childKey, childTree) {\n                if (childKey === '.priority') {\n                    // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n                    // to apply priorities to empty nodes that are later filled\n                    util_2.assert(childTree.value !== null, 'Priority writes must always be leaf nodes');\n                    priorityWrite_1 = childTree.value;\n                }\n                else {\n                    node = CompoundWrite.applySubtreeWrite_(relativePath.child(childKey), childTree, node);\n                }\n            });\n            // If there was a priority write, we only apply it if the node is not empty\n            if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {\n                node = node.updateChild(relativePath.child('.priority'), priorityWrite_1);\n            }\n            return node;\n        }\n    };\n    return CompoundWrite;\n}());\nexports.CompoundWrite = CompoundWrite;\n\n//# sourceMappingURL=CompoundWrite.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar Path_1 = require(\"./util/Path\");\nvar CompoundWrite_1 = require(\"./CompoundWrite\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nvar WriteTree = /** @class */ (function () {\n    function WriteTree() {\n        /**\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\n         * applyLocally=false or writes that are completely shadowed by other writes.\n         *\n         * @type {!CompoundWrite}\n         * @private\n         */\n        this.visibleWrites_ = CompoundWrite_1.CompoundWrite.Empty;\n        /**\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n         * used by transactions).\n         *\n         * @type {!Array.<!WriteRecord>}\n         * @private\n         */\n        this.allWrites_ = [];\n        this.lastWriteId_ = -1;\n    }\n    /**\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n     *\n     * @param {!Path} path\n     * @return {!WriteTreeRef}\n     */\n    WriteTree.prototype.childWrites = function (path) {\n        return new WriteTreeRef(path, this);\n    };\n    /**\n     * Record a new overwrite from user code.\n     *\n     * @param {!Path} path\n     * @param {!Node} snap\n     * @param {!number} writeId\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n     */\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n        if (visible === undefined) {\n            visible = true;\n        }\n        this.allWrites_.push({\n            path: path,\n            snap: snap,\n            writeId: writeId,\n            visible: visible\n        });\n        if (visible) {\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n        }\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * Record a new merge from user code.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} writeId\n     */\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n        this.allWrites_.push({\n            path: path,\n            children: changedChildren,\n            writeId: writeId,\n            visible: true\n        });\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * @param {!number} writeId\n     * @return {?WriteRecord}\n     */\n    WriteTree.prototype.getWrite = function (writeId) {\n        for (var i = 0; i < this.allWrites_.length; i++) {\n            var record = this.allWrites_[i];\n            if (record.writeId === writeId) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n     *\n     * @param {!number} writeId\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n     * events as a result).\n     */\n    WriteTree.prototype.removeWrite = function (writeId) {\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n        // out of order.\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n        var _this = this;\n        var idx = this.allWrites_.findIndex(function (s) {\n            return s.writeId === writeId;\n        });\n        util_2.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n        var writeToRemove = this.allWrites_[idx];\n        this.allWrites_.splice(idx, 1);\n        var removedWriteWasVisible = writeToRemove.visible;\n        var removedWriteOverlapsWithOtherWrites = false;\n        var i = this.allWrites_.length - 1;\n        while (removedWriteWasVisible && i >= 0) {\n            var currentWrite = this.allWrites_[i];\n            if (currentWrite.visible) {\n                if (i >= idx &&\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n                    // The removed write was completely shadowed by a subsequent write.\n                    removedWriteWasVisible = false;\n                }\n                else if (writeToRemove.path.contains(currentWrite.path)) {\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\n                    removedWriteOverlapsWithOtherWrites = true;\n                }\n            }\n            i--;\n        }\n        if (!removedWriteWasVisible) {\n            return false;\n        }\n        else if (removedWriteOverlapsWithOtherWrites) {\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\n            this.resetTree_();\n            return true;\n        }\n        else {\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n            if (writeToRemove.snap) {\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n            }\n            else {\n                var children = writeToRemove.children;\n                util_1.forEach(children, function (childName) {\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n                });\n            }\n            return true;\n        }\n    };\n    /**\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n     * No server data is considered.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.getCompleteWriteData = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n     * writes), attempt to calculate a complete snapshot for the given path\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        if (!writeIdsToExclude && !includeHiddenWrites) {\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n            if (shadowingNode != null) {\n                return shadowingNode;\n            }\n            else {\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n                if (subMerge.isEmpty()) {\n                    return completeServerCache;\n                }\n                else if (completeServerCache == null &&\n                    !subMerge.hasCompleteWrite(Path_1.Path.Empty)) {\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                    return null;\n                }\n                else {\n                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    return subMerge.apply(layeredCache);\n                }\n            }\n        }\n        else {\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            if (!includeHiddenWrites && merge.isEmpty()) {\n                return completeServerCache;\n            }\n            else {\n                // If the server cache is null, and we don't have a complete cache, we need to return null\n                if (!includeHiddenWrites &&\n                    completeServerCache == null &&\n                    !merge.hasCompleteWrite(Path_1.Path.Empty)) {\n                    return null;\n                }\n                else {\n                    var filter = function (write) {\n                        return ((write.visible || includeHiddenWrites) &&\n                            (!writeIdsToExclude ||\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\n                    };\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    return mergeAtPath.apply(layeredCache);\n                }\n            }\n        }\n    };\n    /**\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n     * Used when creating new views, to pre-fill their complete event children snapshot.\n     *\n     * @param {!Path} treePath\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n        var completeChildren = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n        if (topLevelSet) {\n            if (!topLevelSet.isLeafNode()) {\n                // we're shadowing everything. Return the children.\n                topLevelSet.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childSnap) {\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n                });\n            }\n            return completeChildren;\n        }\n        else if (completeServerChildren) {\n            // Layer any children we have on top of this\n            // We know we don't have a top-level set, so just enumerate existing children\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n            completeServerChildren.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n                var node = merge_1\n                    .childCompoundWrite(new Path_1.Path(childName))\n                    .apply(childNode);\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\n            });\n            // Add any complete children we have from the set\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n        else {\n            // We don't have anything to layer on top of. Layer on any children we have\n            // Note that we can return an empty snap if we have a defined delete\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            merge.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n    };\n    /**\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\n     * applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events\n     *\n     * Either existingEventSnap or existingServerSnap must exist\n     *\n     * @param {!Path} treePath\n     * @param {!Path} childPath\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n        util_2.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n        var path = treePath.child(childPath);\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\n            // At this point we can probably guarantee that we're in case 2, meaning no events\n            // May need to check visibility while doing the findRootMostValueAndPath call\n            return null;\n        }\n        else {\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\n            if (childMerge.isEmpty()) {\n                // We're not shadowing at all. Case 1\n                return existingServerSnap.getChild(childPath);\n            }\n            else {\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n                // However this is tricky to find out, since user updates don't necessary change the server\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n                // only check if the updates change the serverNode.\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n                return childMerge.apply(existingServerSnap.getChild(childPath));\n            }\n        }\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!Path} treePath\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n        var path = treePath.child(childKey);\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            if (existingServerSnap.isCompleteForChild(childKey)) {\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.shadowingWrite = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window.\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n        var toIterate;\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\n        var shadowingNode = merge.getCompleteNode(Path_1.Path.Empty);\n        if (shadowingNode != null) {\n            toIterate = shadowingNode;\n        }\n        else if (completeServerData != null) {\n            toIterate = merge.apply(completeServerData);\n        }\n        else {\n            // no children to iterate on\n            return [];\n        }\n        toIterate = toIterate.withIndex(index);\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n            var nodes = [];\n            var cmp = index.getCompare();\n            var iter = reverse\n                ? toIterate.getReverseIteratorFrom(startPost, index)\n                : toIterate.getIteratorFrom(startPost, index);\n            var next = iter.getNext();\n            while (next && nodes.length < count) {\n                if (cmp(next, startPost) !== 0) {\n                    nodes.push(next);\n                }\n                next = iter.getNext();\n            }\n            return nodes;\n        }\n        else {\n            return [];\n        }\n    };\n    /**\n     * @param {!WriteRecord} writeRecord\n     * @param {!Path} path\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n        if (writeRecord.snap) {\n            return writeRecord.path.contains(path);\n        }\n        else {\n            // findKey can return undefined, so use !! to coerce to boolean\n            return !!util_1.findKey(writeRecord.children, function (childSnap, childName) {\n                return writeRecord.path.child(childName).contains(path);\n            });\n        }\n    };\n    /**\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n     * @private\n     */\n    WriteTree.prototype.resetTree_ = function () {\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path_1.Path.Empty);\n        if (this.allWrites_.length > 0) {\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n        }\n        else {\n            this.lastWriteId_ = -1;\n        }\n    };\n    /**\n     * The default filter used when constructing the tree. Keep everything that's visible.\n     *\n     * @param {!WriteRecord} write\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.DefaultFilter_ = function (write) {\n        return write.visible;\n    };\n    /**\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n     * event data at that path.\n     *\n     * @param {!Array.<!WriteRecord>} writes\n     * @param {!function(!WriteRecord):boolean} filter\n     * @param {!Path} treeRoot\n     * @return {!CompoundWrite}\n     * @private\n     */\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n        var compoundWrite = CompoundWrite_1.CompoundWrite.Empty;\n        for (var i = 0; i < writes.length; ++i) {\n            var write = writes[i];\n            // Theory, a later set will either:\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n            if (filter(write)) {\n                var writePath = write.path;\n                var relativePath = void 0;\n                if (write.snap) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);\n                        compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, write.snap.getChild(relativePath));\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else if (write.children) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);\n                        if (relativePath.isEmpty()) {\n                            compoundWrite = compoundWrite.addWrites(Path_1.Path.Empty, write.children);\n                        }\n                        else {\n                            var child = util_1.safeGet(write.children, relativePath.getFront());\n                            if (child) {\n                                // There exists a child in this node that matches the root path\n                                var deepNode = child.getChild(relativePath.popFront());\n                                compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, deepNode);\n                            }\n                        }\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else {\n                    throw util_2.assertionError('WriteRecord should have .snap or .children');\n                }\n            }\n        }\n        return compoundWrite;\n    };\n    return WriteTree;\n}());\nexports.WriteTree = WriteTree;\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nvar WriteTreeRef = /** @class */ (function () {\n    /**\n     * @param {!Path} path\n     * @param {!WriteTree} writeTree\n     */\n    function WriteTreeRef(path, writeTree) {\n        this.treePath_ = path;\n        this.writeTree_ = writeTree;\n    }\n    /**\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n     * can lead to a more expensive calculation.\n     *\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n    };\n    /**\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n     * mix of the given server data and write data.\n     *\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n    };\n    /**\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n     * if anything, needs to be applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events should be raised\n     *\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n     *\n     * @param {!Path} path\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window\n     *\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerCache\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n    };\n    /**\n     * Return a WriteTreeRef for a child.\n     *\n     * @param {string} childName\n     * @return {!WriteTreeRef}\n     */\n    WriteTreeRef.prototype.child = function (childName) {\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n    };\n    return WriteTreeRef;\n}());\nexports.WriteTreeRef = WriteTreeRef;\n\n//# sourceMappingURL=WriteTree.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Node_1 = require(\"../snap/Node\");\nvar Change_1 = require(\"./Change\");\nvar util_1 = require(\"@firebase/util\");\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n * @constructor\n */\nvar EventGenerator = /** @class */ (function () {\n    /**\n     *\n     * @param {!Query} query_\n     */\n    function EventGenerator(query_) {\n        this.query_ = query_;\n        /**\n         * @private\n         * @type {!Index}\n         */\n        this.index_ = this.query_.getQueryParams().getIndex();\n    }\n    /**\n     * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n     * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n     *\n     * Notes:\n     *  - child_moved events will be synthesized at this time for any child_changed events that affect\n     *    our index.\n     *  - prevName will be calculated based on the index ordering.\n     *\n     * @param {!Array.<!Change>} changes\n     * @param {!Node} eventCache\n     * @param {!Array.<!EventRegistration>} eventRegistrations\n     * @return {!Array.<!Event>}\n     */\n    EventGenerator.prototype.generateEventsForChanges = function (changes, eventCache, eventRegistrations) {\n        var _this = this;\n        var events = [];\n        var moves = [];\n        changes.forEach(function (change) {\n            if (change.type === Change_1.Change.CHILD_CHANGED &&\n                _this.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {\n                moves.push(Change_1.Change.childMovedChange(change.childName, change.snapshotNode));\n            }\n        });\n        this.generateEventsForType_(events, Change_1.Change.CHILD_REMOVED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change_1.Change.CHILD_ADDED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change_1.Change.CHILD_MOVED, moves, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change_1.Change.CHILD_CHANGED, changes, eventRegistrations, eventCache);\n        this.generateEventsForType_(events, Change_1.Change.VALUE, changes, eventRegistrations, eventCache);\n        return events;\n    };\n    /**\n     * Given changes of a single change type, generate the corresponding events.\n     *\n     * @param {!Array.<!Event>} events\n     * @param {!string} eventType\n     * @param {!Array.<!Change>} changes\n     * @param {!Array.<!EventRegistration>} registrations\n     * @param {!Node} eventCache\n     * @private\n     */\n    EventGenerator.prototype.generateEventsForType_ = function (events, eventType, changes, registrations, eventCache) {\n        var _this = this;\n        var filteredChanges = changes.filter(function (change) { return change.type === eventType; });\n        filteredChanges.sort(this.compareChanges_.bind(this));\n        filteredChanges.forEach(function (change) {\n            var materializedChange = _this.materializeSingleChange_(change, eventCache);\n            registrations.forEach(function (registration) {\n                if (registration.respondsTo(change.type)) {\n                    events.push(registration.createEvent(materializedChange, _this.query_));\n                }\n            });\n        });\n    };\n    /**\n     * @param {!Change} change\n     * @param {!Node} eventCache\n     * @return {!Change}\n     * @private\n     */\n    EventGenerator.prototype.materializeSingleChange_ = function (change, eventCache) {\n        if (change.type === 'value' || change.type === 'child_removed') {\n            return change;\n        }\n        else {\n            change.prevName = eventCache.getPredecessorChildName(\n            /** @type {!string} */\n            change.childName, change.snapshotNode, this.index_);\n            return change;\n        }\n    };\n    /**\n     * @param {!Change} a\n     * @param {!Change} b\n     * @return {number}\n     * @private\n     */\n    EventGenerator.prototype.compareChanges_ = function (a, b) {\n        if (a.childName == null || b.childName == null) {\n            throw util_1.assertionError('Should only compare child_ events.');\n        }\n        var aWrapped = new Node_1.NamedNode(a.childName, a.snapshotNode);\n        var bWrapped = new Node_1.NamedNode(b.childName, b.snapshotNode);\n        return this.index_.compare(aWrapped, bWrapped);\n    };\n    return EventGenerator;\n}());\nexports.EventGenerator = EventGenerator;\n\n//# sourceMappingURL=EventGenerator.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CacheNode_1 = require(\"./CacheNode\");\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n *\n * @private\n * @constructor\n * @implements CompleteChildSource\n */\nvar NoCompleteChildSource_ = /** @class */ (function () {\n    function NoCompleteChildSource_() {\n    }\n    /**\n     * @inheritDoc\n     */\n    NoCompleteChildSource_.prototype.getCompleteChild = function (childKey) {\n        return null;\n    };\n    /**\n     * @inheritDoc\n     */\n    NoCompleteChildSource_.prototype.getChildAfterChild = function (index, child, reverse) {\n        return null;\n    };\n    return NoCompleteChildSource_;\n}());\nexports.NoCompleteChildSource_ = NoCompleteChildSource_;\n/**\n * Singleton instance.\n * @const\n * @type {!CompleteChildSource}\n */\nexports.NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n *\n *\n * @implements CompleteChildSource\n */\nvar WriteTreeCompleteChildSource = /** @class */ (function () {\n    /**\n     * @param {!WriteTreeRef} writes_\n     * @param {!ViewCache} viewCache_\n     * @param {?Node} optCompleteServerCache_\n     */\n    function WriteTreeCompleteChildSource(writes_, viewCache_, optCompleteServerCache_) {\n        if (optCompleteServerCache_ === void 0) { optCompleteServerCache_ = null; }\n        this.writes_ = writes_;\n        this.viewCache_ = viewCache_;\n        this.optCompleteServerCache_ = optCompleteServerCache_;\n    }\n    /**\n     * @inheritDoc\n     */\n    WriteTreeCompleteChildSource.prototype.getCompleteChild = function (childKey) {\n        var node = this.viewCache_.getEventCache();\n        if (node.isCompleteForChild(childKey)) {\n            return node.getNode().getImmediateChild(childKey);\n        }\n        else {\n            var serverNode = this.optCompleteServerCache_ != null\n                ? new CacheNode_1.CacheNode(this.optCompleteServerCache_, true, false)\n                : this.viewCache_.getServerCache();\n            return this.writes_.calcCompleteChild(childKey, serverNode);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    WriteTreeCompleteChildSource.prototype.getChildAfterChild = function (index, child, reverse) {\n        var completeServerData = this.optCompleteServerCache_ != null\n            ? this.optCompleteServerCache_\n            : this.viewCache_.getCompleteServerSnap();\n        var nodes = this.writes_.calcIndexedSlice(completeServerData, child, 1, reverse, index);\n        if (nodes.length === 0) {\n            return null;\n        }\n        else {\n            return nodes[0];\n        }\n    };\n    return WriteTreeCompleteChildSource;\n}());\nexports.WriteTreeCompleteChildSource = WriteTreeCompleteChildSource;\n\n//# sourceMappingURL=CompleteChildSource.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Change_1 = require(\"./Change\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * @constructor\n */\nvar ChildChangeAccumulator = /** @class */ (function () {\n    function ChildChangeAccumulator() {\n        this.changeMap_ = {};\n    }\n    /**\n     * @param {!Change} change\n     */\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\n        var type = change.type;\n        var childKey /** @type {!string} */ = change.childName;\n        util_2.assert(type == Change_1.Change.CHILD_ADDED ||\n            type == Change_1.Change.CHILD_CHANGED ||\n            type == Change_1.Change.CHILD_REMOVED, 'Only child changes supported for tracking');\n        util_2.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\n        var oldChange = util_1.safeGet(this.changeMap_, childKey);\n        if (oldChange) {\n            var oldType = oldChange.type;\n            if (type == Change_1.Change.CHILD_ADDED && oldType == Change_1.Change.CHILD_REMOVED) {\n                this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\n            }\n            else if (type == Change_1.Change.CHILD_REMOVED &&\n                oldType == Change_1.Change.CHILD_ADDED) {\n                delete this.changeMap_[childKey];\n            }\n            else if (type == Change_1.Change.CHILD_REMOVED &&\n                oldType == Change_1.Change.CHILD_CHANGED) {\n                this.changeMap_[childKey] = Change_1.Change.childRemovedChange(childKey, oldChange.oldSnap);\n            }\n            else if (type == Change_1.Change.CHILD_CHANGED &&\n                oldType == Change_1.Change.CHILD_ADDED) {\n                this.changeMap_[childKey] = Change_1.Change.childAddedChange(childKey, change.snapshotNode);\n            }\n            else if (type == Change_1.Change.CHILD_CHANGED &&\n                oldType == Change_1.Change.CHILD_CHANGED) {\n                this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\n            }\n            else {\n                throw util_2.assertionError('Illegal combination of changes: ' +\n                    change +\n                    ' occurred after ' +\n                    oldChange);\n            }\n        }\n        else {\n            this.changeMap_[childKey] = change;\n        }\n    };\n    /**\n     * @return {!Array.<!Change>}\n     */\n    ChildChangeAccumulator.prototype.getChanges = function () {\n        return util_1.getValues(this.changeMap_);\n    };\n    return ChildChangeAccumulator;\n}());\nexports.ChildChangeAccumulator = ChildChangeAccumulator;\n\n//# sourceMappingURL=ChildChangeAccumulator.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Operation_1 = require(\"../operation/Operation\");\nvar util_1 = require(\"@firebase/util\");\nvar ChildChangeAccumulator_1 = require(\"./ChildChangeAccumulator\");\nvar Change_1 = require(\"./Change\");\nvar ChildrenNode_1 = require(\"../snap/ChildrenNode\");\nvar KeyIndex_1 = require(\"../snap/indexes/KeyIndex\");\nvar ImmutableTree_1 = require(\"../util/ImmutableTree\");\nvar Path_1 = require(\"../util/Path\");\nvar CompleteChildSource_1 = require(\"./CompleteChildSource\");\n/**\n * @constructor\n * @struct\n */\nvar ProcessorResult = /** @class */ (function () {\n    /**\n     * @param {!ViewCache} viewCache\n     * @param {!Array.<!Change>} changes\n     */\n    function ProcessorResult(viewCache, changes) {\n        this.viewCache = viewCache;\n        this.changes = changes;\n    }\n    return ProcessorResult;\n}());\nexports.ProcessorResult = ProcessorResult;\n/**\n * @constructor\n */\nvar ViewProcessor = /** @class */ (function () {\n    /**\n     * @param {!NodeFilter} filter_\n     */\n    function ViewProcessor(filter_) {\n        this.filter_ = filter_;\n    }\n    /**\n     * @param {!ViewCache} viewCache\n     */\n    ViewProcessor.prototype.assertIndexed = function (viewCache) {\n        util_1.assert(viewCache\n            .getEventCache()\n            .getNode()\n            .isIndexed(this.filter_.getIndex()), 'Event snap not indexed');\n        util_1.assert(viewCache\n            .getServerCache()\n            .getNode()\n            .isIndexed(this.filter_.getIndex()), 'Server snap not indexed');\n    };\n    /**\n     * @param {!ViewCache} oldViewCache\n     * @param {!Operation} operation\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} completeCache\n     * @return {!ProcessorResult}\n     */\n    ViewProcessor.prototype.applyOperation = function (oldViewCache, operation, writesCache, completeCache) {\n        var accumulator = new ChildChangeAccumulator_1.ChildChangeAccumulator();\n        var newViewCache, filterServerNode;\n        if (operation.type === Operation_1.OperationType.OVERWRITE) {\n            var overwrite = operation;\n            if (overwrite.source.fromUser) {\n                newViewCache = this.applyUserOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);\n            }\n            else {\n                util_1.assert(overwrite.source.fromServer, 'Unknown source.');\n                // We filter the node if it's a tagged update or the node has been previously filtered  and the\n                // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n                // again\n                filterServerNode =\n                    overwrite.source.tagged ||\n                        (oldViewCache.getServerCache().isFiltered() &&\n                            !overwrite.path.isEmpty());\n                newViewCache = this.applyServerOverwrite_(oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);\n            }\n        }\n        else if (operation.type === Operation_1.OperationType.MERGE) {\n            var merge = operation;\n            if (merge.source.fromUser) {\n                newViewCache = this.applyUserMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);\n            }\n            else {\n                util_1.assert(merge.source.fromServer, 'Unknown source.');\n                // We filter the node if it's a tagged update or the node has been previously filtered\n                filterServerNode =\n                    merge.source.tagged || oldViewCache.getServerCache().isFiltered();\n                newViewCache = this.applyServerMerge_(oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);\n            }\n        }\n        else if (operation.type === Operation_1.OperationType.ACK_USER_WRITE) {\n            var ackUserWrite = operation;\n            if (!ackUserWrite.revert) {\n                newViewCache = this.ackUserWrite_(oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);\n            }\n            else {\n                newViewCache = this.revertUserWrite_(oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);\n            }\n        }\n        else if (operation.type === Operation_1.OperationType.LISTEN_COMPLETE) {\n            newViewCache = this.listenComplete_(oldViewCache, operation.path, writesCache, accumulator);\n        }\n        else {\n            throw util_1.assertionError('Unknown operation type: ' + operation.type);\n        }\n        var changes = accumulator.getChanges();\n        ViewProcessor.maybeAddValueEvent_(oldViewCache, newViewCache, changes);\n        return new ProcessorResult(newViewCache, changes);\n    };\n    /**\n     * @param {!ViewCache} oldViewCache\n     * @param {!ViewCache} newViewCache\n     * @param {!Array.<!Change>} accumulator\n     * @private\n     */\n    ViewProcessor.maybeAddValueEvent_ = function (oldViewCache, newViewCache, accumulator) {\n        var eventSnap = newViewCache.getEventCache();\n        if (eventSnap.isFullyInitialized()) {\n            var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n            var oldCompleteSnap = oldViewCache.getCompleteEventSnap();\n            if (accumulator.length > 0 ||\n                !oldViewCache.getEventCache().isFullyInitialized() ||\n                (isLeafOrEmpty &&\n                    !eventSnap\n                        .getNode()\n                        .equals(/** @type {!Node} */ (oldCompleteSnap))) ||\n                !eventSnap\n                    .getNode()\n                    .getPriority()\n                    .equals(oldCompleteSnap.getPriority())) {\n                accumulator.push(Change_1.Change.valueChange(\n                /** @type {!Node} */ newViewCache.getCompleteEventSnap()));\n            }\n        }\n    };\n    /**\n     * @param {!ViewCache} viewCache\n     * @param {!Path} changePath\n     * @param {!WriteTreeRef} writesCache\n     * @param {!CompleteChildSource} source\n     * @param {!ChildChangeAccumulator} accumulator\n     * @return {!ViewCache}\n     * @private\n     */\n    ViewProcessor.prototype.generateEventCacheAfterServerEvent_ = function (viewCache, changePath, writesCache, source, accumulator) {\n        var oldEventSnap = viewCache.getEventCache();\n        if (writesCache.shadowingWrite(changePath) != null) {\n            // we have a shadowing write, ignore changes\n            return viewCache;\n        }\n        else {\n            var newEventCache = void 0, serverNode = void 0;\n            if (changePath.isEmpty()) {\n                // TODO: figure out how this plays with \"sliding ack windows\"\n                util_1.assert(viewCache.getServerCache().isFullyInitialized(), 'If change path is empty, we must have complete server data');\n                if (viewCache.getServerCache().isFiltered()) {\n                    // We need to special case this, because we need to only apply writes to complete children, or\n                    // we might end up raising events for incomplete children. If the server data is filtered deep\n                    // writes cannot be guaranteed to be complete\n                    var serverCache = viewCache.getCompleteServerSnap();\n                    var completeChildren = serverCache instanceof ChildrenNode_1.ChildrenNode\n                        ? serverCache\n                        : ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    var completeEventChildren = writesCache.calcCompleteEventChildren(completeChildren);\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeEventChildren, accumulator);\n                }\n                else {\n                    var completeNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n                    newEventCache = this.filter_.updateFullNode(viewCache.getEventCache().getNode(), completeNode, accumulator);\n                }\n            }\n            else {\n                var childKey = changePath.getFront();\n                if (childKey == '.priority') {\n                    util_1.assert(changePath.getLength() == 1, \"Can't have a priority with additional path components\");\n                    var oldEventNode = oldEventSnap.getNode();\n                    serverNode = viewCache.getServerCache().getNode();\n                    // we might have overwrites for this priority\n                    var updatedPriority = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventNode, serverNode);\n                    if (updatedPriority != null) {\n                        newEventCache = this.filter_.updatePriority(oldEventNode, updatedPriority);\n                    }\n                    else {\n                        // priority didn't change, keep old node\n                        newEventCache = oldEventSnap.getNode();\n                    }\n                }\n                else {\n                    var childChangePath = changePath.popFront();\n                    // update child\n                    var newEventChild = void 0;\n                    if (oldEventSnap.isCompleteForChild(childKey)) {\n                        serverNode = viewCache.getServerCache().getNode();\n                        var eventChildUpdate = writesCache.calcEventCacheAfterServerOverwrite(changePath, oldEventSnap.getNode(), serverNode);\n                        if (eventChildUpdate != null) {\n                            newEventChild = oldEventSnap\n                                .getNode()\n                                .getImmediateChild(childKey)\n                                .updateChild(childChangePath, eventChildUpdate);\n                        }\n                        else {\n                            // Nothing changed, just keep the old child\n                            newEventChild = oldEventSnap\n                                .getNode()\n                                .getImmediateChild(childKey);\n                        }\n                    }\n                    else {\n                        newEventChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n                    }\n                    if (newEventChild != null) {\n                        newEventCache = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);\n                    }\n                    else {\n                        // no complete child available or no change\n                        newEventCache = oldEventSnap.getNode();\n                    }\n                }\n            }\n            return viewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized() || changePath.isEmpty(), this.filter_.filtersNodes());\n        }\n    };\n    /**\n     * @param {!ViewCache} oldViewCache\n     * @param {!Path} changePath\n     * @param {!Node} changedSnap\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} completeCache\n     * @param {boolean} filterServerNode\n     * @param {!ChildChangeAccumulator} accumulator\n     * @return {!ViewCache}\n     * @private\n     */\n    ViewProcessor.prototype.applyServerOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {\n        var oldServerSnap = oldViewCache.getServerCache();\n        var newServerCache;\n        var serverFilter = filterServerNode\n            ? this.filter_\n            : this.filter_.getIndexedFilter();\n        if (changePath.isEmpty()) {\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);\n        }\n        else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n            // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n            var newServerNode = oldServerSnap\n                .getNode()\n                .updateChild(changePath, changedSnap);\n            newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);\n        }\n        else {\n            var childKey = changePath.getFront();\n            if (!oldServerSnap.isCompleteForPath(changePath) &&\n                changePath.getLength() > 1) {\n                // We don't update incomplete nodes with updates intended for other listeners\n                return oldViewCache;\n            }\n            var childChangePath = changePath.popFront();\n            var childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n            var newChildNode = childNode.updateChild(childChangePath, changedSnap);\n            if (childKey == '.priority') {\n                newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);\n            }\n            else {\n                newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, null);\n            }\n        }\n        var newViewCache = oldViewCache.updateServerSnap(newServerCache, oldServerSnap.isFullyInitialized() || changePath.isEmpty(), serverFilter.filtersNodes());\n        var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, newViewCache, completeCache);\n        return this.generateEventCacheAfterServerEvent_(newViewCache, changePath, writesCache, source, accumulator);\n    };\n    /**\n     * @param {!ViewCache} oldViewCache\n     * @param {!Path} changePath\n     * @param {!Node} changedSnap\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} completeCache\n     * @param {!ChildChangeAccumulator} accumulator\n     * @return {!ViewCache}\n     * @private\n     */\n    ViewProcessor.prototype.applyUserOverwrite_ = function (oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {\n        var oldEventSnap = oldViewCache.getEventCache();\n        var newViewCache, newEventCache;\n        var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);\n        if (changePath.isEmpty()) {\n            newEventCache = this.filter_.updateFullNode(oldViewCache.getEventCache().getNode(), changedSnap, accumulator);\n            newViewCache = oldViewCache.updateEventSnap(newEventCache, true, this.filter_.filtersNodes());\n        }\n        else {\n            var childKey = changePath.getFront();\n            if (childKey === '.priority') {\n                newEventCache = this.filter_.updatePriority(oldViewCache.getEventCache().getNode(), changedSnap);\n                newViewCache = oldViewCache.updateEventSnap(newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());\n            }\n            else {\n                var childChangePath = changePath.popFront();\n                var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n                var newChild = void 0;\n                if (childChangePath.isEmpty()) {\n                    // Child overwrite, we can replace the child\n                    newChild = changedSnap;\n                }\n                else {\n                    var childNode = source.getCompleteChild(childKey);\n                    if (childNode != null) {\n                        if (childChangePath.getBack() === '.priority' &&\n                            childNode.getChild(childChangePath.parent()).isEmpty()) {\n                            // This is a priority update on an empty node. If this node exists on the server, the\n                            // server will send down the priority in the update, so ignore for now\n                            newChild = childNode;\n                        }\n                        else {\n                            newChild = childNode.updateChild(childChangePath, changedSnap);\n                        }\n                    }\n                    else {\n                        // There is no complete child node available\n                        newChild = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    }\n                }\n                if (!oldChild.equals(newChild)) {\n                    var newEventSnap = this.filter_.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);\n                    newViewCache = oldViewCache.updateEventSnap(newEventSnap, oldEventSnap.isFullyInitialized(), this.filter_.filtersNodes());\n                }\n                else {\n                    newViewCache = oldViewCache;\n                }\n            }\n        }\n        return newViewCache;\n    };\n    /**\n     * @param {!ViewCache} viewCache\n     * @param {string} childKey\n     * @return {boolean}\n     * @private\n     */\n    ViewProcessor.cacheHasChild_ = function (viewCache, childKey) {\n        return viewCache.getEventCache().isCompleteForChild(childKey);\n    };\n    /**\n     * @param {!ViewCache} viewCache\n     * @param {!Path} path\n     * @param {ImmutableTree.<!Node>} changedChildren\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} serverCache\n     * @param {!ChildChangeAccumulator} accumulator\n     * @return {!ViewCache}\n     * @private\n     */\n    ViewProcessor.prototype.applyUserMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, accumulator) {\n        var _this = this;\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\n        // window leaving room for new items.  It's important we process these changes first, so we\n        // iterate the changes twice, first processing any that affect items currently in view.\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n        // not the other.\n        var curViewCache = viewCache;\n        changedChildren.foreach(function (relativePath, childNode) {\n            var writePath = path.child(relativePath);\n            if (ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n            }\n        });\n        changedChildren.foreach(function (relativePath, childNode) {\n            var writePath = path.child(relativePath);\n            if (!ViewProcessor.cacheHasChild_(viewCache, writePath.getFront())) {\n                curViewCache = _this.applyUserOverwrite_(curViewCache, writePath, childNode, writesCache, serverCache, accumulator);\n            }\n        });\n        return curViewCache;\n    };\n    /**\n     * @param {!Node} node\n     * @param {ImmutableTree.<!Node>} merge\n     * @return {!Node}\n     * @private\n     */\n    ViewProcessor.prototype.applyMerge_ = function (node, merge) {\n        merge.foreach(function (relativePath, childNode) {\n            node = node.updateChild(relativePath, childNode);\n        });\n        return node;\n    };\n    /**\n     * @param {!ViewCache} viewCache\n     * @param {!Path} path\n     * @param {!ImmutableTree.<!Node>} changedChildren\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} serverCache\n     * @param {boolean} filterServerNode\n     * @param {!ChildChangeAccumulator} accumulator\n     * @return {!ViewCache}\n     * @private\n     */\n    ViewProcessor.prototype.applyServerMerge_ = function (viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {\n        var _this = this;\n        // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n        // wait for the complete data update coming soon.\n        if (viewCache\n            .getServerCache()\n            .getNode()\n            .isEmpty() &&\n            !viewCache.getServerCache().isFullyInitialized()) {\n            return viewCache;\n        }\n        // HACK: In the case of a limit query, there may be some changes that bump things out of the\n        // window leaving room for new items.  It's important we process these changes first, so we\n        // iterate the changes twice, first processing any that affect items currently in view.\n        // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n        // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n        // not the other.\n        var curViewCache = viewCache;\n        var viewMergeTree;\n        if (path.isEmpty()) {\n            viewMergeTree = changedChildren;\n        }\n        else {\n            viewMergeTree = ImmutableTree_1.ImmutableTree.Empty.setTree(path, changedChildren);\n        }\n        var serverNode = viewCache.getServerCache().getNode();\n        viewMergeTree.children.inorderTraversal(function (childKey, childTree) {\n            if (serverNode.hasChild(childKey)) {\n                var serverChild = viewCache\n                    .getServerCache()\n                    .getNode()\n                    .getImmediateChild(childKey);\n                var newChild = _this.applyMerge_(serverChild, childTree);\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n            }\n        });\n        viewMergeTree.children.inorderTraversal(function (childKey, childMergeTree) {\n            var isUnknownDeepMerge = !viewCache.getServerCache().isCompleteForChild(childKey) &&\n                childMergeTree.value == null;\n            if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n                var serverChild = viewCache\n                    .getServerCache()\n                    .getNode()\n                    .getImmediateChild(childKey);\n                var newChild = _this.applyMerge_(serverChild, childMergeTree);\n                curViewCache = _this.applyServerOverwrite_(curViewCache, new Path_1.Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);\n            }\n        });\n        return curViewCache;\n    };\n    /**\n     * @param {!ViewCache} viewCache\n     * @param {!Path} ackPath\n     * @param {!ImmutableTree<!boolean>} affectedTree\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} completeCache\n     * @param {!ChildChangeAccumulator} accumulator\n     * @return {!ViewCache}\n     * @private\n     */\n    ViewProcessor.prototype.ackUserWrite_ = function (viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {\n        if (writesCache.shadowingWrite(ackPath) != null) {\n            return viewCache;\n        }\n        // Only filter server node if it is currently filtered\n        var filterServerNode = viewCache.getServerCache().isFiltered();\n        // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n        // now that it won't be shadowed.\n        var serverCache = viewCache.getServerCache();\n        if (affectedTree.value != null) {\n            // This is an overwrite.\n            if ((ackPath.isEmpty() && serverCache.isFullyInitialized()) ||\n                serverCache.isCompleteForPath(ackPath)) {\n                return this.applyServerOverwrite_(viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);\n            }\n            else if (ackPath.isEmpty()) {\n                // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n                // should just re-apply whatever we have in our cache as a merge.\n                var changedChildren_1 = ImmutableTree_1.ImmutableTree.Empty;\n                serverCache.getNode().forEachChild(KeyIndex_1.KEY_INDEX, function (name, node) {\n                    changedChildren_1 = changedChildren_1.set(new Path_1.Path(name), node);\n                });\n                return this.applyServerMerge_(viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);\n            }\n            else {\n                return viewCache;\n            }\n        }\n        else {\n            // This is a merge.\n            var changedChildren_2 = ImmutableTree_1.ImmutableTree.Empty;\n            affectedTree.foreach(function (mergePath, value) {\n                var serverCachePath = ackPath.child(mergePath);\n                if (serverCache.isCompleteForPath(serverCachePath)) {\n                    changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));\n                }\n            });\n            return this.applyServerMerge_(viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);\n        }\n    };\n    /**\n     * @param {!ViewCache} viewCache\n     * @param {!Path} path\n     * @param {!WriteTreeRef} writesCache\n     * @param {!ChildChangeAccumulator} accumulator\n     * @return {!ViewCache}\n     * @private\n     */\n    ViewProcessor.prototype.listenComplete_ = function (viewCache, path, writesCache, accumulator) {\n        var oldServerNode = viewCache.getServerCache();\n        var newViewCache = viewCache.updateServerSnap(oldServerNode.getNode(), oldServerNode.isFullyInitialized() || path.isEmpty(), oldServerNode.isFiltered());\n        return this.generateEventCacheAfterServerEvent_(newViewCache, path, writesCache, CompleteChildSource_1.NO_COMPLETE_CHILD_SOURCE, accumulator);\n    };\n    /**\n     * @param {!ViewCache} viewCache\n     * @param {!Path} path\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} completeServerCache\n     * @param {!ChildChangeAccumulator} accumulator\n     * @return {!ViewCache}\n     * @private\n     */\n    ViewProcessor.prototype.revertUserWrite_ = function (viewCache, path, writesCache, completeServerCache, accumulator) {\n        var complete;\n        if (writesCache.shadowingWrite(path) != null) {\n            return viewCache;\n        }\n        else {\n            var source = new CompleteChildSource_1.WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);\n            var oldEventCache = viewCache.getEventCache().getNode();\n            var newEventCache = void 0;\n            if (path.isEmpty() || path.getFront() === '.priority') {\n                var newNode = void 0;\n                if (viewCache.getServerCache().isFullyInitialized()) {\n                    newNode = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n                }\n                else {\n                    var serverChildren = viewCache.getServerCache().getNode();\n                    util_1.assert(serverChildren instanceof ChildrenNode_1.ChildrenNode, 'serverChildren would be complete if leaf node');\n                    newNode = writesCache.calcCompleteEventChildren(serverChildren);\n                }\n                newNode = newNode;\n                newEventCache = this.filter_.updateFullNode(oldEventCache, newNode, accumulator);\n            }\n            else {\n                var childKey = path.getFront();\n                var newChild = writesCache.calcCompleteChild(childKey, viewCache.getServerCache());\n                if (newChild == null &&\n                    viewCache.getServerCache().isCompleteForChild(childKey)) {\n                    newChild = oldEventCache.getImmediateChild(childKey);\n                }\n                if (newChild != null) {\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, newChild, path.popFront(), source, accumulator);\n                }\n                else if (viewCache\n                    .getEventCache()\n                    .getNode()\n                    .hasChild(childKey)) {\n                    // No complete child available, delete the existing one, if any\n                    newEventCache = this.filter_.updateChild(oldEventCache, childKey, ChildrenNode_1.ChildrenNode.EMPTY_NODE, path.popFront(), source, accumulator);\n                }\n                else {\n                    newEventCache = oldEventCache;\n                }\n                if (newEventCache.isEmpty() &&\n                    viewCache.getServerCache().isFullyInitialized()) {\n                    // We might have reverted all child writes. Maybe the old event was a leaf node\n                    complete = writesCache.calcCompleteEventCache(viewCache.getCompleteServerSnap());\n                    if (complete.isLeafNode()) {\n                        newEventCache = this.filter_.updateFullNode(newEventCache, complete, accumulator);\n                    }\n                }\n            }\n            complete =\n                viewCache.getServerCache().isFullyInitialized() ||\n                    writesCache.shadowingWrite(Path_1.Path.Empty) != null;\n            return viewCache.updateEventSnap(newEventCache, complete, this.filter_.filtersNodes());\n        }\n    };\n    return ViewProcessor;\n}());\nexports.ViewProcessor = ViewProcessor;\n\n//# sourceMappingURL=ViewProcessor.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar IndexedFilter_1 = require(\"./filter/IndexedFilter\");\nvar ViewProcessor_1 = require(\"./ViewProcessor\");\nvar ChildrenNode_1 = require(\"../snap/ChildrenNode\");\nvar CacheNode_1 = require(\"./CacheNode\");\nvar ViewCache_1 = require(\"./ViewCache\");\nvar EventGenerator_1 = require(\"./EventGenerator\");\nvar util_1 = require(\"@firebase/util\");\nvar Operation_1 = require(\"../operation/Operation\");\nvar Change_1 = require(\"./Change\");\nvar PriorityIndex_1 = require(\"../snap/indexes/PriorityIndex\");\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n * @constructor\n */\nvar View = /** @class */ (function () {\n    /**\n     *\n     * @param {!Query} query_\n     * @param {!ViewCache} initialViewCache\n     */\n    function View(query_, initialViewCache) {\n        this.query_ = query_;\n        this.eventRegistrations_ = [];\n        var params = this.query_.getQueryParams();\n        var indexFilter = new IndexedFilter_1.IndexedFilter(params.getIndex());\n        var filter = params.getNodeFilter();\n        /**\n         * @type {ViewProcessor}\n         * @private\n         */\n        this.processor_ = new ViewProcessor_1.ViewProcessor(filter);\n        var initialServerCache = initialViewCache.getServerCache();\n        var initialEventCache = initialViewCache.getEventCache();\n        // Don't filter server node with other filter than index, wait for tagged listen\n        var serverSnap = indexFilter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);\n        var eventSnap = filter.updateFullNode(ChildrenNode_1.ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);\n        var newServerCache = new CacheNode_1.CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());\n        var newEventCache = new CacheNode_1.CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());\n        /**\n         * @type {!ViewCache}\n         * @private\n         */\n        this.viewCache_ = new ViewCache_1.ViewCache(newEventCache, newServerCache);\n        /**\n         * @type {!EventGenerator}\n         * @private\n         */\n        this.eventGenerator_ = new EventGenerator_1.EventGenerator(this.query_);\n    }\n    /**\n     * @return {!Query}\n     */\n    View.prototype.getQuery = function () {\n        return this.query_;\n    };\n    /**\n     * @return {?Node}\n     */\n    View.prototype.getServerCache = function () {\n        return this.viewCache_.getServerCache().getNode();\n    };\n    /**\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    View.prototype.getCompleteServerCache = function (path) {\n        var cache = this.viewCache_.getCompleteServerSnap();\n        if (cache) {\n            // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n            // we need to see if it contains the child we're interested in.\n            if (this.query_.getQueryParams().loadsAllData() ||\n                (!path.isEmpty() && !cache.getImmediateChild(path.getFront()).isEmpty())) {\n                return cache.getChild(path);\n            }\n        }\n        return null;\n    };\n    /**\n     * @return {boolean}\n     */\n    View.prototype.isEmpty = function () {\n        return this.eventRegistrations_.length === 0;\n    };\n    /**\n     * @param {!EventRegistration} eventRegistration\n     */\n    View.prototype.addEventRegistration = function (eventRegistration) {\n        this.eventRegistrations_.push(eventRegistration);\n    };\n    /**\n     * @param {?EventRegistration} eventRegistration If null, remove all callbacks.\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n     */\n    View.prototype.removeEventRegistration = function (eventRegistration, cancelError) {\n        var cancelEvents = [];\n        if (cancelError) {\n            util_1.assert(eventRegistration == null, 'A cancel should cancel all event registrations.');\n            var path_1 = this.query_.path;\n            this.eventRegistrations_.forEach(function (registration) {\n                cancelError /** @type {!Error} */ = cancelError;\n                var maybeEvent = registration.createCancelEvent(cancelError, path_1);\n                if (maybeEvent) {\n                    cancelEvents.push(maybeEvent);\n                }\n            });\n        }\n        if (eventRegistration) {\n            var remaining = [];\n            for (var i = 0; i < this.eventRegistrations_.length; ++i) {\n                var existing = this.eventRegistrations_[i];\n                if (!existing.matches(eventRegistration)) {\n                    remaining.push(existing);\n                }\n                else if (eventRegistration.hasAnyCallback()) {\n                    // We're removing just this one\n                    remaining = remaining.concat(this.eventRegistrations_.slice(i + 1));\n                    break;\n                }\n            }\n            this.eventRegistrations_ = remaining;\n        }\n        else {\n            this.eventRegistrations_ = [];\n        }\n        return cancelEvents;\n    };\n    /**\n     * Applies the given Operation, updates our cache, and returns the appropriate events.\n     *\n     * @param {!Operation} operation\n     * @param {!WriteTreeRef} writesCache\n     * @param {?Node} completeServerCache\n     * @return {!Array.<!Event>}\n     */\n    View.prototype.applyOperation = function (operation, writesCache, completeServerCache) {\n        if (operation.type === Operation_1.OperationType.MERGE &&\n            operation.source.queryId !== null) {\n            util_1.assert(this.viewCache_.getCompleteServerSnap(), 'We should always have a full cache before handling merges');\n            util_1.assert(this.viewCache_.getCompleteEventSnap(), 'Missing event cache, even though we have a server cache');\n        }\n        var oldViewCache = this.viewCache_;\n        var result = this.processor_.applyOperation(oldViewCache, operation, writesCache, completeServerCache);\n        this.processor_.assertIndexed(result.viewCache);\n        util_1.assert(result.viewCache.getServerCache().isFullyInitialized() ||\n            !oldViewCache.getServerCache().isFullyInitialized(), 'Once a server snap is complete, it should never go back');\n        this.viewCache_ = result.viewCache;\n        return this.generateEventsForChanges_(result.changes, result.viewCache.getEventCache().getNode(), null);\n    };\n    /**\n     * @param {!EventRegistration} registration\n     * @return {!Array.<!Event>}\n     */\n    View.prototype.getInitialEvents = function (registration) {\n        var eventSnap = this.viewCache_.getEventCache();\n        var initialChanges = [];\n        if (!eventSnap.getNode().isLeafNode()) {\n            var eventNode = eventSnap.getNode();\n            eventNode.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (key, childNode) {\n                initialChanges.push(Change_1.Change.childAddedChange(key, childNode));\n            });\n        }\n        if (eventSnap.isFullyInitialized()) {\n            initialChanges.push(Change_1.Change.valueChange(eventSnap.getNode()));\n        }\n        return this.generateEventsForChanges_(initialChanges, eventSnap.getNode(), registration);\n    };\n    /**\n     * @private\n     * @param {!Array.<!Change>} changes\n     * @param {!Node} eventCache\n     * @param {EventRegistration=} eventRegistration\n     * @return {!Array.<!Event>}\n     */\n    View.prototype.generateEventsForChanges_ = function (changes, eventCache, eventRegistration) {\n        var registrations = eventRegistration\n            ? [eventRegistration]\n            : this.eventRegistrations_;\n        return this.eventGenerator_.generateEventsForChanges(changes, eventCache, registrations);\n    };\n    return View;\n}());\nexports.View = View;\n\n//# sourceMappingURL=View.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Operation_1 = require(\"./Operation\");\nvar Overwrite_1 = require(\"./Overwrite\");\nvar Path_1 = require(\"../util/Path\");\nvar util_1 = require(\"@firebase/util\");\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @param {!ImmutableTree.<!Node>} children\n * @constructor\n * @implements {Operation}\n */\nvar Merge = /** @class */ (function () {\n    function Merge(\n    /**@inheritDoc */ source, \n    /**@inheritDoc */ path, \n    /**@inheritDoc */ children) {\n        this.source = source;\n        this.path = path;\n        this.children = children;\n        /** @inheritDoc */\n        this.type = Operation_1.OperationType.MERGE;\n    }\n    /**\n     * @inheritDoc\n     */\n    Merge.prototype.operationForChild = function (childName) {\n        if (this.path.isEmpty()) {\n            var childTree = this.children.subtree(new Path_1.Path(childName));\n            if (childTree.isEmpty()) {\n                // This child is unaffected\n                return null;\n            }\n            else if (childTree.value) {\n                // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n                return new Overwrite_1.Overwrite(this.source, Path_1.Path.Empty, childTree.value);\n            }\n            else {\n                // This is a merge at a deeper level\n                return new Merge(this.source, Path_1.Path.Empty, childTree);\n            }\n        }\n        else {\n            util_1.assert(this.path.getFront() === childName, \"Can't get a merge for a child not on the path of the operation\");\n            return new Merge(this.source, this.path.popFront(), this.children);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    Merge.prototype.toString = function () {\n        return ('Operation(' +\n            this.path +\n            ': ' +\n            this.source.toString() +\n            ' merge: ' +\n            this.children.toString() +\n            ')');\n    };\n    return Merge;\n}());\nexports.Merge = Merge;\n\n//# sourceMappingURL=Merge.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Path_1 = require(\"../util/Path\");\nvar Operation_1 = require(\"./Operation\");\n/**\n * @param {!OperationSource} source\n * @param {!Path} path\n * @constructor\n * @implements {Operation}\n */\nvar ListenComplete = /** @class */ (function () {\n    function ListenComplete(source, path) {\n        this.source = source;\n        this.path = path;\n        /** @inheritDoc */\n        this.type = Operation_1.OperationType.LISTEN_COMPLETE;\n    }\n    ListenComplete.prototype.operationForChild = function (childName) {\n        if (this.path.isEmpty()) {\n            return new ListenComplete(this.source, Path_1.Path.Empty);\n        }\n        else {\n            return new ListenComplete(this.source, this.path.popFront());\n        }\n    };\n    return ListenComplete;\n}());\nexports.ListenComplete = ListenComplete;\n\n//# sourceMappingURL=ListenComplete.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Path_1 = require(\"../util/Path\");\nvar Operation_1 = require(\"./Operation\");\nvar AckUserWrite = /** @class */ (function () {\n    /**\n     *\n     * @param {!Path} path\n     * @param {!ImmutableTree<!boolean>} affectedTree A tree containing true for each affected path. Affected paths can't overlap.\n     * @param {!boolean} revert\n     */\n    function AckUserWrite(\n    /**@inheritDoc */ path, \n    /**@inheritDoc */ affectedTree, \n    /**@inheritDoc */ revert) {\n        this.path = path;\n        this.affectedTree = affectedTree;\n        this.revert = revert;\n        /** @inheritDoc */\n        this.type = Operation_1.OperationType.ACK_USER_WRITE;\n        /** @inheritDoc */\n        this.source = Operation_1.OperationSource.User;\n    }\n    /**\n     * @inheritDoc\n     */\n    AckUserWrite.prototype.operationForChild = function (childName) {\n        if (!this.path.isEmpty()) {\n            util_1.assert(this.path.getFront() === childName, 'operationForChild called for unrelated child.');\n            return new AckUserWrite(this.path.popFront(), this.affectedTree, this.revert);\n        }\n        else if (this.affectedTree.value != null) {\n            util_1.assert(this.affectedTree.children.isEmpty(), 'affectedTree should not have overlapping affected paths.');\n            // All child locations are affected as well; just return same operation.\n            return this;\n        }\n        else {\n            var childTree = this.affectedTree.subtree(new Path_1.Path(childName));\n            return new AckUserWrite(Path_1.Path.Empty, childTree, this.revert);\n        }\n    };\n    return AckUserWrite;\n}());\nexports.AckUserWrite = AckUserWrite;\n\n//# sourceMappingURL=AckUserWrite.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"./util/util\");\nvar AckUserWrite_1 = require(\"./operation/AckUserWrite\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\nvar util_3 = require(\"@firebase/util\");\nvar ImmutableTree_1 = require(\"./util/ImmutableTree\");\nvar ListenComplete_1 = require(\"./operation/ListenComplete\");\nvar Merge_1 = require(\"./operation/Merge\");\nvar Operation_1 = require(\"./operation/Operation\");\nvar Overwrite_1 = require(\"./operation/Overwrite\");\nvar Path_1 = require(\"./util/Path\");\nvar SyncPoint_1 = require(\"./SyncPoint\");\nvar WriteTree_1 = require(\"./WriteTree\");\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nvar SyncTree = /** @class */ (function () {\n    /**\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n     *   to server data.\n     */\n    function SyncTree(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n         * @type {!ImmutableTree.<!SyncPoint>}\n         * @private\n         */\n        this.syncPointTree_ = ImmutableTree_1.ImmutableTree.Empty;\n        /**\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n         * @type {!WriteTree}\n         * @private\n         */\n        this.pendingWriteTree_ = new WriteTree_1.WriteTree();\n        this.tagToQueryMap_ = {};\n        this.queryToTagMap_ = {};\n    }\n    /**\n     * Apply the data changes for a user-generated set() or transaction() call.\n     *\n     * @param {!Path} path\n     * @param {!Node} newData\n     * @param {number} writeId\n     * @param {boolean=} visible\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n        // Record pending write.\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n        if (!visible) {\n            return [];\n        }\n        else {\n            return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.User, path, newData));\n        }\n    };\n    /**\n     * Apply the data from a user-generated update() call\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} writeId\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n        // Record pending merge.\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.User, path, changeTree));\n    };\n    /**\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n     *\n     * @param {!number} writeId\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n        if (revert === void 0) { revert = false; }\n        var write = this.pendingWriteTree_.getWrite(writeId);\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n        if (!needToReevaluate) {\n            return [];\n        }\n        else {\n            var affectedTree_1 = ImmutableTree_1.ImmutableTree.Empty;\n            if (write.snap != null) {\n                // overwrite\n                affectedTree_1 = affectedTree_1.set(Path_1.Path.Empty, true);\n            }\n            else {\n                util_3.forEach(write.children, function (pathString, node) {\n                    affectedTree_1 = affectedTree_1.set(new Path_1.Path(pathString), node);\n                });\n            }\n            return this.applyOperationToSyncPoints_(new AckUserWrite_1.AckUserWrite(write.path, affectedTree_1, revert));\n        }\n    };\n    /**\n     * Apply new server data for the specified path..\n     *\n     * @param {!Path} path\n     * @param {!Node} newData\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n        return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.Server, path, newData));\n    };\n    /**\n     * Apply new server data to be merged in at the specified path.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.Server, path, changeTree));\n    };\n    /**\n     * Apply a listen complete for a query\n     *\n     * @param {!Path} path\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyListenComplete = function (path) {\n        return this.applyOperationToSyncPoints_(new ListenComplete_1.ListenComplete(Operation_1.OperationSource.Server, path));\n    };\n    /**\n     * Apply new server data for the specified tagged query.\n     *\n     * @param {!Path} path\n     * @param {!Node} snap\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey != null) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var op = new Overwrite_1.Overwrite(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // Query must have been removed already\n            return [];\n        }\n    };\n    /**\n     * Apply server data to be merged in for the specified tagged query.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n            var op = new Merge_1.Merge(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // We've already removed the query. No big deal, ignore the update\n            return [];\n        }\n    };\n    /**\n     * Apply a listen complete for a tagged query\n     *\n     * @param {!Path} path\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var op = new ListenComplete_1.ListenComplete(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // We've already removed the query. No big deal, ignore the update\n            return [];\n        }\n    };\n    /**\n     * Add an event callback for the specified query.\n     *\n     * @param {!Query} query\n     * @param {!EventRegistration} eventRegistration\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n        var path = query.path;\n        var serverCache = null;\n        var foundAncestorDefaultView = false;\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n            var relativePath = Path_1.Path.relativePath(pathToSyncPoint, path);\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n            foundAncestorDefaultView =\n                foundAncestorDefaultView || sp.hasCompleteView();\n        });\n        var syncPoint = this.syncPointTree_.get(path);\n        if (!syncPoint) {\n            syncPoint = new SyncPoint_1.SyncPoint();\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n        }\n        else {\n            foundAncestorDefaultView =\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n        }\n        var serverCacheComplete;\n        if (serverCache != null) {\n            serverCacheComplete = true;\n        }\n        else {\n            serverCacheComplete = false;\n            serverCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n            var subtree = this.syncPointTree_.subtree(path);\n            subtree.foreachChild(function (childName, childSyncPoint) {\n                var completeCache = childSyncPoint.getCompleteServerCache(Path_1.Path.Empty);\n                if (completeCache) {\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\n                }\n            });\n        }\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n            // We need to track a tag for this query\n            var queryKey = SyncTree.makeQueryKey_(query);\n            util_1.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\n            var tag = SyncTree.getNextQueryTag_();\n            this.queryToTagMap_[queryKey] = tag;\n            // Coerce to string to avoid sparse arrays.\n            this.tagToQueryMap_['_' + tag] = queryKey;\n        }\n        var writesCache = this.pendingWriteTree_.childWrites(path);\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\n            events = events.concat(this.setupListener_(query, view));\n        }\n        return events;\n    };\n    /**\n     * Remove event callback(s).\n     *\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n     *\n     * @param {!Query} query\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n     */\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n        var _this = this;\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\n        var path = query.path;\n        var maybeSyncPoint = this.syncPointTree_.get(path);\n        var cancelEvents = [];\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n        // not loadsAllData().\n        if (maybeSyncPoint &&\n            (query.queryIdentifier() === 'default' ||\n                maybeSyncPoint.viewExistsForQuery(query))) {\n            /**\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n             */\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n            if (maybeSyncPoint.isEmpty()) {\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\n            }\n            var removed = removedAndEvents.removed;\n            cancelEvents = removedAndEvents.events;\n            // We may have just removed one of many listeners and can short-circuit this whole process\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n            // properly set up.\n            //\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            var removingDefault = -1 !==\n                removed.findIndex(function (query) {\n                    return query.getQueryParams().loadsAllData();\n                });\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n                return parentSyncPoint.hasCompleteView();\n            });\n            if (removingDefault && !covered) {\n                var subtree = this.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (var i = 0; i < newViews.length; ++i) {\n                        var view = newViews[i], newQuery = view.getQuery();\n                        var listener = this.createListenerForView_(view);\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n                    }\n                }\n                else {\n                    // There's nothing below us, so nothing we need to start listening on\n                }\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    var defaultTag = null;\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n                }\n                else {\n                    removed.forEach(function (queryToRemove) {\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n            // Now, clear all of the tags we're tracking for the removed listens\n            this.removeTags_(removed);\n        }\n        else {\n            // No-op, this listener must've been already removed\n        }\n        return cancelEvents;\n    };\n    /**\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n     * it, but as this is only used by transaction code, that should always be the case anyways.\n     *\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n     * @param {!Path} path The path to the data we want\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n     * @return {?Node}\n     */\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n        var includeHiddenSets = true;\n        var writeTree = this.pendingWriteTree_;\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n            var relativePath = Path_1.Path.relativePath(pathSoFar, path);\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\n            if (serverCache) {\n                return serverCache;\n            }\n        });\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n    };\n    /**\n     * This collapses multiple unfiltered views into a single view, since we only need a single\n     * listener for them.\n     *\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\n     * @return {!Array.<!View>}\n     * @private\n     */\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n                var completeView = maybeChildSyncPoint.getCompleteView();\n                return [completeView];\n            }\n            else {\n                // No complete view here, flatten any deeper listens into an array\n                var views_1 = [];\n                if (maybeChildSyncPoint) {\n                    views_1 = maybeChildSyncPoint.getQueryViews();\n                }\n                util_3.forEach(childMap, function (key, childViews) {\n                    views_1 = views_1.concat(childViews);\n                });\n                return views_1;\n            }\n        });\n    };\n    /**\n     * @param {!Array.<!Query>} queries\n     * @private\n     */\n    SyncTree.prototype.removeTags_ = function (queries) {\n        for (var j = 0; j < queries.length; ++j) {\n            var removedQuery = queries[j];\n            if (!removedQuery.getQueryParams().loadsAllData()) {\n                // We should have a tag for this\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\n                delete this.queryToTagMap_[removedQueryKey];\n                delete this.tagToQueryMap_['_' + removedQueryTag];\n            }\n        }\n    };\n    /**\n     * Normalizes a query to a query we send the server for listening\n     * @param {!Query} query\n     * @return {!Query} The normalized query\n     * @private\n     */\n    SyncTree.queryForListening_ = function (query) {\n        if (query.getQueryParams().loadsAllData() &&\n            !query.getQueryParams().isDefault()) {\n            // We treat queries that load all data as default queries\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n            // from Query\n            return /** @type {!Query} */ query.getRef();\n        }\n        else {\n            return query;\n        }\n    };\n    /**\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\n     *\n     * @param {!Query} query\n     * @param {!View} view\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n     * @private\n     */\n    SyncTree.prototype.setupListener_ = function (query, view) {\n        var path = query.path;\n        var tag = this.tagForQuery_(query);\n        var listener = this.createListenerForView_(view);\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n        var subtree = this.syncPointTree_.subtree(path);\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n        // may need to shadow other listens as well.\n        if (tag) {\n            util_1.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n        }\n        else {\n            // Shadow everything at or below this location, this is a default listener.\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n                if (!relativePath.isEmpty() &&\n                    maybeChildSyncPoint &&\n                    maybeChildSyncPoint.hasCompleteView()) {\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\n                }\n                else {\n                    // No default listener here, flatten any deeper queries into an array\n                    var queries_1 = [];\n                    if (maybeChildSyncPoint) {\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\n                    }\n                    util_3.forEach(childMap, function (key, childQueries) {\n                        queries_1 = queries_1.concat(childQueries);\n                    });\n                    return queries_1;\n                }\n            });\n            for (var i = 0; i < queriesToStop.length; ++i) {\n                var queryToStop = queriesToStop[i];\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n            }\n        }\n        return events;\n    };\n    /**\n     *\n     * @param {!View} view\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\n     * @private\n     */\n    SyncTree.prototype.createListenerForView_ = function (view) {\n        var _this = this;\n        var query = view.getQuery();\n        var tag = this.tagForQuery_(query);\n        return {\n            hashFn: function () {\n                var cache = view.getServerCache() || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                return cache.hash();\n            },\n            onComplete: function (status) {\n                if (status === 'ok') {\n                    if (tag) {\n                        return _this.applyTaggedListenComplete(query.path, tag);\n                    }\n                    else {\n                        return _this.applyListenComplete(query.path);\n                    }\n                }\n                else {\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                    var error = util_2.errorForServerCode(status, query);\n                    return _this.removeEventRegistration(query, \n                    /*eventRegistration*/ null, error);\n                }\n            }\n        };\n    };\n    /**\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n     * @private\n     * @param {!Query} query\n     * @return {string}\n     */\n    SyncTree.makeQueryKey_ = function (query) {\n        return query.path.toString() + '$' + query.queryIdentifier();\n    };\n    /**\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n     * @private\n     * @param {!string} queryKey\n     * @return {{queryId: !string, path: !Path}}\n     */\n    SyncTree.parseQueryKey_ = function (queryKey) {\n        var splitIndex = queryKey.indexOf('$');\n        util_1.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n        return {\n            queryId: queryKey.substr(splitIndex + 1),\n            path: new Path_1.Path(queryKey.substr(0, splitIndex))\n        };\n    };\n    /**\n     * Return the query associated with the given tag, if we have one\n     * @param {!number} tag\n     * @return {?string}\n     * @private\n     */\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\n        return this.tagToQueryMap_['_' + tag];\n    };\n    /**\n     * Return the tag associated with the given query.\n     * @param {!Query} query\n     * @return {?number}\n     * @private\n     */\n    SyncTree.prototype.tagForQuery_ = function (query) {\n        var queryKey = SyncTree.makeQueryKey_(query);\n        return util_3.safeGet(this.queryToTagMap_, queryKey);\n    };\n    /**\n     * Static accessor for query tags.\n     * @return {number}\n     * @private\n     */\n    SyncTree.getNextQueryTag_ = function () {\n        return SyncTree.nextQueryTag_++;\n    };\n    /**\n     * A helper method to apply tagged operations\n     *\n     * @param {!Path} queryPath\n     * @param {!Operation} operation\n     * @return {!Array.<!Event>}\n     * @private\n     */\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n        var syncPoint = this.syncPointTree_.get(queryPath);\n        util_1.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n        return syncPoint.applyOperation(operation, writesCache, \n        /*serverCache=*/ null);\n    };\n    /**\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n     *\n     * NOTES:\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n     *   3. A snapshot Node with cached server data, if we have it.\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\n     *\n     * @param {!Operation} operation\n     * @return {!Array.<!Event>}\n     * @private\n     */\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path_1.Path.Empty));\n    };\n    /**\n     * Recursive helper for applyOperationToSyncPoints_\n     *\n     * @private\n     * @param {!Operation} operation\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n     * @param {?Node} serverCache\n     * @param {!WriteTreeRef} writesCache\n     * @return {!Array.<!Event>}\n     */\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n        if (operation.path.isEmpty()) {\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n        }\n        else {\n            var syncPoint = syncPointTree.get(Path_1.Path.Empty);\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\n            if (serverCache == null && syncPoint != null) {\n                serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n            }\n            var events = [];\n            var childName = operation.path.getFront();\n            var childOperation = operation.operationForChild(childName);\n            var childTree = syncPointTree.children.get(childName);\n            if (childTree && childOperation) {\n                var childServerCache = serverCache\n                    ? serverCache.getImmediateChild(childName)\n                    : null;\n                var childWritesCache = writesCache.child(childName);\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n            }\n            if (syncPoint) {\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n            }\n            return events;\n        }\n    };\n    /**\n     * Recursive helper for applyOperationToSyncPoints_\n     *\n     * @private\n     * @param {!Operation} operation\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n     * @param {?Node} serverCache\n     * @param {!WriteTreeRef} writesCache\n     * @return {!Array.<!Event>}\n     */\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n        var _this = this;\n        var syncPoint = syncPointTree.get(Path_1.Path.Empty);\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n        }\n        var events = [];\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\n            var childServerCache = serverCache\n                ? serverCache.getImmediateChild(childName)\n                : null;\n            var childWritesCache = writesCache.child(childName);\n            var childOperation = operation.operationForChild(childName);\n            if (childOperation) {\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n            }\n        });\n        if (syncPoint) {\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n        }\n        return events;\n    };\n    /**\n     * Static tracker for next query tag.\n     * @type {number}\n     * @private\n     */\n    SyncTree.nextQueryTag_ = 1;\n    return SyncTree;\n}());\nexports.SyncTree = SyncTree;\n\n//# sourceMappingURL=SyncTree.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Encapsulates the data needed to raise an event\n * @implements {Event}\n */\nvar DataEvent = /** @class */ (function () {\n    /**\n     * @param {!string} eventType One of: value, child_added, child_changed, child_moved, child_removed\n     * @param {!EventRegistration} eventRegistration The function to call to with the event data. User provided\n     * @param {!DataSnapshot} snapshot The data backing the event\n     * @param {?string=} prevName Optional, the name of the previous child for child_* events.\n     */\n    function DataEvent(eventType, eventRegistration, snapshot, prevName) {\n        this.eventType = eventType;\n        this.eventRegistration = eventRegistration;\n        this.snapshot = snapshot;\n        this.prevName = prevName;\n    }\n    /**\n     * @inheritDoc\n     */\n    DataEvent.prototype.getPath = function () {\n        var ref = this.snapshot.getRef();\n        if (this.eventType === 'value') {\n            return ref.path;\n        }\n        else {\n            return ref.getParent().path;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    DataEvent.prototype.getEventType = function () {\n        return this.eventType;\n    };\n    /**\n     * @inheritDoc\n     */\n    DataEvent.prototype.getEventRunner = function () {\n        return this.eventRegistration.getEventRunner(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    DataEvent.prototype.toString = function () {\n        return (this.getPath().toString() +\n            ':' +\n            this.eventType +\n            ':' +\n            util_1.stringify(this.snapshot.exportVal()));\n    };\n    return DataEvent;\n}());\nexports.DataEvent = DataEvent;\nvar CancelEvent = /** @class */ (function () {\n    /**\n     * @param {EventRegistration} eventRegistration\n     * @param {Error} error\n     * @param {!Path} path\n     */\n    function CancelEvent(eventRegistration, error, path) {\n        this.eventRegistration = eventRegistration;\n        this.error = error;\n        this.path = path;\n    }\n    /**\n     * @inheritDoc\n     */\n    CancelEvent.prototype.getPath = function () {\n        return this.path;\n    };\n    /**\n     * @inheritDoc\n     */\n    CancelEvent.prototype.getEventType = function () {\n        return 'cancel';\n    };\n    /**\n     * @inheritDoc\n     */\n    CancelEvent.prototype.getEventRunner = function () {\n        return this.eventRegistration.getEventRunner(this);\n    };\n    /**\n     * @inheritDoc\n     */\n    CancelEvent.prototype.toString = function () {\n        return this.path.toString() + ':cancel';\n    };\n    return CancelEvent;\n}());\nexports.CancelEvent = CancelEvent;\n\n//# sourceMappingURL=Event.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DataSnapshot_1 = require(\"../../api/DataSnapshot\");\nvar Event_1 = require(\"./Event\");\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * Represents registration for 'value' events.\n */\nvar ValueEventRegistration = /** @class */ (function () {\n    /**\n     * @param {?function(!DataSnapshot)} callback_\n     * @param {?function(Error)} cancelCallback_\n     * @param {?Object} context_\n     */\n    function ValueEventRegistration(callback_, cancelCallback_, context_) {\n        this.callback_ = callback_;\n        this.cancelCallback_ = cancelCallback_;\n        this.context_ = context_;\n    }\n    /**\n     * @inheritDoc\n     */\n    ValueEventRegistration.prototype.respondsTo = function (eventType) {\n        return eventType === 'value';\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueEventRegistration.prototype.createEvent = function (change, query) {\n        var index = query.getQueryParams().getIndex();\n        return new Event_1.DataEvent('value', this, new DataSnapshot_1.DataSnapshot(change.snapshotNode, query.getRef(), index));\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueEventRegistration.prototype.getEventRunner = function (eventData) {\n        var ctx = this.context_;\n        if (eventData.getEventType() === 'cancel') {\n            util_2.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n            var cancelCB_1 = this.cancelCallback_;\n            return function () {\n                // We know that error exists, we checked above that this is a cancel event\n                cancelCB_1.call(ctx, eventData.error);\n            };\n        }\n        else {\n            var cb_1 = this.callback_;\n            return function () {\n                cb_1.call(ctx, eventData.snapshot);\n            };\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueEventRegistration.prototype.createCancelEvent = function (error, path) {\n        if (this.cancelCallback_) {\n            return new Event_1.CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueEventRegistration.prototype.matches = function (other) {\n        if (!(other instanceof ValueEventRegistration)) {\n            return false;\n        }\n        else if (!other.callback_ || !this.callback_) {\n            // If no callback specified, we consider it to match any callback.\n            return true;\n        }\n        else {\n            return (other.callback_ === this.callback_ && other.context_ === this.context_);\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ValueEventRegistration.prototype.hasAnyCallback = function () {\n        return this.callback_ !== null;\n    };\n    return ValueEventRegistration;\n}());\nexports.ValueEventRegistration = ValueEventRegistration;\n/**\n * Represents the registration of 1 or more child_xxx events.\n *\n * Currently, it is always exactly 1 child_xxx event, but the idea is we might let you\n * register a group of callbacks together in the future.\n *\n * @constructor\n * @implements {EventRegistration}\n */\nvar ChildEventRegistration = /** @class */ (function () {\n    /**\n     * @param {?Object.<string, function(!DataSnapshot, ?string=)>} callbacks_\n     * @param {?function(Error)} cancelCallback_\n     * @param {Object=} context_\n     */\n    function ChildEventRegistration(callbacks_, cancelCallback_, context_) {\n        this.callbacks_ = callbacks_;\n        this.cancelCallback_ = cancelCallback_;\n        this.context_ = context_;\n    }\n    /**\n     * @inheritDoc\n     */\n    ChildEventRegistration.prototype.respondsTo = function (eventType) {\n        var eventToCheck = eventType === 'children_added' ? 'child_added' : eventType;\n        eventToCheck =\n            eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n        return util_1.contains(this.callbacks_, eventToCheck);\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildEventRegistration.prototype.createCancelEvent = function (error, path) {\n        if (this.cancelCallback_) {\n            return new Event_1.CancelEvent(this, error, path);\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildEventRegistration.prototype.createEvent = function (change, query) {\n        util_2.assert(change.childName != null, 'Child events should have a childName.');\n        var ref = query.getRef().child(/** @type {!string} */ (change.childName));\n        var index = query.getQueryParams().getIndex();\n        return new Event_1.DataEvent(change.type, this, new DataSnapshot_1.DataSnapshot(change.snapshotNode, ref, index), change.prevName);\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildEventRegistration.prototype.getEventRunner = function (eventData) {\n        var ctx = this.context_;\n        if (eventData.getEventType() === 'cancel') {\n            util_2.assert(this.cancelCallback_, 'Raising a cancel event on a listener with no cancel callback');\n            var cancelCB_2 = this.cancelCallback_;\n            return function () {\n                // We know that error exists, we checked above that this is a cancel event\n                cancelCB_2.call(ctx, eventData.error);\n            };\n        }\n        else {\n            var cb_2 = this.callbacks_[eventData.eventType];\n            return function () {\n                cb_2.call(ctx, eventData.snapshot, eventData.prevName);\n            };\n        }\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildEventRegistration.prototype.matches = function (other) {\n        if (other instanceof ChildEventRegistration) {\n            if (!this.callbacks_ || !other.callbacks_) {\n                return true;\n            }\n            else if (this.context_ === other.context_) {\n                var otherCount = util_1.getCount(other.callbacks_);\n                var thisCount = util_1.getCount(this.callbacks_);\n                if (otherCount === thisCount) {\n                    // If count is 1, do an exact match on eventType, if either is defined but null, it's a match.\n                    //  If event types don't match, not a match\n                    // If count is not 1, exact match across all\n                    if (otherCount === 1) {\n                        var otherKey /** @type {!string} */ = util_1.getAnyKey(other.callbacks_);\n                        var thisKey /** @type {!string} */ = util_1.getAnyKey(this.callbacks_);\n                        return (thisKey === otherKey &&\n                            (!other.callbacks_[otherKey] ||\n                                !this.callbacks_[thisKey] ||\n                                other.callbacks_[otherKey] === this.callbacks_[thisKey]));\n                    }\n                    else {\n                        // Exact match on each key.\n                        return util_1.every(this.callbacks_, function (eventType, cb) { return other.callbacks_[eventType] === cb; });\n                    }\n                }\n            }\n        }\n        return false;\n    };\n    /**\n     * @inheritDoc\n     */\n    ChildEventRegistration.prototype.hasAnyCallback = function () {\n        return this.callbacks_ !== null;\n    };\n    return ChildEventRegistration;\n}());\nexports.ChildEventRegistration = ChildEventRegistration;\n\n//# sourceMappingURL=EventRegistration.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexports.nextPushId = (function () {\n    // Modeled after base64 web-safe chars, but ordered by ASCII.\n    var PUSH_CHARS = '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n    // Timestamp of last push, used to prevent local collisions if you push twice\n    // in one ms.\n    var lastPushTime = 0;\n    // We generate 72-bits of randomness which get turned into 12 characters and\n    // appended to the timestamp to prevent collisions with other clients. We\n    // store the last characters we generated because in the event of a collision,\n    // we'll use those same characters except \"incremented\" by one.\n    var lastRandChars = [];\n    return function (now) {\n        var duplicateTime = now === lastPushTime;\n        lastPushTime = now;\n        var i;\n        var timeStampChars = new Array(8);\n        for (i = 7; i >= 0; i--) {\n            timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n            // NOTE: Can't use << here because javascript will convert to int and lose\n            // the upper bits.\n            now = Math.floor(now / 64);\n        }\n        util_1.assert(now === 0, 'Cannot push at time == 0');\n        var id = timeStampChars.join('');\n        if (!duplicateTime) {\n            for (i = 0; i < 12; i++) {\n                lastRandChars[i] = Math.floor(Math.random() * 64);\n            }\n        }\n        else {\n            // If the timestamp hasn't changed since last push, use the same random\n            // number, except incremented by 1.\n            for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n                lastRandChars[i] = 0;\n            }\n            lastRandChars[i]++;\n        }\n        for (i = 0; i < 12; i++) {\n            id += PUSH_CHARS.charAt(lastRandChars[i]);\n        }\n        util_1.assert(id.length === 20, 'nextPushId: Length should be 20.');\n        return id;\n    };\n})();\n\n//# sourceMappingURL=NextPushId.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar TransactionResult = /** @class */ (function () {\n    /**\n     * A type for the resolve value of Firebase.transaction.\n     * @constructor\n     * @dict\n     * @param {boolean} committed\n     * @param {DataSnapshot} snapshot\n     */\n    function TransactionResult(committed, snapshot) {\n        this.committed = committed;\n        this.snapshot = snapshot;\n    }\n    // Do not create public documentation. This is intended to make JSON serialization work but is otherwise unnecessary\n    // for end-users\n    TransactionResult.prototype.toJSON = function () {\n        util_1.validateArgCount('TransactionResult.toJSON', 0, 1, arguments.length);\n        return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n    };\n    return TransactionResult;\n}());\nexports.TransactionResult = TransactionResult;\n\n//# sourceMappingURL=TransactionResult.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n *\n * @constructor\n */\nvar MemoryStorage = /** @class */ (function () {\n    function MemoryStorage() {\n        this.cache_ = {};\n        this.isInMemoryStorage = true;\n    }\n    MemoryStorage.prototype.set = function (key, value) {\n        if (value == null) {\n            delete this.cache_[key];\n        }\n        else {\n            this.cache_[key] = value;\n        }\n    };\n    MemoryStorage.prototype.get = function (key) {\n        if (util_1.contains(this.cache_, key)) {\n            return this.cache_[key];\n        }\n        return null;\n    };\n    MemoryStorage.prototype.remove = function (key) {\n        delete this.cache_[key];\n    };\n    return MemoryStorage;\n}());\nexports.MemoryStorage = MemoryStorage;\n\n//# sourceMappingURL=MemoryStorage.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n * @constructor\n */\nvar DOMStorageWrapper = /** @class */ (function () {\n    /**\n     * @param {Storage} domStorage_ The underlying storage object (e.g. localStorage or sessionStorage)\n     */\n    function DOMStorageWrapper(domStorage_) {\n        this.domStorage_ = domStorage_;\n        // Use a prefix to avoid collisions with other stuff saved by the app.\n        this.prefix_ = 'firebase:';\n    }\n    /**\n     * @param {string} key The key to save the value under\n     * @param {?Object} value The value being stored, or null to remove the key.\n     */\n    DOMStorageWrapper.prototype.set = function (key, value) {\n        if (value == null) {\n            this.domStorage_.removeItem(this.prefixedName_(key));\n        }\n        else {\n            this.domStorage_.setItem(this.prefixedName_(key), util_1.stringify(value));\n        }\n    };\n    /**\n     * @param {string} key\n     * @return {*} The value that was stored under this key, or null\n     */\n    DOMStorageWrapper.prototype.get = function (key) {\n        var storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n        if (storedVal == null) {\n            return null;\n        }\n        else {\n            return util_1.jsonEval(storedVal);\n        }\n    };\n    /**\n     * @param {string} key\n     */\n    DOMStorageWrapper.prototype.remove = function (key) {\n        this.domStorage_.removeItem(this.prefixedName_(key));\n    };\n    /**\n     * @param {string} name\n     * @return {string}\n     */\n    DOMStorageWrapper.prototype.prefixedName_ = function (name) {\n        return this.prefix_ + name;\n    };\n    DOMStorageWrapper.prototype.toString = function () {\n        return this.domStorage_.toString();\n    };\n    return DOMStorageWrapper;\n}());\nexports.DOMStorageWrapper = DOMStorageWrapper;\n\n//# sourceMappingURL=DOMStorageWrapper.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar app_1 = require(\"@firebase/app\");\nvar Database_1 = require(\"./src/api/Database\");\nexports.Database = Database_1.Database;\nvar Query_1 = require(\"./src/api/Query\");\nexports.Query = Query_1.Query;\nvar Reference_1 = require(\"./src/api/Reference\");\nexports.Reference = Reference_1.Reference;\nvar util_1 = require(\"./src/core/util/util\");\nexports.enableLogging = util_1.enableLogging;\nvar RepoManager_1 = require(\"./src/core/RepoManager\");\nvar INTERNAL = require(\"./src/api/internal\");\nvar TEST_ACCESS = require(\"./src/api/test_access\");\nvar util_2 = require(\"@firebase/util\");\nvar ServerValue = Database_1.Database.ServerValue;\nexports.ServerValue = ServerValue;\nfunction registerDatabase(instance) {\n    // Register the Database Service with the 'firebase' namespace.\n    var namespace = instance.INTERNAL.registerService('database', function (app, unused, url) { return RepoManager_1.RepoManager.getInstance().databaseFromApp(app, url); }, \n    // firebase.database namespace properties\n    {\n        Reference: Reference_1.Reference,\n        Query: Query_1.Query,\n        Database: Database_1.Database,\n        enableLogging: util_1.enableLogging,\n        INTERNAL: INTERNAL,\n        ServerValue: ServerValue,\n        TEST_ACCESS: TEST_ACCESS\n    }, null, true);\n    if (util_2.isNodeSdk()) {\n        module.exports = namespace;\n    }\n}\nexports.registerDatabase = registerDatabase;\nregisterDatabase(app_1.default);\nvar DataSnapshot_1 = require(\"./src/api/DataSnapshot\");\nexports.DataSnapshot = DataSnapshot_1.DataSnapshot;\nvar onDisconnect_1 = require(\"./src/api/onDisconnect\");\nexports.OnDisconnect = onDisconnect_1.OnDisconnect;\n\n//# sourceMappingURL=index.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assert_1 = require(\"./assert\");\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n/**\n * @param {string} str\n * @return {Array}\n */\nexports.stringToByteArray = function (str) {\n    var out = [], p = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        // Is this the lead surrogate in a surrogate pair?\n        if (c >= 0xd800 && c <= 0xdbff) {\n            var high = c - 0xd800; // the high 10 bits.\n            i++;\n            assert_1.assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n            c = 0x10000 + (high << 10) + low;\n        }\n        if (c < 128) {\n            out[p++] = c;\n        }\n        else if (c < 2048) {\n            out[p++] = (c >> 6) | 192;\n            out[p++] = (c & 63) | 128;\n        }\n        else if (c < 65536) {\n            out[p++] = (c >> 12) | 224;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n        else {\n            out[p++] = (c >> 18) | 240;\n            out[p++] = ((c >> 12) & 63) | 128;\n            out[p++] = ((c >> 6) & 63) | 128;\n            out[p++] = (c & 63) | 128;\n        }\n    }\n    return out;\n};\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexports.stringLength = function (str) {\n    var p = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            p++;\n        }\n        else if (c < 2048) {\n            p += 2;\n        }\n        else if (c >= 0xd800 && c <= 0xdbff) {\n            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n            p += 4;\n            i++; // skip trail surrogate.\n        }\n        else {\n            p += 3;\n        }\n    }\n    return p;\n};\n\n//# sourceMappingURL=utf8.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param {!string} fnName The function name\n * @param {!number} minCount The minimum number of arguments to allow for the function call\n * @param {!number} maxCount The maximum number of argument to allow for the function call\n * @param {!number} argCount The actual number of arguments provided.\n */\nexports.validateArgCount = function (fnName, minCount, maxCount, argCount) {\n    var argError;\n    if (argCount < minCount) {\n        argError = 'at least ' + minCount;\n    }\n    else if (argCount > maxCount) {\n        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n    }\n    if (argError) {\n        var error = fnName +\n            ' failed: Was called with ' +\n            argCount +\n            (argCount === 1 ? ' argument.' : ' arguments.') +\n            ' Expects ' +\n            argError +\n            '.';\n        throw new Error(error);\n    }\n};\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param {!string} fnName The function name\n * @param {!number} argumentNumber The index of the argument\n * @param {boolean} optional Whether or not the argument is optional\n * @return {!string} The prefix to add to the error thrown for validation.\n */\nfunction errorPrefix(fnName, argumentNumber, optional) {\n    var argName = '';\n    switch (argumentNumber) {\n        case 1:\n            argName = optional ? 'first' : 'First';\n            break;\n        case 2:\n            argName = optional ? 'second' : 'Second';\n            break;\n        case 3:\n            argName = optional ? 'third' : 'Third';\n            break;\n        case 4:\n            argName = optional ? 'fourth' : 'Fourth';\n            break;\n        default:\n            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');\n    }\n    var error = fnName + ' failed: ';\n    error += argName + ' argument ';\n    return error;\n}\nexports.errorPrefix = errorPrefix;\n/**\n * @param {!string} fnName\n * @param {!number} argumentNumber\n * @param {!string} namespace\n * @param {boolean} optional\n */\nfunction validateNamespace(fnName, argumentNumber, namespace, optional) {\n    if (optional && !namespace)\n        return;\n    if (typeof namespace !== 'string') {\n        //TODO: I should do more validation here. We only allow certain chars in namespaces.\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\n            'must be a valid firebase namespace.');\n    }\n}\nexports.validateNamespace = validateNamespace;\nfunction validateCallback(fnName, argumentNumber, callback, optional) {\n    if (optional && !callback)\n        return;\n    if (typeof callback !== 'function')\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\n            'must be a valid function.');\n}\nexports.validateCallback = validateCallback;\nfunction validateContextObject(fnName, argumentNumber, context, optional) {\n    if (optional && !context)\n        return;\n    if (typeof context !== 'object' || context === null)\n        throw new Error(errorPrefix(fnName, argumentNumber, optional) +\n            'must be a valid context object.');\n}\nexports.validateContextObject = validateContextObject;\n\n//# sourceMappingURL=validation.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Helper to make a Subscribe function (just like Promise helps make a\n * Thenable).\n *\n * @param executor Function which can make calls to a single Observer\n *     as a proxy.\n * @param onNoObservers Callback when count of Observers goes to zero.\n */\nfunction createSubscribe(executor, onNoObservers) {\n    var proxy = new ObserverProxy(executor, onNoObservers);\n    return proxy.subscribe.bind(proxy);\n}\nexports.createSubscribe = createSubscribe;\n/**\n * Implement fan-out for any number of Observers attached via a subscribe\n * function.\n */\nvar ObserverProxy = /** @class */ (function () {\n    /**\n     * @param executor Function which can make calls to a single Observer\n     *     as a proxy.\n     * @param onNoObservers Callback when count of Observers goes to zero.\n     */\n    function ObserverProxy(executor, onNoObservers) {\n        var _this = this;\n        this.observers = [];\n        this.unsubscribes = [];\n        this.observerCount = 0;\n        // Micro-task scheduling by calling task.then().\n        this.task = Promise.resolve();\n        this.finalized = false;\n        this.onNoObservers = onNoObservers;\n        // Call the executor asynchronously so subscribers that are called\n        // synchronously after the creation of the subscribe function\n        // can still receive the very first value generated in the executor.\n        this.task\n            .then(function () {\n            executor(_this);\n        })\n            .catch(function (e) {\n            _this.error(e);\n        });\n    }\n    ObserverProxy.prototype.next = function (value) {\n        this.forEachObserver(function (observer) {\n            observer.next(value);\n        });\n    };\n    ObserverProxy.prototype.error = function (error) {\n        this.forEachObserver(function (observer) {\n            observer.error(error);\n        });\n        this.close(error);\n    };\n    ObserverProxy.prototype.complete = function () {\n        this.forEachObserver(function (observer) {\n            observer.complete();\n        });\n        this.close();\n    };\n    /**\n     * Subscribe function that can be used to add an Observer to the fan-out list.\n     *\n     * - We require that no event is sent to a subscriber sychronously to their\n     *   call to subscribe().\n     */\n    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {\n        var _this = this;\n        var observer;\n        if (nextOrObserver === undefined &&\n            error === undefined &&\n            complete === undefined) {\n            throw new Error('Missing Observer.');\n        }\n        // Assemble an Observer object when passed as callback functions.\n        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {\n            observer = nextOrObserver;\n        }\n        else {\n            observer = {\n                next: nextOrObserver,\n                error: error,\n                complete: complete\n            };\n        }\n        if (observer.next === undefined) {\n            observer.next = noop;\n        }\n        if (observer.error === undefined) {\n            observer.error = noop;\n        }\n        if (observer.complete === undefined) {\n            observer.complete = noop;\n        }\n        var unsub = this.unsubscribeOne.bind(this, this.observers.length);\n        // Attempt to subscribe to a terminated Observable - we\n        // just respond to the Observer with the final error or complete\n        // event.\n        if (this.finalized) {\n            this.task.then(function () {\n                try {\n                    if (_this.finalError) {\n                        observer.error(_this.finalError);\n                    }\n                    else {\n                        observer.complete();\n                    }\n                }\n                catch (e) {\n                    // nothing\n                }\n                return;\n            });\n        }\n        this.observers.push(observer);\n        return unsub;\n    };\n    // Unsubscribe is synchronous - we guarantee that no events are sent to\n    // any unsubscribed Observer.\n    ObserverProxy.prototype.unsubscribeOne = function (i) {\n        if (this.observers === undefined || this.observers[i] === undefined) {\n            return;\n        }\n        delete this.observers[i];\n        this.observerCount -= 1;\n        if (this.observerCount === 0 && this.onNoObservers !== undefined) {\n            this.onNoObservers(this);\n        }\n    };\n    ObserverProxy.prototype.forEachObserver = function (fn) {\n        if (this.finalized) {\n            // Already closed by previous event....just eat the additional values.\n            return;\n        }\n        // Since sendOne calls asynchronously - there is no chance that\n        // this.observers will become undefined.\n        for (var i = 0; i < this.observers.length; i++) {\n            this.sendOne(i, fn);\n        }\n    };\n    // Call the Observer via one of it's callback function. We are careful to\n    // confirm that the observe has not been unsubscribed since this asynchronous\n    // function had been queued.\n    ObserverProxy.prototype.sendOne = function (i, fn) {\n        var _this = this;\n        // Execute the callback asynchronously\n        this.task.then(function () {\n            if (_this.observers !== undefined && _this.observers[i] !== undefined) {\n                try {\n                    fn(_this.observers[i]);\n                }\n                catch (e) {\n                    // Ignore exceptions raised in Observers or missing methods of an\n                    // Observer.\n                    // Log error to console. b/31404806\n                    if (typeof console !== 'undefined' && console.error) {\n                        console.error(e);\n                    }\n                }\n            }\n        });\n    };\n    ObserverProxy.prototype.close = function (err) {\n        var _this = this;\n        if (this.finalized) {\n            return;\n        }\n        this.finalized = true;\n        if (err !== undefined) {\n            this.finalError = err;\n        }\n        // Proxy is no longer needed - garbage collect references\n        this.task.then(function () {\n            _this.observers = undefined;\n            _this.onNoObservers = undefined;\n        });\n    };\n    return ObserverProxy;\n}());\n/** Turn synchronous function into one called asynchronously. */\nfunction async(fn, onError) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        Promise.resolve(true)\n            .then(function () {\n            fn.apply(void 0, args);\n        })\n            .catch(function (error) {\n            if (onError) {\n                onError(error);\n            }\n        });\n    };\n}\nexports.async = async;\n/**\n * Return true if the object passed in implements any of the named methods.\n */\nfunction implementsAnyMethods(obj, methods) {\n    if (typeof obj !== 'object' || obj === null) {\n        return false;\n    }\n    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {\n        var method = methods_1[_i];\n        if (method in obj && typeof obj[method] === 'function') {\n            return true;\n        }\n    }\n    return false;\n}\nfunction noop() {\n    // do nothing\n}\n\n//# sourceMappingURL=subscribe.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Copyright 2011 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n/**\n * @fileoverview Abstract cryptographic hash interface.\n *\n * See Sha1 and Md5 for sample implementations.\n *\n */\n/**\n * Create a cryptographic hash instance.\n *\n * @constructor\n * @struct\n */\nvar Hash = /** @class */ (function () {\n    function Hash() {\n        /**\n         * The block size for the hasher.\n         * @type {number}\n         */\n        this.blockSize = -1;\n    }\n    return Hash;\n}());\nexports.Hash = Hash;\n\n//# sourceMappingURL=hash.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar hash_1 = require(\"./hash\");\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @extends {Hash}\n * @final\n * @struct\n */\nvar Sha1 = /** @class */ (function (_super) {\n    tslib_1.__extends(Sha1, _super);\n    function Sha1() {\n        var _this = _super.call(this) || this;\n        /**\n         * Holds the previous values of accumulated variables a-e in the compress_\n         * function.\n         * @type {!Array<number>}\n         * @private\n         */\n        _this.chain_ = [];\n        /**\n         * A buffer holding the partially computed hash result.\n         * @type {!Array<number>}\n         * @private\n         */\n        _this.buf_ = [];\n        /**\n         * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n         * as the message schedule in the docs.\n         * @type {!Array<number>}\n         * @private\n         */\n        _this.W_ = [];\n        /**\n         * Contains data needed to pad messages less than 64 bytes.\n         * @type {!Array<number>}\n         * @private\n         */\n        _this.pad_ = [];\n        /**\n         * @private {number}\n         */\n        _this.inbuf_ = 0;\n        /**\n         * @private {number}\n         */\n        _this.total_ = 0;\n        _this.blockSize = 512 / 8;\n        _this.pad_[0] = 128;\n        for (var i = 1; i < _this.blockSize; ++i) {\n            _this.pad_[i] = 0;\n        }\n        _this.reset();\n        return _this;\n    }\n    Sha1.prototype.reset = function () {\n        this.chain_[0] = 0x67452301;\n        this.chain_[1] = 0xefcdab89;\n        this.chain_[2] = 0x98badcfe;\n        this.chain_[3] = 0x10325476;\n        this.chain_[4] = 0xc3d2e1f0;\n        this.inbuf_ = 0;\n        this.total_ = 0;\n    };\n    /**\n     * Internal compress helper function.\n     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.\n     * @param {number=} opt_offset Offset of the block in the buffer.\n     * @private\n     */\n    Sha1.prototype.compress_ = function (buf, opt_offset) {\n        if (!opt_offset) {\n            opt_offset = 0;\n        }\n        var W = this.W_;\n        // get 16 big endian words\n        if (typeof buf === 'string') {\n            for (var i = 0; i < 16; i++) {\n                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n                // have a bug that turns the post-increment ++ operator into pre-increment\n                // during JIT compilation.  We have code that depends heavily on SHA-1 for\n                // correctness and which is affected by this bug, so I've removed all uses\n                // of post-increment ++ in which the result value is used.  We can revert\n                // this change once the Safari bug\n                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n                // most clients have been updated.\n                W[i] =\n                    (buf.charCodeAt(opt_offset) << 24) |\n                        (buf.charCodeAt(opt_offset + 1) << 16) |\n                        (buf.charCodeAt(opt_offset + 2) << 8) |\n                        buf.charCodeAt(opt_offset + 3);\n                opt_offset += 4;\n            }\n        }\n        else {\n            for (var i = 0; i < 16; i++) {\n                W[i] =\n                    (buf[opt_offset] << 24) |\n                        (buf[opt_offset + 1] << 16) |\n                        (buf[opt_offset + 2] << 8) |\n                        buf[opt_offset + 3];\n                opt_offset += 4;\n            }\n        }\n        // expand to 80 words\n        for (var i = 16; i < 80; i++) {\n            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n        }\n        var a = this.chain_[0];\n        var b = this.chain_[1];\n        var c = this.chain_[2];\n        var d = this.chain_[3];\n        var e = this.chain_[4];\n        var f, k;\n        // TODO(user): Try to unroll this loop to speed up the computation.\n        for (var i = 0; i < 80; i++) {\n            if (i < 40) {\n                if (i < 20) {\n                    f = d ^ (b & (c ^ d));\n                    k = 0x5a827999;\n                }\n                else {\n                    f = b ^ c ^ d;\n                    k = 0x6ed9eba1;\n                }\n            }\n            else {\n                if (i < 60) {\n                    f = (b & c) | (d & (b | c));\n                    k = 0x8f1bbcdc;\n                }\n                else {\n                    f = b ^ c ^ d;\n                    k = 0xca62c1d6;\n                }\n            }\n            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n            e = d;\n            d = c;\n            c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n            b = a;\n            a = t;\n        }\n        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n    };\n    Sha1.prototype.update = function (bytes, opt_length) {\n        // TODO(johnlenz): tighten the function signature and remove this check\n        if (bytes == null) {\n            return;\n        }\n        if (opt_length === undefined) {\n            opt_length = bytes.length;\n        }\n        var lengthMinusBlock = opt_length - this.blockSize;\n        var n = 0;\n        // Using local instead of member variables gives ~5% speedup on Firefox 16.\n        var buf = this.buf_;\n        var inbuf = this.inbuf_;\n        // The outer while loop should execute at most twice.\n        while (n < opt_length) {\n            // When we have no data in the block to top up, we can directly process the\n            // input buffer (assuming it contains sufficient data). This gives ~25%\n            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n            // the data is provided in large chunks (or in multiples of 64 bytes).\n            if (inbuf == 0) {\n                while (n <= lengthMinusBlock) {\n                    this.compress_(bytes, n);\n                    n += this.blockSize;\n                }\n            }\n            if (typeof bytes === 'string') {\n                while (n < opt_length) {\n                    buf[inbuf] = bytes.charCodeAt(n);\n                    ++inbuf;\n                    ++n;\n                    if (inbuf == this.blockSize) {\n                        this.compress_(buf);\n                        inbuf = 0;\n                        // Jump to the outer loop so we use the full-block optimization.\n                        break;\n                    }\n                }\n            }\n            else {\n                while (n < opt_length) {\n                    buf[inbuf] = bytes[n];\n                    ++inbuf;\n                    ++n;\n                    if (inbuf == this.blockSize) {\n                        this.compress_(buf);\n                        inbuf = 0;\n                        // Jump to the outer loop so we use the full-block optimization.\n                        break;\n                    }\n                }\n            }\n        }\n        this.inbuf_ = inbuf;\n        this.total_ += opt_length;\n    };\n    /** @override */\n    Sha1.prototype.digest = function () {\n        var digest = [];\n        var totalBits = this.total_ * 8;\n        // Add pad 0x80 0x00*.\n        if (this.inbuf_ < 56) {\n            this.update(this.pad_, 56 - this.inbuf_);\n        }\n        else {\n            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n        }\n        // Add # bits.\n        for (var i = this.blockSize - 1; i >= 56; i--) {\n            this.buf_[i] = totalBits & 255;\n            totalBits /= 256; // Don't use bit-shifting here!\n        }\n        this.compress_(this.buf_);\n        var n = 0;\n        for (var i = 0; i < 5; i++) {\n            for (var j = 24; j >= 0; j -= 8) {\n                digest[n] = (this.chain_[i] >> j) & 255;\n                ++n;\n            }\n        }\n        return digest;\n    };\n    return Sha1;\n}(hash_1.Hash));\nexports.Sha1 = Sha1;\n\n//# sourceMappingURL=sha1.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar obj_1 = require(\"./obj\");\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params\n * object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n *\n * @param {!Object} querystringParams\n * @return {string}\n */\nexports.querystring = function (querystringParams) {\n    var params = [];\n    obj_1.forEach(querystringParams, function (key, value) {\n        if (Array.isArray(value)) {\n            value.forEach(function (arrayVal) {\n                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));\n            });\n        }\n        else {\n            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n        }\n    });\n    return params.length ? '&' + params.join('&') : '';\n};\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})\n *\n * @param {string} querystring\n * @return {!Object}\n */\nexports.querystringDecode = function (querystring) {\n    var obj = {};\n    var tokens = querystring.replace(/^\\?/, '').split('&');\n    tokens.forEach(function (token) {\n        if (token) {\n            var key = token.split('=');\n            obj[key[0]] = key[1];\n        }\n    });\n    return obj;\n};\n\n//# sourceMappingURL=query.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar crypt_1 = require(\"./crypt\");\nvar json_1 = require(\"./json\");\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {{header: *, claims: *, data: *, signature: string}}\n */\nexports.decode = function (token) {\n    var header = {}, claims = {}, data = {}, signature = '';\n    try {\n        var parts = token.split('.');\n        header = json_1.jsonEval(crypt_1.base64Decode(parts[0]) || '');\n        claims = json_1.jsonEval(crypt_1.base64Decode(parts[1]) || '');\n        signature = parts[2];\n        data = claims['d'] || {};\n        delete claims['d'];\n    }\n    catch (e) { }\n    return {\n        header: header,\n        claims: claims,\n        data: data,\n        signature: signature\n    };\n};\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexports.isValidTimestamp = function (token) {\n    var claims = exports.decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;\n    if (typeof claims === 'object') {\n        if (claims.hasOwnProperty('nbf')) {\n            validSince = claims['nbf'];\n        }\n        else if (claims.hasOwnProperty('iat')) {\n            validSince = claims['iat'];\n        }\n        if (claims.hasOwnProperty('exp')) {\n            validUntil = claims['exp'];\n        }\n        else {\n            // token will expire after 24h by default\n            validUntil = validSince + 86400;\n        }\n    }\n    return (now && validSince && validUntil && now >= validSince && now <= validUntil);\n};\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {?number}\n */\nexports.issuedAtTime = function (token) {\n    var claims = exports.decode(token).claims;\n    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n        return claims['iat'];\n    }\n    return null;\n};\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time and non-empty\n * signature.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexports.isValidFormat = function (token) {\n    var decoded = exports.decode(token), claims = decoded.claims;\n    return (!!decoded.signature &&\n        !!claims &&\n        typeof claims === 'object' &&\n        claims.hasOwnProperty('iat'));\n};\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n *\n * @param {?string} token\n * @return {boolean}\n */\nexports.isAdmin = function (token) {\n    var claims = exports.decode(token).claims;\n    return typeof claims === 'object' && claims['admin'] === true;\n};\n\n//# sourceMappingURL=jwt.js.map\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ERROR_NAME = 'FirebaseError';\nvar captureStackTrace = Error\n    .captureStackTrace;\n// Export for faking in tests\nfunction patchCapture(captureFake) {\n    var result = captureStackTrace;\n    captureStackTrace = captureFake;\n    return result;\n}\nexports.patchCapture = patchCapture;\nvar FirebaseError = /** @class */ (function () {\n    function FirebaseError(code, message) {\n        this.code = code;\n        this.message = message;\n        var stack;\n        // We want the stack value, if implemented by Error\n        if (captureStackTrace) {\n            // Patches this.stack, omitted calls above ErrorFactory#create\n            captureStackTrace(this, ErrorFactory.prototype.create);\n        }\n        else {\n            var err_1 = Error.apply(this, arguments);\n            this.name = ERROR_NAME;\n            // Make non-enumerable getter for the property.\n            Object.defineProperty(this, 'stack', {\n                get: function () {\n                    return err_1.stack;\n                }\n            });\n        }\n    }\n    return FirebaseError;\n}());\nexports.FirebaseError = FirebaseError;\n// Back-door inheritance\nFirebaseError.prototype = Object.create(Error.prototype);\nFirebaseError.prototype.constructor = FirebaseError;\nFirebaseError.prototype.name = ERROR_NAME;\nvar ErrorFactory = /** @class */ (function () {\n    function ErrorFactory(service, serviceName, errors) {\n        this.service = service;\n        this.serviceName = serviceName;\n        this.errors = errors;\n        // Matches {$name}, by default.\n        this.pattern = /\\{\\$([^}]+)}/g;\n        // empty\n    }\n    ErrorFactory.prototype.create = function (code, data) {\n        if (data === undefined) {\n            data = {};\n        }\n        var template = this.errors[code];\n        var fullCode = this.service + '/' + code;\n        var message;\n        if (template === undefined) {\n            message = 'Error';\n        }\n        else {\n            message = template.replace(this.pattern, function (match, key) {\n                var value = data[key];\n                return value !== undefined ? value.toString() : '<' + key + '?>';\n            });\n        }\n        // Service: Error message (service/code).\n        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';\n        var err = new FirebaseError(fullCode, message);\n        // Populate the Error object with message parts for programmatic\n        // accesses (e.g., e.file).\n        for (var prop in data) {\n            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {\n                continue;\n            }\n            err[prop] = data[prop];\n        }\n        return err;\n    };\n    return ErrorFactory;\n}());\nexports.ErrorFactory = ErrorFactory;\n\n//# sourceMappingURL=errors.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constants_1 = require(\"./constants\");\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return {string} user agent string\n */\nexports.getUA = function () {\n    if (typeof navigator !== 'undefined' &&\n        typeof navigator['userAgent'] === 'string') {\n        return navigator['userAgent'];\n    }\n    else {\n        return '';\n    }\n};\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor\n * Cordova `onDeviceReady`, which would normally wait for a callback.\n *\n * @return {boolean} isMobileCordova\n */\nexports.isMobileCordova = function () {\n    return (typeof window !== 'undefined' &&\n        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(exports.getUA()));\n};\n/**\n * Detect React Native.\n *\n * @return {boolean} True if ReactNative environment is detected.\n */\nexports.isReactNative = function () {\n    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');\n};\n/**\n * Detect Node.js.\n *\n * @return {boolean} True if Node.js environment is detected.\n */\nexports.isNodeSdk = function () {\n    return constants_1.CONSTANTS.NODE_CLIENT === true || constants_1.CONSTANTS.NODE_ADMIN === true;\n};\n\n//# sourceMappingURL=environment.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (resolve, reject) {\n            _this.resolve = resolve;\n            _this.reject = reject;\n        });\n    }\n    /**\n     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n     * and returns a node-style callback which will resolve or reject the Deferred's promise.\n     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback\n     * @return {!function(?(Error), ?=)}\n     */\n    Deferred.prototype.wrapCallback = function (callback) {\n        var _this = this;\n        return function (error, value) {\n            if (error) {\n                _this.reject(error);\n            }\n            else {\n                _this.resolve(value);\n            }\n            if (typeof callback === 'function') {\n                // Attaching noop handler just in case developer wasn't expecting\n                // promises\n                _this.promise.catch(function () { });\n                // Some of our callbacks don't expect a value and our own tests\n                // assert that the parameter length is 1\n                if (callback.length === 1) {\n                    callback(error);\n                }\n                else {\n                    callback(error, value);\n                }\n            }\n        };\n    };\n    return Deferred;\n}());\nexports.Deferred = Deferred;\n\n//# sourceMappingURL=deferred.js.map\n","\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nfunction deepCopy(value) {\n    return deepExtend(undefined, value);\n}\nexports.deepCopy = deepCopy;\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n */\nfunction deepExtend(target, source) {\n    if (!(source instanceof Object)) {\n        return source;\n    }\n    switch (source.constructor) {\n        case Date:\n            // Treat Dates like scalars; if the target date object had any child\n            // properties - they will be lost!\n            var dateValue = source;\n            return new Date(dateValue.getTime());\n        case Object:\n            if (target === undefined) {\n                target = {};\n            }\n            break;\n        case Array:\n            // Always copy the array source and overwrite the target.\n            target = [];\n            break;\n        default:\n            // Not a plain Object - treat it as a scalar.\n            return source;\n    }\n    for (var prop in source) {\n        if (!source.hasOwnProperty(prop)) {\n            continue;\n        }\n        target[prop] = deepExtend(target[prop], source[prop]);\n    }\n    return target;\n}\nexports.deepExtend = deepExtend;\n// TODO: Really needed (for JSCompiler type checking)?\nfunction patchProperty(obj, prop, value) {\n    obj[prop] = value;\n}\nexports.patchProperty = patchProperty;\n\n//# sourceMappingURL=deepCopy.js.map\n"],"sourceRoot":""}