Tags : 
----------------------------------------------------------------------------------------

1. Design patterns - pubsub - with examples
	https://carldanley.com/js-module-pattern/
2. algorithms(sort, search)
3. data structure(queue, hashmap) 
4. open source experience
5. improve performance  - CSS Spriting, JS minification, few event listeners, lazy loading
	AMD - Client (RequireJS implements AMD)
	CommonJS - Server
6. analyzing performance - Done
7. memory leakage.
8. requestAnimationFrame - Done
9. basic js concepts - Done
10. positioning
11. Sorting table - passing function when sorting number
12. Search on multiple fields(filtering) in table... 
13. Objects overwriting prototype object - 
14. What happens when you load a page on the browser?

scripting engine chrome, ie, mozilla -> fastest ----> v6
16. throttle, Debounce - Done with doubts
17. JSONP - http://javascript.webcodehelpers.com/2014/05/jsonp-cross-domain-ajax-call-using.html - Done

obj.prototype = {}.... => overwrites the prototype. need to rewrite constructor.


Adarsh questions: 
1. __proto v/s prototype in object, functions, etc.
2. Debounce, throttle
3. Promises in JS
4. Jquery - interview qns... and important concepts
5. Using 'map', filter function in js
6. Encapsulation, Polymorphism, etc. with defn and example in JS.
7. Basics of NodeJS
8. Linked list in JS - http://www.thatjsdude.com/interview/linkedList.html#stackAndQuue
9. Currying arguments - http://tech.pro/tutorial/2011/functional-javascript-part-4-function-currying
10. Features in ES6
11. CommonJS, Amd - http://stackoverflow.com/a/16522990/802651 - Done
12. About Flipkart, new feature(UI)
13. Event loop, Web worker - http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/
14. CSS interview questions
15. Cache control - http://www.mobify.com/blog/beginners-guide-to-http-cache-headers/

Doubts: 
1. How is debouncing different from throttle.. with code example
	https://remysharp.com/2010/07/21/throttling-function-calls
2.

Questions that fucked me up:
1. Implement angular two way binding in vanilla js.
2. Caching in browsers for resources


Interview questions links : 
1. http://thatjsdude.com/interview/index.html
2. https://github.com/h5bp/Front-end-Developer-Interview-Questions - 
3. 

Notes :
1. Performance improvements
	a. Avoid too many event listeners
	b. CSS spriting
	c. JS minification
	d. Lazy loading of images
        e. Caching (read about HTTP headers for caching)

2. Built-in objects:
	a. Data wrapper objects: Number, String, Boolean, Array, Function, Object
	b. Utility objects: Math, Date, RegExp
	c. Error objects: Error

3. Lexicographic sort:
    var a = [3,5,1,11,7, "test"];
	a.sort(function(a, b) {
        return a > b; //Ascending order of numbers
    });
    OUTPUT: [1,3,5,7,11,"test"]

4. Properties of RegExp objects :
	a. global
	b. ignoreCase
	c. multiline
	d. lastIndex - Position at which to start the search. Defaults to 0.
	e. source - Contains the regexp pattern.

5. Functions modifying the array itself:
	a. reverse()
	b. splice()

6. Reverse string function:
	String.prototype.reverse = function () {
     return Array.prototype.reverse.
     apply(this.split('')).join('');
    };

7. Inheritance
		function P() {
		  this.value1 = 10;
		}
		function C() {
		  this.value2 = 20;
		}
		C.prototype = new P();
		C.prototype.constructor; //Will be pointing to function P() { ... }
		C.prototype.constructor = C;
		var c = new C();
		c.value1; //10
		c.value2; //20;

    //Better approach. Put only shared properties in prototype.
    	function P() {
          this.value1 = 10;

        }
        function C() {
          this.value2 = 20;
        }
        P.prototype.sharedValue1 = 10;

        C.prototype = P.prototype;

        C.prototype.constructor; //Will be pointing to function P() { ... }
        C.prototype.constructor = C;
        var c = new C();
        c.value1; //undefined
        c.sharedValue1; //10
        c.value2; //20;

        //But problem here is Parent will get Child properties as well.

        C.prototype.name = 'Testing name';
        var p = new P();
        p.name; // Parent modified !!! Gives out 'Testing name'

	//To avoid this, create temp function F()
		function P() {
		  this.value1 = 10;

		}
		function C() {
		  this.value2 = 20;
		}
		P.prototype.sharedValue1 = 10;

		//MODIFIED LINES - START
		function F() {}
		F.prototype = P.prototype;
		C.prototype = new F();
		//MODIFIED LINES - END

		C.prototype.constructor; //Will be pointing to function P() { ... }
		C.prototype.constructor = C;
		var c = new C();
		c.value1; //undefined
		c.sharedValue1; //10
		c.value2; //20;

		//But problem here is Parent will get Child properties as well.

		C.prototype.name = 'Testing name';
		var p = new P();
		p.name; // Parent modified !!! Gives out 'Testing name'

8. Javascript data types:
	Number, String, Boolean, Function, Object, Null, Undefined

9. Falsy values :
	false, null, undefined, '', 0, NaN

10. Awesome interview : 
	http://blog.sourcing.io/interview-questions
	.overlay {
               position: fixed;
               top: 0;
               bottom: 0;
               left: 0;
               right: 0;
               background: rgba(0,0,0,0.8);
               color: #fff;
               text-align: center;
               vertical-align: middle;
               display: table-cell;
               width: 500px;
               height: 200px;
               margin: auto;
             }

11. HTML5 APIs
	http://www.sitepoint.com/10-html5-apis-worth-looking/
	a. User Timing API - Test performance of our code 
		performance.mark("startFoo");
		// A time consuming function
		foo();
		performance.mark("endFoo");
		 
		performance.measure("durationFoo", "startFoo", "endFoo");

	b. Vibration API
	c. Battery status API

12. Permutation of given string:
	function permutations(str){
		var arr = str.split(''),
			len = arr.length,
			perms = [],
			rest,
			picked,
			restPerms,
			next;

		if (len == 0)
			return [str];

		for (var i=0; i<len; i++)
		{
			rest = Object.create(arr);
			picked = rest.splice(i, 1);

			restPerms = permutations(rest.join(''));

		   for (var j=0, jLen = restPerms.length; j< jLen; j++)
		   {
			   next = picked.concat(restPerms[j]);
			   perms.push(next.join(''));
		   }
		}
	   return perms;
	}

	Explanation:

    Idea: Idea is very simple. We will convert the string to an array. from the array we will pick one character and then permute rest of it. After getting the permutation of the rest of the characters, we will concatenate each of them with the character we have picked.
    step-1 First copy original array to avoid changing it while picking elements
    step-2 Use splice to removed element from the copied array. We copied the array because splice will remove the item from the array. We will need the picked item in the next iteration.
    step-3 [1,2,3,4].splice(2,1) will return [3] and remaining array = [1,2,4]
    step-4 Use recursive method to get the permutation of the rest of the elements by passing array as string
    step-5 Finally, concat like a+permute(bc) for each